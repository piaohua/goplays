// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pub_module.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 玩家的详细数据
type UserData struct {
	Userid   string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Phone    string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Sex      uint32 `protobuf:"varint,4,opt,name=sex,proto3" json:"sex,omitempty"`
	Photo    string `protobuf:"bytes,5,opt,name=photo,proto3" json:"photo,omitempty"`
	Agent    string `protobuf:"bytes,6,opt,name=agent,proto3" json:"agent,omitempty"`
	Coin     int64  `protobuf:"varint,7,opt,name=coin,proto3" json:"coin,omitempty"`
	Diamond  int64  `protobuf:"varint,8,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Card     int64  `protobuf:"varint,9,opt,name=card,proto3" json:"card,omitempty"`
	Chip     int64  `protobuf:"varint,10,opt,name=chip,proto3" json:"chip,omitempty"`
	Vip      uint32 `protobuf:"varint,11,opt,name=vip,proto3" json:"vip,omitempty"`
}

func (m *UserData) Reset()                    { *m = UserData{} }
func (*UserData) ProtoMessage()               {}
func (*UserData) Descriptor() ([]byte, []int) { return fileDescriptorPubModule, []int{0} }

func (m *UserData) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *UserData) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *UserData) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserData) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UserData) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *UserData) GetAgent() string {
	if m != nil {
		return m.Agent
	}
	return ""
}

func (m *UserData) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *UserData) GetDiamond() int64 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *UserData) GetCard() int64 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *UserData) GetChip() int64 {
	if m != nil {
		return m.Chip
	}
	return 0
}

func (m *UserData) GetVip() uint32 {
	if m != nil {
		return m.Vip
	}
	return 0
}

type Currency struct {
	Coin    int64 `protobuf:"varint,1,opt,name=coin,proto3" json:"coin,omitempty"`
	Diamond int64 `protobuf:"varint,2,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Card    int64 `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
	Chip    int64 `protobuf:"varint,4,opt,name=chip,proto3" json:"chip,omitempty"`
}

func (m *Currency) Reset()                    { *m = Currency{} }
func (*Currency) ProtoMessage()               {}
func (*Currency) Descriptor() ([]byte, []int) { return fileDescriptorPubModule, []int{1} }

func (m *Currency) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *Currency) GetDiamond() int64 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *Currency) GetCard() int64 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *Currency) GetChip() int64 {
	if m != nil {
		return m.Chip
	}
	return 0
}

// 房间内玩家数据
type RoomUser struct {
	Data *UserData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Seat uint32    `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
}

func (m *RoomUser) Reset()                    { *m = RoomUser{} }
func (*RoomUser) ProtoMessage()               {}
func (*RoomUser) Descriptor() ([]byte, []int) { return fileDescriptorPubModule, []int{2} }

func (m *RoomUser) GetData() *UserData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RoomUser) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

// 玩家个人数据
type TopInfo struct {
	Topchips   int64  `protobuf:"varint,1,opt,name=topchips,proto3" json:"topchips,omitempty"`
	Topwinchip int64  `protobuf:"varint,2,opt,name=topwinchip,proto3" json:"topwinchip,omitempty"`
	Registtime string `protobuf:"bytes,3,opt,name=registtime,proto3" json:"registtime,omitempty"`
	Logintime  string `protobuf:"bytes,4,opt,name=logintime,proto3" json:"logintime,omitempty"`
}

func (m *TopInfo) Reset()                    { *m = TopInfo{} }
func (*TopInfo) ProtoMessage()               {}
func (*TopInfo) Descriptor() ([]byte, []int) { return fileDescriptorPubModule, []int{3} }

func (m *TopInfo) GetTopchips() int64 {
	if m != nil {
		return m.Topchips
	}
	return 0
}

func (m *TopInfo) GetTopwinchip() int64 {
	if m != nil {
		return m.Topwinchip
	}
	return 0
}

func (m *TopInfo) GetRegisttime() string {
	if m != nil {
		return m.Registtime
	}
	return ""
}

func (m *TopInfo) GetLogintime() string {
	if m != nil {
		return m.Logintime
	}
	return ""
}

func init() {
	proto.RegisterType((*UserData)(nil), "pb.UserData")
	proto.RegisterType((*Currency)(nil), "pb.Currency")
	proto.RegisterType((*RoomUser)(nil), "pb.RoomUser")
	proto.RegisterType((*TopInfo)(nil), "pb.TopInfo")
}
func (this *UserData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserData)
	if !ok {
		that2, ok := that.(UserData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Agent != that1.Agent {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Chip != that1.Chip {
		return false
	}
	if this.Vip != that1.Vip {
		return false
	}
	return true
}
func (this *Currency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Currency)
	if !ok {
		that2, ok := that.(Currency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Chip != that1.Chip {
		return false
	}
	return true
}
func (this *RoomUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoomUser)
	if !ok {
		that2, ok := that.(RoomUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	return true
}
func (this *TopInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TopInfo)
	if !ok {
		that2, ok := that.(TopInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topchips != that1.Topchips {
		return false
	}
	if this.Topwinchip != that1.Topwinchip {
		return false
	}
	if this.Registtime != that1.Registtime {
		return false
	}
	if this.Logintime != that1.Logintime {
		return false
	}
	return true
}
func (this *UserData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&pb.UserData{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Agent: "+fmt.Sprintf("%#v", this.Agent)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Chip: "+fmt.Sprintf("%#v", this.Chip)+",\n")
	s = append(s, "Vip: "+fmt.Sprintf("%#v", this.Vip)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Currency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.Currency{")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Chip: "+fmt.Sprintf("%#v", this.Chip)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoomUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RoomUser{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TopInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.TopInfo{")
	s = append(s, "Topchips: "+fmt.Sprintf("%#v", this.Topchips)+",\n")
	s = append(s, "Topwinchip: "+fmt.Sprintf("%#v", this.Topwinchip)+",\n")
	s = append(s, "Registtime: "+fmt.Sprintf("%#v", this.Registtime)+",\n")
	s = append(s, "Logintime: "+fmt.Sprintf("%#v", this.Logintime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPubModule(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Sex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(m.Sex))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if len(m.Agent) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(len(m.Agent)))
		i += copy(dAtA[i:], m.Agent)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(m.Coin))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(m.Diamond))
	}
	if m.Card != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(m.Card))
	}
	if m.Chip != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(m.Chip))
	}
	if m.Vip != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(m.Vip))
	}
	return i, nil
}

func (m *Currency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Currency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(m.Coin))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(m.Diamond))
	}
	if m.Card != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(m.Card))
	}
	if m.Chip != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(m.Chip))
	}
	return i, nil
}

func (m *RoomUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(m.Seat))
	}
	return i, nil
}

func (m *TopInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Topchips != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(m.Topchips))
	}
	if m.Topwinchip != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(m.Topwinchip))
	}
	if len(m.Registtime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(len(m.Registtime)))
		i += copy(dAtA[i:], m.Registtime)
	}
	if len(m.Logintime) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPubModule(dAtA, i, uint64(len(m.Logintime)))
		i += copy(dAtA[i:], m.Logintime)
	}
	return i, nil
}

func encodeVarintPubModule(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovPubModule(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovPubModule(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovPubModule(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovPubModule(uint64(m.Sex))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovPubModule(uint64(l))
	}
	l = len(m.Agent)
	if l > 0 {
		n += 1 + l + sovPubModule(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovPubModule(uint64(m.Coin))
	}
	if m.Diamond != 0 {
		n += 1 + sovPubModule(uint64(m.Diamond))
	}
	if m.Card != 0 {
		n += 1 + sovPubModule(uint64(m.Card))
	}
	if m.Chip != 0 {
		n += 1 + sovPubModule(uint64(m.Chip))
	}
	if m.Vip != 0 {
		n += 1 + sovPubModule(uint64(m.Vip))
	}
	return n
}

func (m *Currency) Size() (n int) {
	var l int
	_ = l
	if m.Coin != 0 {
		n += 1 + sovPubModule(uint64(m.Coin))
	}
	if m.Diamond != 0 {
		n += 1 + sovPubModule(uint64(m.Diamond))
	}
	if m.Card != 0 {
		n += 1 + sovPubModule(uint64(m.Card))
	}
	if m.Chip != 0 {
		n += 1 + sovPubModule(uint64(m.Chip))
	}
	return n
}

func (m *RoomUser) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPubModule(uint64(l))
	}
	if m.Seat != 0 {
		n += 1 + sovPubModule(uint64(m.Seat))
	}
	return n
}

func (m *TopInfo) Size() (n int) {
	var l int
	_ = l
	if m.Topchips != 0 {
		n += 1 + sovPubModule(uint64(m.Topchips))
	}
	if m.Topwinchip != 0 {
		n += 1 + sovPubModule(uint64(m.Topwinchip))
	}
	l = len(m.Registtime)
	if l > 0 {
		n += 1 + l + sovPubModule(uint64(l))
	}
	l = len(m.Logintime)
	if l > 0 {
		n += 1 + l + sovPubModule(uint64(l))
	}
	return n
}

func sovPubModule(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPubModule(x uint64) (n int) {
	return sovPubModule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UserData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserData{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Agent:` + fmt.Sprintf("%v", this.Agent) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Chip:` + fmt.Sprintf("%v", this.Chip) + `,`,
		`Vip:` + fmt.Sprintf("%v", this.Vip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Currency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Currency{`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Chip:` + fmt.Sprintf("%v", this.Chip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoomUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoomUser{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "UserData", "UserData", 1) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TopInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TopInfo{`,
		`Topchips:` + fmt.Sprintf("%v", this.Topchips) + `,`,
		`Topwinchip:` + fmt.Sprintf("%v", this.Topwinchip) + `,`,
		`Registtime:` + fmt.Sprintf("%v", this.Registtime) + `,`,
		`Logintime:` + fmt.Sprintf("%v", this.Logintime) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPubModule(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chip", wireType)
			}
			m.Chip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chip |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			m.Vip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vip |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Currency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Currency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Currency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chip", wireType)
			}
			m.Chip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chip |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubModule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &UserData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topchips", wireType)
			}
			m.Topchips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topchips |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topwinchip", wireType)
			}
			m.Topwinchip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topwinchip |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logintime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logintime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPubModule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPubModule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubModule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPubModule
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPubModule
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPubModule(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPubModule = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPubModule   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pub_module.proto", fileDescriptorPubModule) }

var fileDescriptorPubModule = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xb1, 0xae, 0xd3, 0x30,
	0x18, 0x85, 0xe3, 0x26, 0x6d, 0xd3, 0xbf, 0x54, 0xaa, 0x2c, 0x84, 0x2c, 0x84, 0xac, 0x28, 0x53,
	0x07, 0xd4, 0x01, 0x5e, 0x00, 0x01, 0x0b, 0x6b, 0x04, 0x33, 0x38, 0x8d, 0x69, 0x2d, 0x1a, 0xdb,
	0x72, 0x9c, 0x02, 0x1b, 0x12, 0x2f, 0xc0, 0x63, 0xf0, 0x28, 0x77, 0xec, 0x78, 0xc7, 0xdb, 0xdc,
	0xe5, 0x8e, 0x9d, 0xef, 0x74, 0x65, 0x27, 0x4d, 0x3b, 0x74, 0xfb, 0xcf, 0x77, 0x7e, 0xf9, 0x1c,
	0xd9, 0x86, 0xb9, 0xae, 0xf3, 0xaf, 0xa5, 0x2a, 0xea, 0x2d, 0x5f, 0x6a, 0xa3, 0xac, 0xc2, 0x03,
	0x9d, 0xa7, 0x8f, 0x08, 0xe2, 0x2f, 0x15, 0x37, 0x1f, 0x99, 0x65, 0xf8, 0x05, 0x8c, 0xea, 0x8a,
	0x1b, 0x51, 0x10, 0x94, 0xa0, 0xc5, 0x24, 0xeb, 0x14, 0x7e, 0x09, 0xb1, 0x14, 0xab, 0x1f, 0x92,
	0x95, 0x9c, 0x0c, 0xbc, 0xd3, 0x6b, 0xfc, 0x1c, 0x86, 0x7a, 0xa3, 0x24, 0x27, 0xa1, 0x37, 0x5a,
	0x81, 0xe7, 0x10, 0x56, 0xfc, 0x17, 0x89, 0x12, 0xb4, 0x98, 0x65, 0x6e, 0xec, 0xf6, 0xac, 0x22,
	0xc3, 0x7e, 0xcf, 0x2a, 0x47, 0xd9, 0x9a, 0x4b, 0x4b, 0x46, 0x2d, 0xf5, 0x02, 0x63, 0x88, 0x56,
	0x4a, 0x48, 0x32, 0x4e, 0xd0, 0x22, 0xcc, 0xfc, 0x8c, 0x09, 0x8c, 0x0b, 0xc1, 0x4a, 0x25, 0x0b,
	0x12, 0x7b, 0x7c, 0x92, 0x7e, 0x9b, 0x99, 0x82, 0x4c, 0xba, 0x6d, 0x66, 0x5a, 0xb6, 0x11, 0x9a,
	0x40, 0xc7, 0x36, 0x42, 0xbb, 0x4e, 0x3b, 0xa1, 0xc9, 0xb4, 0xed, 0xb4, 0x13, 0x3a, 0xfd, 0x06,
	0xf1, 0x87, 0xda, 0x18, 0x2e, 0x57, 0xbf, 0xfb, 0x4c, 0x74, 0x3d, 0x73, 0x70, 0x3d, 0x33, 0xbc,
	0x92, 0x19, 0x9d, 0x33, 0xd3, 0x77, 0x10, 0x67, 0x4a, 0x95, 0xee, 0x86, 0x71, 0x02, 0x51, 0xc1,
	0x2c, 0xf3, 0x09, 0xd3, 0x37, 0xcf, 0x96, 0x3a, 0x5f, 0x9e, 0x6e, 0x3e, 0xf3, 0x8e, 0x3b, 0xa1,
	0xe2, 0xcc, 0xfa, 0xb0, 0x59, 0xe6, 0xe7, 0xf4, 0x2f, 0x82, 0xf1, 0x67, 0xa5, 0x3f, 0xc9, 0xef,
	0xca, 0xbd, 0x83, 0x55, 0xda, 0x1d, 0x5c, 0x75, 0x3d, 0x7b, 0x8d, 0x29, 0x80, 0x55, 0xfa, 0xa7,
	0x90, 0xbe, 0x43, 0x5b, 0xf7, 0x82, 0x38, 0xdf, 0xf0, 0xb5, 0xa8, 0xac, 0x15, 0xe5, 0xe9, 0xb1,
	0x2e, 0x08, 0x7e, 0x05, 0x93, 0xad, 0x5a, 0x0b, 0xe9, 0xed, 0xc8, 0xdb, 0x67, 0xf0, 0xfe, 0xf5,
	0xfe, 0x40, 0x83, 0xdb, 0x03, 0x0d, 0x8e, 0x07, 0x8a, 0xfe, 0x34, 0x14, 0xfd, 0x6f, 0x28, 0xba,
	0x69, 0x28, 0xda, 0x37, 0x14, 0xdd, 0x35, 0x14, 0x3d, 0x34, 0x34, 0x38, 0x36, 0x14, 0xfd, 0xbb,
	0xa7, 0x41, 0x3e, 0xf2, 0xff, 0xeb, 0xed, 0x53, 0x00, 0x00, 0x00, 0xff, 0xff, 0x27, 0xc1, 0xcc,
	0x0e, 0x73, 0x02, 0x00, 0x00,
}
