// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: actor_huiyin.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import actor "github.com/AsynkronIT/protoactor-go/actor"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 获取游戏开奖时间
type HuiYinOpenTime struct {
	Sender *actor.PID `protobuf:"bytes,1,opt,name=Sender" json:"Sender,omitempty"`
	Name   string     `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *HuiYinOpenTime) Reset()                    { *m = HuiYinOpenTime{} }
func (*HuiYinOpenTime) ProtoMessage()               {}
func (*HuiYinOpenTime) Descriptor() ([]byte, []int) { return fileDescriptorActorHuiyin, []int{0} }

func (m *HuiYinOpenTime) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *HuiYinOpenTime) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HuiYinOpenedTime struct {
	List  []*HuiYinGame `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Error ErrCode       `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *HuiYinOpenedTime) Reset()                    { *m = HuiYinOpenedTime{} }
func (*HuiYinOpenedTime) ProtoMessage()               {}
func (*HuiYinOpenedTime) Descriptor() ([]byte, []int) { return fileDescriptorActorHuiyin, []int{1} }

func (m *HuiYinOpenedTime) GetList() []*HuiYinGame {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *HuiYinOpenedTime) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 节点广播游戏状态更新
type PushDeskState struct {
	State         uint32 `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"`
	Expect        string `protobuf:"bytes,2,opt,name=Expect,proto3" json:"Expect,omitempty"`
	Opencode      string `protobuf:"bytes,3,opt,name=Opencode,proto3" json:"Opencode,omitempty"`
	Opentime      string `protobuf:"bytes,4,opt,name=Opentime,proto3" json:"Opentime,omitempty"`
	Opentimestamp int64  `protobuf:"varint,5,opt,name=Opentimestamp,proto3" json:"Opentimestamp,omitempty"`
	Nexttime      int64  `protobuf:"varint,6,opt,name=Nexttime,proto3" json:"Nexttime,omitempty"`
}

func (m *PushDeskState) Reset()                    { *m = PushDeskState{} }
func (*PushDeskState) ProtoMessage()               {}
func (*PushDeskState) Descriptor() ([]byte, []int) { return fileDescriptorActorHuiyin, []int{2} }

func (m *PushDeskState) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *PushDeskState) GetExpect() string {
	if m != nil {
		return m.Expect
	}
	return ""
}

func (m *PushDeskState) GetOpencode() string {
	if m != nil {
		return m.Opencode
	}
	return ""
}

func (m *PushDeskState) GetOpentime() string {
	if m != nil {
		return m.Opentime
	}
	return ""
}

func (m *PushDeskState) GetOpentimestamp() int64 {
	if m != nil {
		return m.Opentimestamp
	}
	return 0
}

func (m *PushDeskState) GetNexttime() int64 {
	if m != nil {
		return m.Nexttime
	}
	return 0
}

// 离线
type OfflineDesk struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
}

func (m *OfflineDesk) Reset()                    { *m = OfflineDesk{} }
func (*OfflineDesk) ProtoMessage()               {}
func (*OfflineDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorHuiyin, []int{3} }

func (m *OfflineDesk) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

// 开奖结果记录日志
type Pk10RecordLog struct {
	Expect        string `protobuf:"bytes,1,opt,name=Expect,proto3" json:"Expect,omitempty"`
	Opencode      string `protobuf:"bytes,2,opt,name=Opencode,proto3" json:"Opencode,omitempty"`
	Opentime      string `protobuf:"bytes,3,opt,name=Opentime,proto3" json:"Opentime,omitempty"`
	Opentimestamp int64  `protobuf:"varint,4,opt,name=Opentimestamp,proto3" json:"Opentimestamp,omitempty"`
	Code          string `protobuf:"bytes,5,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (m *Pk10RecordLog) Reset()                    { *m = Pk10RecordLog{} }
func (*Pk10RecordLog) ProtoMessage()               {}
func (*Pk10RecordLog) Descriptor() ([]byte, []int) { return fileDescriptorActorHuiyin, []int{4} }

func (m *Pk10RecordLog) GetExpect() string {
	if m != nil {
		return m.Expect
	}
	return ""
}

func (m *Pk10RecordLog) GetOpencode() string {
	if m != nil {
		return m.Opencode
	}
	return ""
}

func (m *Pk10RecordLog) GetOpentime() string {
	if m != nil {
		return m.Opentime
	}
	return ""
}

func (m *Pk10RecordLog) GetOpentimestamp() int64 {
	if m != nil {
		return m.Opentimestamp
	}
	return 0
}

func (m *Pk10RecordLog) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// 输赢趋势记录日志
type Pk10TrendLog struct {
	Expect   string         `protobuf:"bytes,1,opt,name=Expect,proto3" json:"Expect,omitempty"`
	Opencode string         `protobuf:"bytes,2,opt,name=Opencode,proto3" json:"Opencode,omitempty"`
	Opentime string         `protobuf:"bytes,3,opt,name=Opentime,proto3" json:"Opentime,omitempty"`
	Result   []*TrendResult `protobuf:"bytes,4,rep,name=Result" json:"Result,omitempty"`
}

func (m *Pk10TrendLog) Reset()                    { *m = Pk10TrendLog{} }
func (*Pk10TrendLog) ProtoMessage()               {}
func (*Pk10TrendLog) Descriptor() ([]byte, []int) { return fileDescriptorActorHuiyin, []int{5} }

func (m *Pk10TrendLog) GetExpect() string {
	if m != nil {
		return m.Expect
	}
	return ""
}

func (m *Pk10TrendLog) GetOpencode() string {
	if m != nil {
		return m.Opencode
	}
	return ""
}

func (m *Pk10TrendLog) GetOpentime() string {
	if m != nil {
		return m.Opentime
	}
	return ""
}

func (m *Pk10TrendLog) GetResult() []*TrendResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// 开牌结果
type TrendResult struct {
	Rank  uint32   `protobuf:"varint,1,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Seat  uint32   `protobuf:"varint,2,opt,name=Seat,proto3" json:"Seat,omitempty"`
	Point uint32   `protobuf:"varint,3,opt,name=Point,proto3" json:"Point,omitempty"`
	Win   bool     `protobuf:"varint,4,opt,name=Win,proto3" json:"Win,omitempty"`
	Cards []uint32 `protobuf:"varint,5,rep,packed,name=Cards" json:"Cards,omitempty"`
}

func (m *TrendResult) Reset()                    { *m = TrendResult{} }
func (*TrendResult) ProtoMessage()               {}
func (*TrendResult) Descriptor() ([]byte, []int) { return fileDescriptorActorHuiyin, []int{6} }

func (m *TrendResult) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *TrendResult) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *TrendResult) GetPoint() uint32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *TrendResult) GetWin() bool {
	if m != nil {
		return m.Win
	}
	return false
}

func (m *TrendResult) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 房间单局记录日志
type Pk10GameLog struct {
	Roomid      string          `protobuf:"bytes,1,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Gametype    uint32          `protobuf:"varint,2,opt,name=Gametype,proto3" json:"Gametype,omitempty"`
	Roomtype    uint32          `protobuf:"varint,3,opt,name=Roomtype,proto3" json:"Roomtype,omitempty"`
	Lotterytype uint32          `protobuf:"varint,4,opt,name=Lotterytype,proto3" json:"Lotterytype,omitempty"`
	Expect      string          `protobuf:"bytes,5,opt,name=Expect,proto3" json:"Expect,omitempty"`
	Opencode    string          `protobuf:"bytes,6,opt,name=Opencode,proto3" json:"Opencode,omitempty"`
	Opentime    string          `protobuf:"bytes,7,opt,name=Opentime,proto3" json:"Opentime,omitempty"`
	Num         uint32          `protobuf:"varint,8,opt,name=Num,proto3" json:"Num,omitempty"`
	RobotFee    int64           `protobuf:"varint,9,opt,name=RobotFee,proto3" json:"RobotFee,omitempty"`
	PlayerFee   int64           `protobuf:"varint,10,opt,name=PlayerFee,proto3" json:"PlayerFee,omitempty"`
	FeeNum      int64           `protobuf:"varint,11,opt,name=FeeNum,proto3" json:"FeeNum,omitempty"`
	BetNum      int64           `protobuf:"varint,12,opt,name=BetNum,proto3" json:"BetNum,omitempty"`
	WinNum      int64           `protobuf:"varint,13,opt,name=WinNum,proto3" json:"WinNum,omitempty"`
	LoseNum     int64           `protobuf:"varint,14,opt,name=LoseNum,proto3" json:"LoseNum,omitempty"`
	RefundNum   int64           `protobuf:"varint,15,opt,name=RefundNum,proto3" json:"RefundNum,omitempty"`
	Trend       []*TrendResult  `protobuf:"bytes,16,rep,name=Trend" json:"Trend,omitempty"`
	Result      []*ResultRecord `protobuf:"bytes,17,rep,name=Result" json:"Result,omitempty"`
	Record      []*FeeResult    `protobuf:"bytes,18,rep,name=Record" json:"Record,omitempty"`
	Details     []*FeeDetails   `protobuf:"bytes,19,rep,name=Details" json:"Details,omitempty"`
}

func (m *Pk10GameLog) Reset()                    { *m = Pk10GameLog{} }
func (*Pk10GameLog) ProtoMessage()               {}
func (*Pk10GameLog) Descriptor() ([]byte, []int) { return fileDescriptorActorHuiyin, []int{7} }

func (m *Pk10GameLog) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *Pk10GameLog) GetGametype() uint32 {
	if m != nil {
		return m.Gametype
	}
	return 0
}

func (m *Pk10GameLog) GetRoomtype() uint32 {
	if m != nil {
		return m.Roomtype
	}
	return 0
}

func (m *Pk10GameLog) GetLotterytype() uint32 {
	if m != nil {
		return m.Lotterytype
	}
	return 0
}

func (m *Pk10GameLog) GetExpect() string {
	if m != nil {
		return m.Expect
	}
	return ""
}

func (m *Pk10GameLog) GetOpencode() string {
	if m != nil {
		return m.Opencode
	}
	return ""
}

func (m *Pk10GameLog) GetOpentime() string {
	if m != nil {
		return m.Opentime
	}
	return ""
}

func (m *Pk10GameLog) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *Pk10GameLog) GetRobotFee() int64 {
	if m != nil {
		return m.RobotFee
	}
	return 0
}

func (m *Pk10GameLog) GetPlayerFee() int64 {
	if m != nil {
		return m.PlayerFee
	}
	return 0
}

func (m *Pk10GameLog) GetFeeNum() int64 {
	if m != nil {
		return m.FeeNum
	}
	return 0
}

func (m *Pk10GameLog) GetBetNum() int64 {
	if m != nil {
		return m.BetNum
	}
	return 0
}

func (m *Pk10GameLog) GetWinNum() int64 {
	if m != nil {
		return m.WinNum
	}
	return 0
}

func (m *Pk10GameLog) GetLoseNum() int64 {
	if m != nil {
		return m.LoseNum
	}
	return 0
}

func (m *Pk10GameLog) GetRefundNum() int64 {
	if m != nil {
		return m.RefundNum
	}
	return 0
}

func (m *Pk10GameLog) GetTrend() []*TrendResult {
	if m != nil {
		return m.Trend
	}
	return nil
}

func (m *Pk10GameLog) GetResult() []*ResultRecord {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Pk10GameLog) GetRecord() []*FeeResult {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *Pk10GameLog) GetDetails() []*FeeDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

// 玩家总结果
type ResultRecord struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Bets   int64  `protobuf:"varint,2,opt,name=Bets,proto3" json:"Bets,omitempty"`
	Wins   int64  `protobuf:"varint,3,opt,name=Wins,proto3" json:"Wins,omitempty"`
	Refund int64  `protobuf:"varint,4,opt,name=Refund,proto3" json:"Refund,omitempty"`
}

func (m *ResultRecord) Reset()                    { *m = ResultRecord{} }
func (*ResultRecord) ProtoMessage()               {}
func (*ResultRecord) Descriptor() ([]byte, []int) { return fileDescriptorActorHuiyin, []int{8} }

func (m *ResultRecord) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *ResultRecord) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *ResultRecord) GetWins() int64 {
	if m != nil {
		return m.Wins
	}
	return 0
}

func (m *ResultRecord) GetRefund() int64 {
	if m != nil {
		return m.Refund
	}
	return 0
}

// 玩家抽佣明细
type FeeResult struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Fee    int64  `protobuf:"varint,2,opt,name=Fee,proto3" json:"Fee,omitempty"`
}

func (m *FeeResult) Reset()                    { *m = FeeResult{} }
func (*FeeResult) ProtoMessage()               {}
func (*FeeResult) Descriptor() ([]byte, []int) { return fileDescriptorActorHuiyin, []int{9} }

func (m *FeeResult) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *FeeResult) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

// 位置抽佣明细
type FeeDetails struct {
	Seat   uint32       `protobuf:"varint,1,opt,name=Seat,proto3" json:"Seat,omitempty"`
	Fee    int64        `protobuf:"varint,2,opt,name=Fee,proto3" json:"Fee,omitempty"`
	Record []*FeeResult `protobuf:"bytes,3,rep,name=Record" json:"Record,omitempty"`
}

func (m *FeeDetails) Reset()                    { *m = FeeDetails{} }
func (*FeeDetails) ProtoMessage()               {}
func (*FeeDetails) Descriptor() ([]byte, []int) { return fileDescriptorActorHuiyin, []int{10} }

func (m *FeeDetails) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *FeeDetails) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *FeeDetails) GetRecord() []*FeeResult {
	if m != nil {
		return m.Record
	}
	return nil
}

// 个人单局记录
type Pk10UseridLog struct {
	Roomid      string           `protobuf:"bytes,1,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Userid      string           `protobuf:"bytes,2,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Robot       bool             `protobuf:"varint,3,opt,name=Robot,proto3" json:"Robot,omitempty"`
	Gametype    uint32           `protobuf:"varint,4,opt,name=Gametype,proto3" json:"Gametype,omitempty"`
	Roomtype    uint32           `protobuf:"varint,5,opt,name=Roomtype,proto3" json:"Roomtype,omitempty"`
	Lotterytype uint32           `protobuf:"varint,6,opt,name=Lotterytype,proto3" json:"Lotterytype,omitempty"`
	Expect      string           `protobuf:"bytes,7,opt,name=Expect,proto3" json:"Expect,omitempty"`
	Bets        int64            `protobuf:"varint,8,opt,name=Bets,proto3" json:"Bets,omitempty"`
	Profits     int64            `protobuf:"varint,9,opt,name=Profits,proto3" json:"Profits,omitempty"`
	Fee         int64            `protobuf:"varint,10,opt,name=Fee,proto3" json:"Fee,omitempty"`
	Rest        int64            `protobuf:"varint,11,opt,name=Rest,proto3" json:"Rest,omitempty"`
	Details     []*UseridDetails `protobuf:"bytes,12,rep,name=Details" json:"Details,omitempty"`
	Dealer      string           `protobuf:"bytes,13,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Dealerseat  uint32           `protobuf:"varint,14,opt,name=dealerseat,proto3" json:"dealerseat,omitempty"`
}

func (m *Pk10UseridLog) Reset()                    { *m = Pk10UseridLog{} }
func (*Pk10UseridLog) ProtoMessage()               {}
func (*Pk10UseridLog) Descriptor() ([]byte, []int) { return fileDescriptorActorHuiyin, []int{11} }

func (m *Pk10UseridLog) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *Pk10UseridLog) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *Pk10UseridLog) GetRobot() bool {
	if m != nil {
		return m.Robot
	}
	return false
}

func (m *Pk10UseridLog) GetGametype() uint32 {
	if m != nil {
		return m.Gametype
	}
	return 0
}

func (m *Pk10UseridLog) GetRoomtype() uint32 {
	if m != nil {
		return m.Roomtype
	}
	return 0
}

func (m *Pk10UseridLog) GetLotterytype() uint32 {
	if m != nil {
		return m.Lotterytype
	}
	return 0
}

func (m *Pk10UseridLog) GetExpect() string {
	if m != nil {
		return m.Expect
	}
	return ""
}

func (m *Pk10UseridLog) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *Pk10UseridLog) GetProfits() int64 {
	if m != nil {
		return m.Profits
	}
	return 0
}

func (m *Pk10UseridLog) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Pk10UseridLog) GetRest() int64 {
	if m != nil {
		return m.Rest
	}
	return 0
}

func (m *Pk10UseridLog) GetDetails() []*UseridDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Pk10UseridLog) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *Pk10UseridLog) GetDealerseat() uint32 {
	if m != nil {
		return m.Dealerseat
	}
	return 0
}

// 个人位置上结果
type UseridDetails struct {
	Seat   uint32 `protobuf:"varint,1,opt,name=Seat,proto3" json:"Seat,omitempty"`
	Bets   int64  `protobuf:"varint,2,opt,name=Bets,proto3" json:"Bets,omitempty"`
	Wins   int64  `protobuf:"varint,3,opt,name=Wins,proto3" json:"Wins,omitempty"`
	Refund int64  `protobuf:"varint,4,opt,name=Refund,proto3" json:"Refund,omitempty"`
}

func (m *UseridDetails) Reset()                    { *m = UseridDetails{} }
func (*UseridDetails) ProtoMessage()               {}
func (*UseridDetails) Descriptor() ([]byte, []int) { return fileDescriptorActorHuiyin, []int{12} }

func (m *UseridDetails) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *UseridDetails) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *UseridDetails) GetWins() int64 {
	if m != nil {
		return m.Wins
	}
	return 0
}

func (m *UseridDetails) GetRefund() int64 {
	if m != nil {
		return m.Refund
	}
	return 0
}

func init() {
	proto.RegisterType((*HuiYinOpenTime)(nil), "pb.HuiYinOpenTime")
	proto.RegisterType((*HuiYinOpenedTime)(nil), "pb.HuiYinOpenedTime")
	proto.RegisterType((*PushDeskState)(nil), "pb.PushDeskState")
	proto.RegisterType((*OfflineDesk)(nil), "pb.OfflineDesk")
	proto.RegisterType((*Pk10RecordLog)(nil), "pb.Pk10RecordLog")
	proto.RegisterType((*Pk10TrendLog)(nil), "pb.Pk10TrendLog")
	proto.RegisterType((*TrendResult)(nil), "pb.TrendResult")
	proto.RegisterType((*Pk10GameLog)(nil), "pb.Pk10GameLog")
	proto.RegisterType((*ResultRecord)(nil), "pb.ResultRecord")
	proto.RegisterType((*FeeResult)(nil), "pb.FeeResult")
	proto.RegisterType((*FeeDetails)(nil), "pb.FeeDetails")
	proto.RegisterType((*Pk10UseridLog)(nil), "pb.Pk10UseridLog")
	proto.RegisterType((*UseridDetails)(nil), "pb.UseridDetails")
}
func (this *HuiYinOpenTime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinOpenTime)
	if !ok {
		that2, ok := that.(HuiYinOpenTime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *HuiYinOpenedTime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinOpenedTime)
	if !ok {
		that2, ok := that.(HuiYinOpenedTime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *PushDeskState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushDeskState)
	if !ok {
		that2, ok := that.(PushDeskState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Expect != that1.Expect {
		return false
	}
	if this.Opencode != that1.Opencode {
		return false
	}
	if this.Opentime != that1.Opentime {
		return false
	}
	if this.Opentimestamp != that1.Opentimestamp {
		return false
	}
	if this.Nexttime != that1.Nexttime {
		return false
	}
	return true
}
func (this *OfflineDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OfflineDesk)
	if !ok {
		that2, ok := that.(OfflineDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *Pk10RecordLog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pk10RecordLog)
	if !ok {
		that2, ok := that.(Pk10RecordLog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Expect != that1.Expect {
		return false
	}
	if this.Opencode != that1.Opencode {
		return false
	}
	if this.Opentime != that1.Opentime {
		return false
	}
	if this.Opentimestamp != that1.Opentimestamp {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *Pk10TrendLog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pk10TrendLog)
	if !ok {
		that2, ok := that.(Pk10TrendLog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Expect != that1.Expect {
		return false
	}
	if this.Opencode != that1.Opencode {
		return false
	}
	if this.Opentime != that1.Opentime {
		return false
	}
	if len(this.Result) != len(that1.Result) {
		return false
	}
	for i := range this.Result {
		if !this.Result[i].Equal(that1.Result[i]) {
			return false
		}
	}
	return true
}
func (this *TrendResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrendResult)
	if !ok {
		that2, ok := that.(TrendResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Point != that1.Point {
		return false
	}
	if this.Win != that1.Win {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	return true
}
func (this *Pk10GameLog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pk10GameLog)
	if !ok {
		that2, ok := that.(Pk10GameLog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Gametype != that1.Gametype {
		return false
	}
	if this.Roomtype != that1.Roomtype {
		return false
	}
	if this.Lotterytype != that1.Lotterytype {
		return false
	}
	if this.Expect != that1.Expect {
		return false
	}
	if this.Opencode != that1.Opencode {
		return false
	}
	if this.Opentime != that1.Opentime {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.RobotFee != that1.RobotFee {
		return false
	}
	if this.PlayerFee != that1.PlayerFee {
		return false
	}
	if this.FeeNum != that1.FeeNum {
		return false
	}
	if this.BetNum != that1.BetNum {
		return false
	}
	if this.WinNum != that1.WinNum {
		return false
	}
	if this.LoseNum != that1.LoseNum {
		return false
	}
	if this.RefundNum != that1.RefundNum {
		return false
	}
	if len(this.Trend) != len(that1.Trend) {
		return false
	}
	for i := range this.Trend {
		if !this.Trend[i].Equal(that1.Trend[i]) {
			return false
		}
	}
	if len(this.Result) != len(that1.Result) {
		return false
	}
	for i := range this.Result {
		if !this.Result[i].Equal(that1.Result[i]) {
			return false
		}
	}
	if len(this.Record) != len(that1.Record) {
		return false
	}
	for i := range this.Record {
		if !this.Record[i].Equal(that1.Record[i]) {
			return false
		}
	}
	if len(this.Details) != len(that1.Details) {
		return false
	}
	for i := range this.Details {
		if !this.Details[i].Equal(that1.Details[i]) {
			return false
		}
	}
	return true
}
func (this *ResultRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResultRecord)
	if !ok {
		that2, ok := that.(ResultRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if this.Wins != that1.Wins {
		return false
	}
	if this.Refund != that1.Refund {
		return false
	}
	return true
}
func (this *FeeResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeeResult)
	if !ok {
		that2, ok := that.(FeeResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Fee != that1.Fee {
		return false
	}
	return true
}
func (this *FeeDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeeDetails)
	if !ok {
		that2, ok := that.(FeeDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Fee != that1.Fee {
		return false
	}
	if len(this.Record) != len(that1.Record) {
		return false
	}
	for i := range this.Record {
		if !this.Record[i].Equal(that1.Record[i]) {
			return false
		}
	}
	return true
}
func (this *Pk10UseridLog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pk10UseridLog)
	if !ok {
		that2, ok := that.(Pk10UseridLog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Robot != that1.Robot {
		return false
	}
	if this.Gametype != that1.Gametype {
		return false
	}
	if this.Roomtype != that1.Roomtype {
		return false
	}
	if this.Lotterytype != that1.Lotterytype {
		return false
	}
	if this.Expect != that1.Expect {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if this.Profits != that1.Profits {
		return false
	}
	if this.Fee != that1.Fee {
		return false
	}
	if this.Rest != that1.Rest {
		return false
	}
	if len(this.Details) != len(that1.Details) {
		return false
	}
	for i := range this.Details {
		if !this.Details[i].Equal(that1.Details[i]) {
			return false
		}
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Dealerseat != that1.Dealerseat {
		return false
	}
	return true
}
func (this *UseridDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UseridDetails)
	if !ok {
		that2, ok := that.(UseridDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if this.Wins != that1.Wins {
		return false
	}
	if this.Refund != that1.Refund {
		return false
	}
	return true
}
func (this *HuiYinOpenTime) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.HuiYinOpenTime{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HuiYinOpenedTime) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.HuiYinOpenedTime{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushDeskState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.PushDeskState{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Expect: "+fmt.Sprintf("%#v", this.Expect)+",\n")
	s = append(s, "Opencode: "+fmt.Sprintf("%#v", this.Opencode)+",\n")
	s = append(s, "Opentime: "+fmt.Sprintf("%#v", this.Opentime)+",\n")
	s = append(s, "Opentimestamp: "+fmt.Sprintf("%#v", this.Opentimestamp)+",\n")
	s = append(s, "Nexttime: "+fmt.Sprintf("%#v", this.Nexttime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OfflineDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.OfflineDesk{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pk10RecordLog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.Pk10RecordLog{")
	s = append(s, "Expect: "+fmt.Sprintf("%#v", this.Expect)+",\n")
	s = append(s, "Opencode: "+fmt.Sprintf("%#v", this.Opencode)+",\n")
	s = append(s, "Opentime: "+fmt.Sprintf("%#v", this.Opentime)+",\n")
	s = append(s, "Opentimestamp: "+fmt.Sprintf("%#v", this.Opentimestamp)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pk10TrendLog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.Pk10TrendLog{")
	s = append(s, "Expect: "+fmt.Sprintf("%#v", this.Expect)+",\n")
	s = append(s, "Opencode: "+fmt.Sprintf("%#v", this.Opencode)+",\n")
	s = append(s, "Opentime: "+fmt.Sprintf("%#v", this.Opentime)+",\n")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TrendResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.TrendResult{")
	s = append(s, "Rank: "+fmt.Sprintf("%#v", this.Rank)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Point: "+fmt.Sprintf("%#v", this.Point)+",\n")
	s = append(s, "Win: "+fmt.Sprintf("%#v", this.Win)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pk10GameLog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 23)
	s = append(s, "&pb.Pk10GameLog{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Gametype: "+fmt.Sprintf("%#v", this.Gametype)+",\n")
	s = append(s, "Roomtype: "+fmt.Sprintf("%#v", this.Roomtype)+",\n")
	s = append(s, "Lotterytype: "+fmt.Sprintf("%#v", this.Lotterytype)+",\n")
	s = append(s, "Expect: "+fmt.Sprintf("%#v", this.Expect)+",\n")
	s = append(s, "Opencode: "+fmt.Sprintf("%#v", this.Opencode)+",\n")
	s = append(s, "Opentime: "+fmt.Sprintf("%#v", this.Opentime)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "RobotFee: "+fmt.Sprintf("%#v", this.RobotFee)+",\n")
	s = append(s, "PlayerFee: "+fmt.Sprintf("%#v", this.PlayerFee)+",\n")
	s = append(s, "FeeNum: "+fmt.Sprintf("%#v", this.FeeNum)+",\n")
	s = append(s, "BetNum: "+fmt.Sprintf("%#v", this.BetNum)+",\n")
	s = append(s, "WinNum: "+fmt.Sprintf("%#v", this.WinNum)+",\n")
	s = append(s, "LoseNum: "+fmt.Sprintf("%#v", this.LoseNum)+",\n")
	s = append(s, "RefundNum: "+fmt.Sprintf("%#v", this.RefundNum)+",\n")
	if this.Trend != nil {
		s = append(s, "Trend: "+fmt.Sprintf("%#v", this.Trend)+",\n")
	}
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	if this.Record != nil {
		s = append(s, "Record: "+fmt.Sprintf("%#v", this.Record)+",\n")
	}
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResultRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.ResultRecord{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "Wins: "+fmt.Sprintf("%#v", this.Wins)+",\n")
	s = append(s, "Refund: "+fmt.Sprintf("%#v", this.Refund)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FeeResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.FeeResult{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Fee: "+fmt.Sprintf("%#v", this.Fee)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FeeDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.FeeDetails{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Fee: "+fmt.Sprintf("%#v", this.Fee)+",\n")
	if this.Record != nil {
		s = append(s, "Record: "+fmt.Sprintf("%#v", this.Record)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pk10UseridLog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&pb.Pk10UseridLog{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Robot: "+fmt.Sprintf("%#v", this.Robot)+",\n")
	s = append(s, "Gametype: "+fmt.Sprintf("%#v", this.Gametype)+",\n")
	s = append(s, "Roomtype: "+fmt.Sprintf("%#v", this.Roomtype)+",\n")
	s = append(s, "Lotterytype: "+fmt.Sprintf("%#v", this.Lotterytype)+",\n")
	s = append(s, "Expect: "+fmt.Sprintf("%#v", this.Expect)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "Profits: "+fmt.Sprintf("%#v", this.Profits)+",\n")
	s = append(s, "Fee: "+fmt.Sprintf("%#v", this.Fee)+",\n")
	s = append(s, "Rest: "+fmt.Sprintf("%#v", this.Rest)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Dealerseat: "+fmt.Sprintf("%#v", this.Dealerseat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UseridDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.UseridDetails{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "Wins: "+fmt.Sprintf("%#v", this.Wins)+",\n")
	s = append(s, "Refund: "+fmt.Sprintf("%#v", this.Refund)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringActorHuiyin(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HuiYinOpenTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinOpenTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Sender.Size()))
		n1, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *HuiYinOpenedTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinOpenedTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintActorHuiyin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *PushDeskState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushDeskState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.State))
	}
	if len(m.Expect) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Expect)))
		i += copy(dAtA[i:], m.Expect)
	}
	if len(m.Opencode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Opencode)))
		i += copy(dAtA[i:], m.Opencode)
	}
	if len(m.Opentime) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Opentime)))
		i += copy(dAtA[i:], m.Opentime)
	}
	if m.Opentimestamp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Opentimestamp))
	}
	if m.Nexttime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Nexttime))
	}
	return i, nil
}

func (m *OfflineDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfflineDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *Pk10RecordLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pk10RecordLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Expect) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Expect)))
		i += copy(dAtA[i:], m.Expect)
	}
	if len(m.Opencode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Opencode)))
		i += copy(dAtA[i:], m.Opencode)
	}
	if len(m.Opentime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Opentime)))
		i += copy(dAtA[i:], m.Opentime)
	}
	if m.Opentimestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Opentimestamp))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	return i, nil
}

func (m *Pk10TrendLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pk10TrendLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Expect) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Expect)))
		i += copy(dAtA[i:], m.Expect)
	}
	if len(m.Opencode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Opencode)))
		i += copy(dAtA[i:], m.Opencode)
	}
	if len(m.Opentime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Opentime)))
		i += copy(dAtA[i:], m.Opentime)
	}
	if len(m.Result) > 0 {
		for _, msg := range m.Result {
			dAtA[i] = 0x22
			i++
			i = encodeVarintActorHuiyin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TrendResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrendResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Rank))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Seat))
	}
	if m.Point != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Point))
	}
	if m.Win {
		dAtA[i] = 0x20
		i++
		if m.Win {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Cards) > 0 {
		dAtA3 := make([]byte, len(m.Cards)*10)
		var j2 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *Pk10GameLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pk10GameLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Gametype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Gametype))
	}
	if m.Roomtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Roomtype))
	}
	if m.Lotterytype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Lotterytype))
	}
	if len(m.Expect) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Expect)))
		i += copy(dAtA[i:], m.Expect)
	}
	if len(m.Opencode) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Opencode)))
		i += copy(dAtA[i:], m.Opencode)
	}
	if len(m.Opentime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Opentime)))
		i += copy(dAtA[i:], m.Opentime)
	}
	if m.Num != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Num))
	}
	if m.RobotFee != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.RobotFee))
	}
	if m.PlayerFee != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.PlayerFee))
	}
	if m.FeeNum != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.FeeNum))
	}
	if m.BetNum != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.BetNum))
	}
	if m.WinNum != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.WinNum))
	}
	if m.LoseNum != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.LoseNum))
	}
	if m.RefundNum != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.RefundNum))
	}
	if len(m.Trend) > 0 {
		for _, msg := range m.Trend {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintActorHuiyin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Result) > 0 {
		for _, msg := range m.Result {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintActorHuiyin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Record) > 0 {
		for _, msg := range m.Record {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintActorHuiyin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Details) > 0 {
		for _, msg := range m.Details {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintActorHuiyin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResultRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Bets != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Bets))
	}
	if m.Wins != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Wins))
	}
	if m.Refund != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Refund))
	}
	return i, nil
}

func (m *FeeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Fee != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Fee))
	}
	return i, nil
}

func (m *FeeDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Seat))
	}
	if m.Fee != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Fee))
	}
	if len(m.Record) > 0 {
		for _, msg := range m.Record {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintActorHuiyin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Pk10UseridLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pk10UseridLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Robot {
		dAtA[i] = 0x18
		i++
		if m.Robot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Gametype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Gametype))
	}
	if m.Roomtype != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Roomtype))
	}
	if m.Lotterytype != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Lotterytype))
	}
	if len(m.Expect) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Expect)))
		i += copy(dAtA[i:], m.Expect)
	}
	if m.Bets != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Bets))
	}
	if m.Profits != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Profits))
	}
	if m.Fee != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Fee))
	}
	if m.Rest != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Rest))
	}
	if len(m.Details) > 0 {
		for _, msg := range m.Details {
			dAtA[i] = 0x62
			i++
			i = encodeVarintActorHuiyin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if m.Dealerseat != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Dealerseat))
	}
	return i, nil
}

func (m *UseridDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UseridDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Seat))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Bets))
	}
	if m.Wins != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Wins))
	}
	if m.Refund != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorHuiyin(dAtA, i, uint64(m.Refund))
	}
	return i, nil
}

func encodeVarintActorHuiyin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HuiYinOpenTime) Size() (n int) {
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	return n
}

func (m *HuiYinOpenedTime) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovActorHuiyin(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Error))
	}
	return n
}

func (m *PushDeskState) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovActorHuiyin(uint64(m.State))
	}
	l = len(m.Expect)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	l = len(m.Opencode)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	l = len(m.Opentime)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	if m.Opentimestamp != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Opentimestamp))
	}
	if m.Nexttime != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Nexttime))
	}
	return n
}

func (m *OfflineDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	return n
}

func (m *Pk10RecordLog) Size() (n int) {
	var l int
	_ = l
	l = len(m.Expect)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	l = len(m.Opencode)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	l = len(m.Opentime)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	if m.Opentimestamp != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Opentimestamp))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	return n
}

func (m *Pk10TrendLog) Size() (n int) {
	var l int
	_ = l
	l = len(m.Expect)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	l = len(m.Opencode)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	l = len(m.Opentime)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovActorHuiyin(uint64(l))
		}
	}
	return n
}

func (m *TrendResult) Size() (n int) {
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Rank))
	}
	if m.Seat != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Seat))
	}
	if m.Point != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Point))
	}
	if m.Win {
		n += 2
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovActorHuiyin(uint64(e))
		}
		n += 1 + sovActorHuiyin(uint64(l)) + l
	}
	return n
}

func (m *Pk10GameLog) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	if m.Gametype != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Gametype))
	}
	if m.Roomtype != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Roomtype))
	}
	if m.Lotterytype != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Lotterytype))
	}
	l = len(m.Expect)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	l = len(m.Opencode)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	l = len(m.Opentime)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Num))
	}
	if m.RobotFee != 0 {
		n += 1 + sovActorHuiyin(uint64(m.RobotFee))
	}
	if m.PlayerFee != 0 {
		n += 1 + sovActorHuiyin(uint64(m.PlayerFee))
	}
	if m.FeeNum != 0 {
		n += 1 + sovActorHuiyin(uint64(m.FeeNum))
	}
	if m.BetNum != 0 {
		n += 1 + sovActorHuiyin(uint64(m.BetNum))
	}
	if m.WinNum != 0 {
		n += 1 + sovActorHuiyin(uint64(m.WinNum))
	}
	if m.LoseNum != 0 {
		n += 1 + sovActorHuiyin(uint64(m.LoseNum))
	}
	if m.RefundNum != 0 {
		n += 1 + sovActorHuiyin(uint64(m.RefundNum))
	}
	if len(m.Trend) > 0 {
		for _, e := range m.Trend {
			l = e.Size()
			n += 2 + l + sovActorHuiyin(uint64(l))
		}
	}
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 2 + l + sovActorHuiyin(uint64(l))
		}
	}
	if len(m.Record) > 0 {
		for _, e := range m.Record {
			l = e.Size()
			n += 2 + l + sovActorHuiyin(uint64(l))
		}
	}
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 2 + l + sovActorHuiyin(uint64(l))
		}
	}
	return n
}

func (m *ResultRecord) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	if m.Bets != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Bets))
	}
	if m.Wins != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Wins))
	}
	if m.Refund != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Refund))
	}
	return n
}

func (m *FeeResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	if m.Fee != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Fee))
	}
	return n
}

func (m *FeeDetails) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Seat))
	}
	if m.Fee != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Fee))
	}
	if len(m.Record) > 0 {
		for _, e := range m.Record {
			l = e.Size()
			n += 1 + l + sovActorHuiyin(uint64(l))
		}
	}
	return n
}

func (m *Pk10UseridLog) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	if m.Robot {
		n += 2
	}
	if m.Gametype != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Gametype))
	}
	if m.Roomtype != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Roomtype))
	}
	if m.Lotterytype != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Lotterytype))
	}
	l = len(m.Expect)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	if m.Bets != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Bets))
	}
	if m.Profits != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Profits))
	}
	if m.Fee != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Fee))
	}
	if m.Rest != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Rest))
	}
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovActorHuiyin(uint64(l))
		}
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovActorHuiyin(uint64(l))
	}
	if m.Dealerseat != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Dealerseat))
	}
	return n
}

func (m *UseridDetails) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Seat))
	}
	if m.Bets != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Bets))
	}
	if m.Wins != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Wins))
	}
	if m.Refund != 0 {
		n += 1 + sovActorHuiyin(uint64(m.Refund))
	}
	return n
}

func sovActorHuiyin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozActorHuiyin(x uint64) (n int) {
	return sovActorHuiyin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HuiYinOpenTime) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinOpenTime{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HuiYinOpenedTime) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinOpenedTime{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "HuiYinGame", "HuiYinGame", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushDeskState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushDeskState{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Expect:` + fmt.Sprintf("%v", this.Expect) + `,`,
		`Opencode:` + fmt.Sprintf("%v", this.Opencode) + `,`,
		`Opentime:` + fmt.Sprintf("%v", this.Opentime) + `,`,
		`Opentimestamp:` + fmt.Sprintf("%v", this.Opentimestamp) + `,`,
		`Nexttime:` + fmt.Sprintf("%v", this.Nexttime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OfflineDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OfflineDesk{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pk10RecordLog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pk10RecordLog{`,
		`Expect:` + fmt.Sprintf("%v", this.Expect) + `,`,
		`Opencode:` + fmt.Sprintf("%v", this.Opencode) + `,`,
		`Opentime:` + fmt.Sprintf("%v", this.Opentime) + `,`,
		`Opentimestamp:` + fmt.Sprintf("%v", this.Opentimestamp) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pk10TrendLog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pk10TrendLog{`,
		`Expect:` + fmt.Sprintf("%v", this.Expect) + `,`,
		`Opencode:` + fmt.Sprintf("%v", this.Opencode) + `,`,
		`Opentime:` + fmt.Sprintf("%v", this.Opentime) + `,`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "TrendResult", "TrendResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrendResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrendResult{`,
		`Rank:` + fmt.Sprintf("%v", this.Rank) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Point:` + fmt.Sprintf("%v", this.Point) + `,`,
		`Win:` + fmt.Sprintf("%v", this.Win) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pk10GameLog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pk10GameLog{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Gametype:` + fmt.Sprintf("%v", this.Gametype) + `,`,
		`Roomtype:` + fmt.Sprintf("%v", this.Roomtype) + `,`,
		`Lotterytype:` + fmt.Sprintf("%v", this.Lotterytype) + `,`,
		`Expect:` + fmt.Sprintf("%v", this.Expect) + `,`,
		`Opencode:` + fmt.Sprintf("%v", this.Opencode) + `,`,
		`Opentime:` + fmt.Sprintf("%v", this.Opentime) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`RobotFee:` + fmt.Sprintf("%v", this.RobotFee) + `,`,
		`PlayerFee:` + fmt.Sprintf("%v", this.PlayerFee) + `,`,
		`FeeNum:` + fmt.Sprintf("%v", this.FeeNum) + `,`,
		`BetNum:` + fmt.Sprintf("%v", this.BetNum) + `,`,
		`WinNum:` + fmt.Sprintf("%v", this.WinNum) + `,`,
		`LoseNum:` + fmt.Sprintf("%v", this.LoseNum) + `,`,
		`RefundNum:` + fmt.Sprintf("%v", this.RefundNum) + `,`,
		`Trend:` + strings.Replace(fmt.Sprintf("%v", this.Trend), "TrendResult", "TrendResult", 1) + `,`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "ResultRecord", "ResultRecord", 1) + `,`,
		`Record:` + strings.Replace(fmt.Sprintf("%v", this.Record), "FeeResult", "FeeResult", 1) + `,`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "FeeDetails", "FeeDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResultRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResultRecord{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`Wins:` + fmt.Sprintf("%v", this.Wins) + `,`,
		`Refund:` + fmt.Sprintf("%v", this.Refund) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeeResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeeResult{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Fee:` + fmt.Sprintf("%v", this.Fee) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeeDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeeDetails{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Fee:` + fmt.Sprintf("%v", this.Fee) + `,`,
		`Record:` + strings.Replace(fmt.Sprintf("%v", this.Record), "FeeResult", "FeeResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pk10UseridLog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pk10UseridLog{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Robot:` + fmt.Sprintf("%v", this.Robot) + `,`,
		`Gametype:` + fmt.Sprintf("%v", this.Gametype) + `,`,
		`Roomtype:` + fmt.Sprintf("%v", this.Roomtype) + `,`,
		`Lotterytype:` + fmt.Sprintf("%v", this.Lotterytype) + `,`,
		`Expect:` + fmt.Sprintf("%v", this.Expect) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`Profits:` + fmt.Sprintf("%v", this.Profits) + `,`,
		`Fee:` + fmt.Sprintf("%v", this.Fee) + `,`,
		`Rest:` + fmt.Sprintf("%v", this.Rest) + `,`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "UseridDetails", "UseridDetails", 1) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Dealerseat:` + fmt.Sprintf("%v", this.Dealerseat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UseridDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UseridDetails{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`Wins:` + fmt.Sprintf("%v", this.Wins) + `,`,
		`Refund:` + fmt.Sprintf("%v", this.Refund) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringActorHuiyin(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HuiYinOpenTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinOpenTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinOpenTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuiYinOpenedTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinOpenedTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinOpenedTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &HuiYinGame{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushDeskState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushDeskState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushDeskState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opencode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opencode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opentime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opentime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opentimestamp", wireType)
			}
			m.Opentimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Opentimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nexttime", wireType)
			}
			m.Nexttime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nexttime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfflineDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfflineDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfflineDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pk10RecordLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pk10RecordLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pk10RecordLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opencode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opencode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opentime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opentime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opentimestamp", wireType)
			}
			m.Opentimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Opentimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pk10TrendLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pk10TrendLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pk10TrendLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opencode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opencode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opentime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opentime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &TrendResult{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrendResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrendResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrendResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Win = bool(v != 0)
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActorHuiyin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActorHuiyin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActorHuiyin
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActorHuiyin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pk10GameLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pk10GameLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pk10GameLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gametype", wireType)
			}
			m.Gametype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gametype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomtype", wireType)
			}
			m.Roomtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lotterytype", wireType)
			}
			m.Lotterytype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lotterytype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opencode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opencode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opentime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opentime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotFee", wireType)
			}
			m.RobotFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobotFee |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFee", wireType)
			}
			m.PlayerFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFee |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeNum", wireType)
			}
			m.FeeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetNum", wireType)
			}
			m.BetNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BetNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinNum", wireType)
			}
			m.WinNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoseNum", wireType)
			}
			m.LoseNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoseNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundNum", wireType)
			}
			m.RefundNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefundNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trend = append(m.Trend, &TrendResult{})
			if err := m.Trend[len(m.Trend)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &ResultRecord{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Record = append(m.Record, &FeeResult{})
			if err := m.Record[len(m.Record)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &FeeDetails{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wins", wireType)
			}
			m.Wins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wins |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refund", wireType)
			}
			m.Refund = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Refund |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Record = append(m.Record, &FeeResult{})
			if err := m.Record[len(m.Record)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pk10UseridLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pk10UseridLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pk10UseridLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Robot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Robot = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gametype", wireType)
			}
			m.Gametype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gametype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomtype", wireType)
			}
			m.Roomtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lotterytype", wireType)
			}
			m.Lotterytype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lotterytype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profits", wireType)
			}
			m.Profits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profits |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rest", wireType)
			}
			m.Rest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rest |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &UseridDetails{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealerseat", wireType)
			}
			m.Dealerseat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dealerseat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UseridDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseridDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseridDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wins", wireType)
			}
			m.Wins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wins |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refund", wireType)
			}
			m.Refund = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Refund |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActorHuiyin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActorHuiyin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorHuiyin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthActorHuiyin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowActorHuiyin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActorHuiyin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthActorHuiyin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActorHuiyin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("actor_huiyin.proto", fileDescriptorActorHuiyin) }

var fileDescriptorActorHuiyin = []byte{
	// 931 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x3f, 0x6f, 0x23, 0x55,
	0x10, 0xcf, 0x66, 0xfd, 0x77, 0x1c, 0x3b, 0xbe, 0xc7, 0x09, 0xad, 0x22, 0xb4, 0x32, 0x2b, 0x22,
	0x2c, 0x01, 0x0e, 0x04, 0x41, 0x4f, 0x2e, 0x17, 0xee, 0xa4, 0x28, 0x67, 0xbd, 0x04, 0x45, 0xa9,
	0x4e, 0x6b, 0x7b, 0x9c, 0xac, 0x62, 0xef, 0xb3, 0x76, 0x9f, 0xa5, 0x73, 0x77, 0x1d, 0x2d, 0x2d,
	0xdf, 0x80, 0x6f, 0x40, 0x45, 0x4f, 0x79, 0x25, 0x25, 0x31, 0x0d, 0xe5, 0x7d, 0x04, 0x34, 0xf3,
	0xde, 0x7a, 0xd7, 0x47, 0x62, 0x0a, 0x74, 0xdd, 0xfc, 0xe6, 0x37, 0x9e, 0x7f, 0xef, 0x37, 0x2b,
	0x83, 0x08, 0x87, 0x5a, 0x25, 0x2f, 0x6f, 0xe6, 0xd1, 0x22, 0x8a, 0x7b, 0xb3, 0x44, 0x69, 0x25,
	0xb6, 0x67, 0x83, 0xbd, 0x6f, 0xaf, 0x23, 0x7d, 0x33, 0x1f, 0xf4, 0x86, 0x6a, 0x7a, 0xf0, 0x5d,
	0xba, 0x88, 0x6f, 0x13, 0x15, 0x3f, 0xbf, 0x38, 0xe0, 0x00, 0xfe, 0xc9, 0x17, 0xd7, 0xea, 0x80,
	0x0d, 0xe3, 0x4b, 0xcd, 0x6f, 0xf7, 0x76, 0xaf, 0xc3, 0x29, 0xbe, 0x1c, 0xaa, 0x11, 0x5a, 0x47,
	0x7b, 0x36, 0x1f, 0xac, 0xa5, 0x0f, 0x9e, 0x41, 0xeb, 0xd9, 0x3c, 0xba, 0x8a, 0xe2, 0x17, 0x33,
	0x8c, 0x2f, 0xa2, 0x29, 0x8a, 0x00, 0x2a, 0xe7, 0x18, 0x8f, 0x30, 0xf1, 0x9c, 0x8e, 0xd3, 0x6d,
	0x1c, 0x42, 0x8f, 0x33, 0xf7, 0xfa, 0xcf, 0x8f, 0xa5, 0x65, 0x84, 0x80, 0xd2, 0x59, 0x38, 0x45,
	0x6f, 0xbb, 0xe3, 0x74, 0xeb, 0x92, 0xed, 0xe0, 0x0a, 0xda, 0x79, 0x26, 0x1c, 0xd9, 0x5c, 0xa5,
	0x49, 0x94, 0x6a, 0xcf, 0xe9, 0xb8, 0xdd, 0xc6, 0x61, 0xab, 0x37, 0x1b, 0xf4, 0x4c, 0xcc, 0xf7,
	0xe1, 0x14, 0x25, 0x73, 0xe2, 0x63, 0x28, 0x63, 0x92, 0xa8, 0x84, 0x93, 0xb5, 0x0e, 0x1b, 0x14,
	0xf4, 0x34, 0x49, 0x9e, 0xa8, 0x11, 0x4a, 0xc3, 0x04, 0xbf, 0x3a, 0xd0, 0xec, 0xcf, 0xd3, 0x9b,
	0x63, 0x4c, 0x6f, 0xcf, 0x75, 0xa8, 0x51, 0x3c, 0x86, 0x32, 0x1b, 0xdc, 0x63, 0x53, 0x1a, 0x20,
	0x3e, 0x84, 0xca, 0xd3, 0x57, 0x33, 0x1c, 0x6a, 0xdb, 0x98, 0x45, 0x62, 0x0f, 0x6a, 0xd4, 0x14,
	0x2d, 0xc2, 0x73, 0x99, 0x59, 0xe1, 0x8c, 0xd3, 0xd1, 0x14, 0xbd, 0x52, 0xce, 0x11, 0x16, 0x9f,
	0x40, 0x33, 0xb3, 0x53, 0x1d, 0x4e, 0x67, 0x5e, 0xb9, 0xe3, 0x74, 0x5d, 0xb9, 0xee, 0xa4, 0x0c,
	0x67, 0xf8, 0x4a, 0x73, 0x86, 0x0a, 0x07, 0xac, 0x70, 0xb0, 0x0f, 0x8d, 0x17, 0xe3, 0xf1, 0x24,
	0x8a, 0x91, 0x7a, 0xa7, 0x06, 0x7f, 0x48, 0x31, 0x89, 0x46, 0xdc, 0x77, 0x5d, 0x5a, 0x14, 0xfc,
	0x4c, 0x03, 0xde, 0x7e, 0xf5, 0xa5, 0xc4, 0xa1, 0x4a, 0x46, 0xa7, 0xea, 0xba, 0x30, 0x8a, 0xf3,
	0xe0, 0x28, 0xdb, 0x1b, 0x46, 0x71, 0xff, 0x6b, 0x94, 0xd2, 0x7d, 0xa3, 0x08, 0x28, 0xd1, 0xde,
	0x79, 0xce, 0xba, 0x64, 0x3b, 0xf8, 0xd1, 0x81, 0x1d, 0xea, 0xed, 0x22, 0xc1, 0xf8, 0xbd, 0xb4,
	0xf6, 0x29, 0x54, 0x24, 0xa6, 0xf3, 0x89, 0xf6, 0x4a, 0x2c, 0x93, 0x5d, 0x52, 0x00, 0x57, 0x33,
	0x6e, 0x69, 0xe9, 0x20, 0x85, 0x46, 0xc1, 0x4d, 0xcd, 0xca, 0x30, 0xbe, 0xb5, 0x12, 0x60, 0x9b,
	0x7c, 0xe7, 0x18, 0x9a, 0xf7, 0x6f, 0x4a, 0xb6, 0x49, 0x2b, 0x7d, 0x15, 0xc5, 0x9a, 0x0b, 0x37,
	0xa5, 0x01, 0xa2, 0x0d, 0xee, 0x65, 0x14, 0xf3, 0x1a, 0x6a, 0x92, 0x4c, 0x8a, 0x7b, 0x12, 0x26,
	0xa3, 0xd4, 0x2b, 0x77, 0x5c, 0x8a, 0x63, 0x10, 0xfc, 0x56, 0x82, 0x06, 0x8d, 0x4f, 0x8a, 0xb5,
	0xd3, 0x4b, 0xa5, 0xa6, 0xf9, 0x13, 0x1a, 0x44, 0x13, 0x52, 0x88, 0x5e, 0xcc, 0xd0, 0x56, 0x5f,
	0x61, 0xe2, 0x28, 0x8a, 0x39, 0xd3, 0xc4, 0x0a, 0x8b, 0x0e, 0x34, 0x4e, 0x95, 0xd6, 0x98, 0x2c,
	0x98, 0x2e, 0x31, 0x5d, 0x74, 0x15, 0xf6, 0x5d, 0x7e, 0x70, 0xdf, 0x95, 0x0d, 0xfb, 0xae, 0xbe,
	0xb3, 0xef, 0x36, 0xb8, 0x67, 0xf3, 0xa9, 0x57, 0xe3, 0x4a, 0x64, 0x9a, 0xfe, 0x06, 0x4a, 0x9f,
	0x20, 0x7a, 0x75, 0xa3, 0xe0, 0x0c, 0x8b, 0x8f, 0xa0, 0xde, 0x9f, 0x84, 0x0b, 0x4c, 0x88, 0x04,
	0x26, 0x73, 0x07, 0xf5, 0x76, 0x82, 0x48, 0xe9, 0x1a, 0x4c, 0x59, 0x44, 0xfe, 0x23, 0xd4, 0xe4,
	0xdf, 0x31, 0x7e, 0x83, 0xc8, 0x7f, 0x19, 0xc5, 0xe4, 0x6f, 0x1a, 0xbf, 0x41, 0xc2, 0x83, 0xea,
	0xa9, 0x4a, 0x39, 0x51, 0x8b, 0x89, 0x0c, 0x52, 0x7d, 0x89, 0xe3, 0x79, 0x3c, 0x22, 0x6e, 0xd7,
	0xd4, 0x5f, 0x39, 0xc4, 0x3e, 0x94, 0x59, 0x12, 0x5e, 0xfb, 0x7e, 0xe9, 0x18, 0x56, 0x74, 0x57,
	0x12, 0x7b, 0xc4, 0x71, 0x6d, 0x8a, 0xb3, 0x21, 0x7c, 0x72, 0x99, 0xc6, 0xc4, 0x3e, 0x45, 0x92,
	0xc7, 0x13, 0x1c, 0xd9, 0xa4, 0xc8, 0x13, 0xc4, 0x5c, 0x8a, 0x44, 0x8a, 0x2e, 0x54, 0x8f, 0x51,
	0x87, 0xd1, 0x24, 0xf5, 0x3e, 0xc8, 0xbf, 0x6d, 0x27, 0x88, 0xd6, 0x2b, 0x33, 0x3a, 0x18, 0xc3,
	0x4e, 0xb1, 0xd0, 0x43, 0x9f, 0x00, 0x52, 0xee, 0x11, 0xea, 0x94, 0xb5, 0xe3, 0x4a, 0xb6, 0xc9,
	0x77, 0x19, 0xc5, 0x29, 0x6b, 0xc6, 0x95, 0x6c, 0xb3, 0xfe, 0x78, 0x7c, 0x7b, 0xc1, 0x16, 0x05,
	0xdf, 0x40, 0x7d, 0xd5, 0xe6, 0x83, 0x45, 0xda, 0xe0, 0xd2, 0x33, 0x9a, 0x1a, 0x64, 0x06, 0x57,
	0x00, 0x79, 0xd7, 0xab, 0xf3, 0x71, 0x0a, 0xe7, 0xf3, 0xaf, 0xdf, 0x14, 0x76, 0xe4, 0x6e, 0xd8,
	0x51, 0xf0, 0xda, 0x35, 0x1f, 0x35, 0x53, 0x7b, 0xd3, 0xed, 0xe4, 0xed, 0x6e, 0xaf, 0xb5, 0xfb,
	0x18, 0xca, 0xac, 0x43, 0x5e, 0x40, 0x4d, 0x1a, 0xb0, 0x76, 0x69, 0xa5, 0x0d, 0x97, 0x56, 0xde,
	0x7c, 0x69, 0x95, 0x4d, 0x97, 0x56, 0x5d, 0xbb, 0xb4, 0xec, 0x6d, 0x6a, 0x85, 0xb7, 0xf1, 0xa0,
	0xda, 0x4f, 0xd4, 0x38, 0xd2, 0xa9, 0x3d, 0x99, 0x0c, 0x66, 0x0b, 0x83, 0x7c, 0x61, 0xf4, 0xa5,
	0xc2, 0x54, 0xdb, 0x1b, 0x61, 0x5b, 0x7c, 0x96, 0x2b, 0x68, 0x87, 0xb7, 0xf8, 0x88, 0xb6, 0x68,
	0x06, 0x7f, 0x57, 0x44, 0xd4, 0xd8, 0x08, 0xc3, 0x09, 0x26, 0x7c, 0x36, 0x75, 0x69, 0x91, 0xf0,
	0x01, 0x8c, 0x95, 0xd2, 0xab, 0xb5, 0x78, 0xa2, 0x82, 0x27, 0x18, 0x42, 0x73, 0x2d, 0xe3, 0xbd,
	0x0f, 0xfc, 0x3f, 0x95, 0x77, 0xf4, 0xf9, 0x9b, 0x3b, 0x7f, 0xeb, 0x8f, 0x3b, 0x7f, 0xeb, 0xed,
	0x9d, 0xef, 0xbc, 0x5e, 0xfa, 0xce, 0x2f, 0x4b, 0xdf, 0xf9, 0x7d, 0xe9, 0x3b, 0x6f, 0x96, 0xbe,
	0xf3, 0xe7, 0xd2, 0x77, 0xfe, 0x5e, 0xfa, 0x5b, 0x6f, 0x97, 0xbe, 0xf3, 0xd3, 0x5f, 0xfe, 0xd6,
	0xa0, 0xc2, 0xff, 0x3b, 0xbe, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xab, 0xc7, 0xb3, 0xec,
	0x08, 0x00, 0x00,
}
