// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pub_huiyin.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 房间基础数据
type HuiYinRoomInfo struct {
	Info     *HuiYinGameInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Num      uint32          `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	State    uint32          `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	Timer    uint32          `protobuf:"varint,4,opt,name=timer,proto3" json:"timer,omitempty"`
	Expect   string          `protobuf:"bytes,5,opt,name=expect,proto3" json:"expect,omitempty"`
	Opencode string          `protobuf:"bytes,6,opt,name=opencode,proto3" json:"opencode,omitempty"`
	Points   []uint32        `protobuf:"varint,7,rep,packed,name=points" json:"points,omitempty"`
}

func (m *HuiYinRoomInfo) Reset()                    { *m = HuiYinRoomInfo{} }
func (*HuiYinRoomInfo) ProtoMessage()               {}
func (*HuiYinRoomInfo) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{0} }

func (m *HuiYinRoomInfo) GetInfo() *HuiYinGameInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *HuiYinRoomInfo) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *HuiYinRoomInfo) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *HuiYinRoomInfo) GetTimer() uint32 {
	if m != nil {
		return m.Timer
	}
	return 0
}

func (m *HuiYinRoomInfo) GetExpect() string {
	if m != nil {
		return m.Expect
	}
	return ""
}

func (m *HuiYinRoomInfo) GetOpencode() string {
	if m != nil {
		return m.Opencode
	}
	return ""
}

func (m *HuiYinRoomInfo) GetPoints() []uint32 {
	if m != nil {
		return m.Points
	}
	return nil
}

// 房间数据
type HuiYinRoom struct {
	Info *HuiYinGameInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Num  uint32          `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *HuiYinRoom) Reset()                    { *m = HuiYinRoom{} }
func (*HuiYinRoom) ProtoMessage()               {}
func (*HuiYinRoom) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{1} }

func (m *HuiYinRoom) GetInfo() *HuiYinGameInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *HuiYinRoom) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// 游戏数据
type HuiYinGame struct {
	Gtype uint32 `protobuf:"varint,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	State uint32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Timer int64  `protobuf:"varint,3,opt,name=timer,proto3" json:"timer,omitempty"`
	Left  int64  `protobuf:"varint,4,opt,name=left,proto3" json:"left,omitempty"`
}

func (m *HuiYinGame) Reset()                    { *m = HuiYinGame{} }
func (*HuiYinGame) ProtoMessage()               {}
func (*HuiYinGame) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{2} }

func (m *HuiYinGame) GetGtype() uint32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *HuiYinGame) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *HuiYinGame) GetTimer() int64 {
	if m != nil {
		return m.Timer
	}
	return 0
}

func (m *HuiYinGame) GetLeft() int64 {
	if m != nil {
		return m.Left
	}
	return 0
}

// 房间下注信息
type HuiYinRoomBets struct {
	Seat uint32 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Bets int64  `protobuf:"varint,2,opt,name=bets,proto3" json:"bets,omitempty"`
}

func (m *HuiYinRoomBets) Reset()                    { *m = HuiYinRoomBets{} }
func (*HuiYinRoomBets) ProtoMessage()               {}
func (*HuiYinRoomBets) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{3} }

func (m *HuiYinRoomBets) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *HuiYinRoomBets) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

// 房间牌面信息
type HuiYinRoomCards struct {
	Rank  uint32   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Seat  uint32   `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Cards []uint32 `protobuf:"varint,3,rep,packed,name=cards" json:"cards,omitempty"`
	Point uint32   `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
}

func (m *HuiYinRoomCards) Reset()                    { *m = HuiYinRoomCards{} }
func (*HuiYinRoomCards) ProtoMessage()               {}
func (*HuiYinRoomCards) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{4} }

func (m *HuiYinRoomCards) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *HuiYinRoomCards) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *HuiYinRoomCards) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *HuiYinRoomCards) GetPoint() uint32 {
	if m != nil {
		return m.Point
	}
	return 0
}

// 开奖结果记录日志
type Pk10Record struct {
	Expect   string `protobuf:"bytes,1,opt,name=expect,proto3" json:"expect,omitempty"`
	Opencode string `protobuf:"bytes,2,opt,name=opencode,proto3" json:"opencode,omitempty"`
	Opentime string `protobuf:"bytes,3,opt,name=opentime,proto3" json:"opentime,omitempty"`
}

func (m *Pk10Record) Reset()                    { *m = Pk10Record{} }
func (*Pk10Record) ProtoMessage()               {}
func (*Pk10Record) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{5} }

func (m *Pk10Record) GetExpect() string {
	if m != nil {
		return m.Expect
	}
	return ""
}

func (m *Pk10Record) GetOpencode() string {
	if m != nil {
		return m.Opencode
	}
	return ""
}

func (m *Pk10Record) GetOpentime() string {
	if m != nil {
		return m.Opentime
	}
	return ""
}

// 下注位置结算数据
type HuiYinSeatOver struct {
	Rank   uint32            `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Seat   uint32            `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Cards  []uint32          `protobuf:"varint,3,rep,packed,name=cards" json:"cards,omitempty"`
	Point  uint32            `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
	Bets   int64             `protobuf:"varint,5,opt,name=bets,proto3" json:"bets,omitempty"`
	WinNum int64             `protobuf:"varint,6,opt,name=winNum,proto3" json:"winNum,omitempty"`
	Refund int64             `protobuf:"varint,7,opt,name=refund,proto3" json:"refund,omitempty"`
	Cost   int64             `protobuf:"varint,8,opt,name=cost,proto3" json:"cost,omitempty"`
	List   []*HuiYinRoomWins `protobuf:"bytes,9,rep,name=list" json:"list,omitempty"`
}

func (m *HuiYinSeatOver) Reset()                    { *m = HuiYinSeatOver{} }
func (*HuiYinSeatOver) ProtoMessage()               {}
func (*HuiYinSeatOver) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{6} }

func (m *HuiYinSeatOver) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *HuiYinSeatOver) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *HuiYinSeatOver) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *HuiYinSeatOver) GetPoint() uint32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *HuiYinSeatOver) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *HuiYinSeatOver) GetWinNum() int64 {
	if m != nil {
		return m.WinNum
	}
	return 0
}

func (m *HuiYinSeatOver) GetRefund() int64 {
	if m != nil {
		return m.Refund
	}
	return 0
}

func (m *HuiYinSeatOver) GetCost() int64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *HuiYinSeatOver) GetList() []*HuiYinRoomWins {
	if m != nil {
		return m.List
	}
	return nil
}

// 下注位置上每个玩家输赢明细(自己和坐下玩家)
type HuiYinRoomWins struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Seat   uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Wins   int64  `protobuf:"varint,3,opt,name=wins,proto3" json:"wins,omitempty"`
	Bets   int64  `protobuf:"varint,4,opt,name=bets,proto3" json:"bets,omitempty"`
	Refund int64  `protobuf:"varint,5,opt,name=refund,proto3" json:"refund,omitempty"`
}

func (m *HuiYinRoomWins) Reset()                    { *m = HuiYinRoomWins{} }
func (*HuiYinRoomWins) ProtoMessage()               {}
func (*HuiYinRoomWins) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{7} }

func (m *HuiYinRoomWins) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *HuiYinRoomWins) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *HuiYinRoomWins) GetWins() int64 {
	if m != nil {
		return m.Wins
	}
	return 0
}

func (m *HuiYinRoomWins) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *HuiYinRoomWins) GetRefund() int64 {
	if m != nil {
		return m.Refund
	}
	return 0
}

// 玩家结算数据
type HuiYinRoomOver struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Seat   uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Bets   int64  `protobuf:"varint,3,opt,name=bets,proto3" json:"bets,omitempty"`
	Cost   int64  `protobuf:"varint,4,opt,name=cost,proto3" json:"cost,omitempty"`
	Wins   int64  `protobuf:"varint,5,opt,name=wins,proto3" json:"wins,omitempty"`
	Refund int64  `protobuf:"varint,6,opt,name=refund,proto3" json:"refund,omitempty"`
}

func (m *HuiYinRoomOver) Reset()                    { *m = HuiYinRoomOver{} }
func (*HuiYinRoomOver) ProtoMessage()               {}
func (*HuiYinRoomOver) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{8} }

func (m *HuiYinRoomOver) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *HuiYinRoomOver) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *HuiYinRoomOver) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *HuiYinRoomOver) GetCost() int64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *HuiYinRoomOver) GetWins() int64 {
	if m != nil {
		return m.Wins
	}
	return 0
}

func (m *HuiYinRoomOver) GetRefund() int64 {
	if m != nil {
		return m.Refund
	}
	return 0
}

// 上庄列表
type HuiYinDealerList struct {
	Userid   string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Photo    string `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Chip     int64  `protobuf:"varint,4,opt,name=chip,proto3" json:"chip,omitempty"`
}

func (m *HuiYinDealerList) Reset()                    { *m = HuiYinDealerList{} }
func (*HuiYinDealerList) ProtoMessage()               {}
func (*HuiYinDealerList) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{9} }

func (m *HuiYinDealerList) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *HuiYinDealerList) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *HuiYinDealerList) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *HuiYinDealerList) GetChip() int64 {
	if m != nil {
		return m.Chip
	}
	return 0
}

// 玩家个人详细记录数据
type HuiYinRecords struct {
	Gtype      uint32               `protobuf:"varint,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Rtype      uint32               `protobuf:"varint,2,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Rest       int64                `protobuf:"varint,3,opt,name=rest,proto3" json:"rest,omitempty"`
	Num        uint32               `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Expect     string               `protobuf:"bytes,5,opt,name=expect,proto3" json:"expect,omitempty"`
	Opencode   string               `protobuf:"bytes,6,opt,name=opencode,proto3" json:"opencode,omitempty"`
	Opentime   string               `protobuf:"bytes,7,opt,name=opentime,proto3" json:"opentime,omitempty"`
	Cards      []*HuiYinRoomCards   `protobuf:"bytes,8,rep,name=cards" json:"cards,omitempty"`
	Selfinfo   []*HuiYinSeatRecords `protobuf:"bytes,9,rep,name=selfinfo" json:"selfinfo,omitempty"`
	Result     []*HuiYinWinRecords  `protobuf:"bytes,10,rep,name=result" json:"result,omitempty"`
	Dealer     string               `protobuf:"bytes,11,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Dealerseat uint32               `protobuf:"varint,12,opt,name=dealerseat,proto3" json:"dealerseat,omitempty"`
}

func (m *HuiYinRecords) Reset()                    { *m = HuiYinRecords{} }
func (*HuiYinRecords) ProtoMessage()               {}
func (*HuiYinRecords) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{10} }

func (m *HuiYinRecords) GetGtype() uint32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *HuiYinRecords) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *HuiYinRecords) GetRest() int64 {
	if m != nil {
		return m.Rest
	}
	return 0
}

func (m *HuiYinRecords) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *HuiYinRecords) GetExpect() string {
	if m != nil {
		return m.Expect
	}
	return ""
}

func (m *HuiYinRecords) GetOpencode() string {
	if m != nil {
		return m.Opencode
	}
	return ""
}

func (m *HuiYinRecords) GetOpentime() string {
	if m != nil {
		return m.Opentime
	}
	return ""
}

func (m *HuiYinRecords) GetCards() []*HuiYinRoomCards {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *HuiYinRecords) GetSelfinfo() []*HuiYinSeatRecords {
	if m != nil {
		return m.Selfinfo
	}
	return nil
}

func (m *HuiYinRecords) GetResult() []*HuiYinWinRecords {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *HuiYinRecords) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *HuiYinRecords) GetDealerseat() uint32 {
	if m != nil {
		return m.Dealerseat
	}
	return 0
}

// 玩家自己个人记录数据
type HuiYinSeatRecords struct {
	Seat uint32 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Bets int64  `protobuf:"varint,2,opt,name=bets,proto3" json:"bets,omitempty"`
	Wins int64  `protobuf:"varint,3,opt,name=wins,proto3" json:"wins,omitempty"`
}

func (m *HuiYinSeatRecords) Reset()                    { *m = HuiYinSeatRecords{} }
func (*HuiYinSeatRecords) ProtoMessage()               {}
func (*HuiYinSeatRecords) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{11} }

func (m *HuiYinSeatRecords) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *HuiYinSeatRecords) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *HuiYinSeatRecords) GetWins() int64 {
	if m != nil {
		return m.Wins
	}
	return 0
}

// 房间玩家输赢记录数据
type HuiYinWinRecords struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Bets   int64  `protobuf:"varint,2,opt,name=bets,proto3" json:"bets,omitempty"`
	Wins   int64  `protobuf:"varint,3,opt,name=wins,proto3" json:"wins,omitempty"`
}

func (m *HuiYinWinRecords) Reset()                    { *m = HuiYinWinRecords{} }
func (*HuiYinWinRecords) ProtoMessage()               {}
func (*HuiYinWinRecords) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{12} }

func (m *HuiYinWinRecords) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *HuiYinWinRecords) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *HuiYinWinRecords) GetWins() int64 {
	if m != nil {
		return m.Wins
	}
	return 0
}

// 记录数据中玩家基本信息
type HuiYinUserRecords struct {
	Userid   string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Photo    string `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (m *HuiYinUserRecords) Reset()                    { *m = HuiYinUserRecords{} }
func (*HuiYinUserRecords) ProtoMessage()               {}
func (*HuiYinUserRecords) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{13} }

func (m *HuiYinUserRecords) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *HuiYinUserRecords) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *HuiYinUserRecords) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

// 房间基础数据
type HuiYinGameInfo struct {
	Roomid string `protobuf:"bytes,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Gtype  uint32 `protobuf:"varint,2,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Rtype  uint32 `protobuf:"varint,3,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Ltype  uint32 `protobuf:"varint,4,opt,name=ltype,proto3" json:"ltype,omitempty"`
	Rname  string `protobuf:"bytes,5,opt,name=rname,proto3" json:"rname,omitempty"`
	Count  uint32 `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	Ante   uint32 `protobuf:"varint,7,opt,name=ante,proto3" json:"ante,omitempty"`
	Cost   uint32 `protobuf:"varint,8,opt,name=cost,proto3" json:"cost,omitempty"`
	Vip    uint32 `protobuf:"varint,9,opt,name=vip,proto3" json:"vip,omitempty"`
	Chip   uint32 `protobuf:"varint,10,opt,name=chip,proto3" json:"chip,omitempty"`
	Deal   bool   `protobuf:"varint,11,opt,name=deal,proto3" json:"deal,omitempty"`
	Carry  uint32 `protobuf:"varint,12,opt,name=carry,proto3" json:"carry,omitempty"`
	Down   uint32 `protobuf:"varint,13,opt,name=down,proto3" json:"down,omitempty"`
	Top    uint32 `protobuf:"varint,14,opt,name=top,proto3" json:"top,omitempty"`
	Sit    uint32 `protobuf:"varint,15,opt,name=sit,proto3" json:"sit,omitempty"`
}

func (m *HuiYinGameInfo) Reset()                    { *m = HuiYinGameInfo{} }
func (*HuiYinGameInfo) ProtoMessage()               {}
func (*HuiYinGameInfo) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{14} }

func (m *HuiYinGameInfo) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *HuiYinGameInfo) GetGtype() uint32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *HuiYinGameInfo) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *HuiYinGameInfo) GetLtype() uint32 {
	if m != nil {
		return m.Ltype
	}
	return 0
}

func (m *HuiYinGameInfo) GetRname() string {
	if m != nil {
		return m.Rname
	}
	return ""
}

func (m *HuiYinGameInfo) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *HuiYinGameInfo) GetAnte() uint32 {
	if m != nil {
		return m.Ante
	}
	return 0
}

func (m *HuiYinGameInfo) GetCost() uint32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *HuiYinGameInfo) GetVip() uint32 {
	if m != nil {
		return m.Vip
	}
	return 0
}

func (m *HuiYinGameInfo) GetChip() uint32 {
	if m != nil {
		return m.Chip
	}
	return 0
}

func (m *HuiYinGameInfo) GetDeal() bool {
	if m != nil {
		return m.Deal
	}
	return false
}

func (m *HuiYinGameInfo) GetCarry() uint32 {
	if m != nil {
		return m.Carry
	}
	return 0
}

func (m *HuiYinGameInfo) GetDown() uint32 {
	if m != nil {
		return m.Down
	}
	return 0
}

func (m *HuiYinGameInfo) GetTop() uint32 {
	if m != nil {
		return m.Top
	}
	return 0
}

func (m *HuiYinGameInfo) GetSit() uint32 {
	if m != nil {
		return m.Sit
	}
	return 0
}

// 上局赢家
type LastWins struct {
	Userid   string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Photo    string `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Chip     int64  `protobuf:"varint,4,opt,name=chip,proto3" json:"chip,omitempty"`
	Dealer   bool   `protobuf:"varint,5,opt,name=dealer,proto3" json:"dealer,omitempty"`
}

func (m *LastWins) Reset()                    { *m = LastWins{} }
func (*LastWins) ProtoMessage()               {}
func (*LastWins) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{15} }

func (m *LastWins) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LastWins) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *LastWins) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *LastWins) GetChip() int64 {
	if m != nil {
		return m.Chip
	}
	return 0
}

func (m *LastWins) GetDealer() bool {
	if m != nil {
		return m.Dealer
	}
	return false
}

// 房间趋势
type HuiYinTrend struct {
	Info []*TrendInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *HuiYinTrend) Reset()                    { *m = HuiYinTrend{} }
func (*HuiYinTrend) ProtoMessage()               {}
func (*HuiYinTrend) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{16} }

func (m *HuiYinTrend) GetInfo() []*TrendInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 趋势
type TrendInfo struct {
	Rank uint32 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Seat uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
}

func (m *TrendInfo) Reset()                    { *m = TrendInfo{} }
func (*TrendInfo) ProtoMessage()               {}
func (*TrendInfo) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{17} }

func (m *TrendInfo) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *TrendInfo) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

// 房间开奖结果
type RoomOpenResult struct {
	Expect   string        `protobuf:"bytes,1,opt,name=expect,proto3" json:"expect,omitempty"`
	Opencode string        `protobuf:"bytes,2,opt,name=opencode,proto3" json:"opencode,omitempty"`
	Opentime string        `protobuf:"bytes,3,opt,name=opentime,proto3" json:"opentime,omitempty"`
	Info     []*OpenResult `protobuf:"bytes,4,rep,name=info" json:"info,omitempty"`
}

func (m *RoomOpenResult) Reset()                    { *m = RoomOpenResult{} }
func (*RoomOpenResult) ProtoMessage()               {}
func (*RoomOpenResult) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{18} }

func (m *RoomOpenResult) GetExpect() string {
	if m != nil {
		return m.Expect
	}
	return ""
}

func (m *RoomOpenResult) GetOpencode() string {
	if m != nil {
		return m.Opencode
	}
	return ""
}

func (m *RoomOpenResult) GetOpentime() string {
	if m != nil {
		return m.Opentime
	}
	return ""
}

func (m *RoomOpenResult) GetInfo() []*OpenResult {
	if m != nil {
		return m.Info
	}
	return nil
}

// 开牌结果
type OpenResult struct {
	Rank  uint32   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Seat  uint32   `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Point uint32   `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	Cards []uint32 `protobuf:"varint,4,rep,packed,name=cards" json:"cards,omitempty"`
}

func (m *OpenResult) Reset()                    { *m = OpenResult{} }
func (*OpenResult) ProtoMessage()               {}
func (*OpenResult) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{19} }

func (m *OpenResult) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *OpenResult) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *OpenResult) GetPoint() uint32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *OpenResult) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 位置下注信息
type BetInfo struct {
	Userid   string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Photo    string `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Bets     int64  `protobuf:"varint,4,opt,name=bets,proto3" json:"bets,omitempty"`
}

func (m *BetInfo) Reset()                    { *m = BetInfo{} }
func (*BetInfo) ProtoMessage()               {}
func (*BetInfo) Descriptor() ([]byte, []int) { return fileDescriptorPubHuiyin, []int{20} }

func (m *BetInfo) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *BetInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *BetInfo) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *BetInfo) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func init() {
	proto.RegisterType((*HuiYinRoomInfo)(nil), "pb.HuiYinRoomInfo")
	proto.RegisterType((*HuiYinRoom)(nil), "pb.HuiYinRoom")
	proto.RegisterType((*HuiYinGame)(nil), "pb.HuiYinGame")
	proto.RegisterType((*HuiYinRoomBets)(nil), "pb.HuiYinRoomBets")
	proto.RegisterType((*HuiYinRoomCards)(nil), "pb.HuiYinRoomCards")
	proto.RegisterType((*Pk10Record)(nil), "pb.Pk10Record")
	proto.RegisterType((*HuiYinSeatOver)(nil), "pb.HuiYinSeatOver")
	proto.RegisterType((*HuiYinRoomWins)(nil), "pb.HuiYinRoomWins")
	proto.RegisterType((*HuiYinRoomOver)(nil), "pb.HuiYinRoomOver")
	proto.RegisterType((*HuiYinDealerList)(nil), "pb.HuiYinDealerList")
	proto.RegisterType((*HuiYinRecords)(nil), "pb.HuiYinRecords")
	proto.RegisterType((*HuiYinSeatRecords)(nil), "pb.HuiYinSeatRecords")
	proto.RegisterType((*HuiYinWinRecords)(nil), "pb.HuiYinWinRecords")
	proto.RegisterType((*HuiYinUserRecords)(nil), "pb.HuiYinUserRecords")
	proto.RegisterType((*HuiYinGameInfo)(nil), "pb.HuiYinGameInfo")
	proto.RegisterType((*LastWins)(nil), "pb.LastWins")
	proto.RegisterType((*HuiYinTrend)(nil), "pb.HuiYinTrend")
	proto.RegisterType((*TrendInfo)(nil), "pb.TrendInfo")
	proto.RegisterType((*RoomOpenResult)(nil), "pb.RoomOpenResult")
	proto.RegisterType((*OpenResult)(nil), "pb.OpenResult")
	proto.RegisterType((*BetInfo)(nil), "pb.BetInfo")
}
func (this *HuiYinRoomInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinRoomInfo)
	if !ok {
		that2, ok := that.(HuiYinRoomInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Timer != that1.Timer {
		return false
	}
	if this.Expect != that1.Expect {
		return false
	}
	if this.Opencode != that1.Opencode {
		return false
	}
	if len(this.Points) != len(that1.Points) {
		return false
	}
	for i := range this.Points {
		if this.Points[i] != that1.Points[i] {
			return false
		}
	}
	return true
}
func (this *HuiYinRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinRoom)
	if !ok {
		that2, ok := that.(HuiYinRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *HuiYinGame) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinGame)
	if !ok {
		that2, ok := that.(HuiYinGame)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Timer != that1.Timer {
		return false
	}
	if this.Left != that1.Left {
		return false
	}
	return true
}
func (this *HuiYinRoomBets) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinRoomBets)
	if !ok {
		that2, ok := that.(HuiYinRoomBets)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	return true
}
func (this *HuiYinRoomCards) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinRoomCards)
	if !ok {
		that2, ok := that.(HuiYinRoomCards)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	if this.Point != that1.Point {
		return false
	}
	return true
}
func (this *Pk10Record) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pk10Record)
	if !ok {
		that2, ok := that.(Pk10Record)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Expect != that1.Expect {
		return false
	}
	if this.Opencode != that1.Opencode {
		return false
	}
	if this.Opentime != that1.Opentime {
		return false
	}
	return true
}
func (this *HuiYinSeatOver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinSeatOver)
	if !ok {
		that2, ok := that.(HuiYinSeatOver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	if this.Point != that1.Point {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if this.WinNum != that1.WinNum {
		return false
	}
	if this.Refund != that1.Refund {
		return false
	}
	if this.Cost != that1.Cost {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	return true
}
func (this *HuiYinRoomWins) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinRoomWins)
	if !ok {
		that2, ok := that.(HuiYinRoomWins)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Wins != that1.Wins {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if this.Refund != that1.Refund {
		return false
	}
	return true
}
func (this *HuiYinRoomOver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinRoomOver)
	if !ok {
		that2, ok := that.(HuiYinRoomOver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if this.Cost != that1.Cost {
		return false
	}
	if this.Wins != that1.Wins {
		return false
	}
	if this.Refund != that1.Refund {
		return false
	}
	return true
}
func (this *HuiYinDealerList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinDealerList)
	if !ok {
		that2, ok := that.(HuiYinDealerList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Chip != that1.Chip {
		return false
	}
	return true
}
func (this *HuiYinRecords) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinRecords)
	if !ok {
		that2, ok := that.(HuiYinRecords)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Rest != that1.Rest {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Expect != that1.Expect {
		return false
	}
	if this.Opencode != that1.Opencode {
		return false
	}
	if this.Opentime != that1.Opentime {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if !this.Cards[i].Equal(that1.Cards[i]) {
			return false
		}
	}
	if len(this.Selfinfo) != len(that1.Selfinfo) {
		return false
	}
	for i := range this.Selfinfo {
		if !this.Selfinfo[i].Equal(that1.Selfinfo[i]) {
			return false
		}
	}
	if len(this.Result) != len(that1.Result) {
		return false
	}
	for i := range this.Result {
		if !this.Result[i].Equal(that1.Result[i]) {
			return false
		}
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Dealerseat != that1.Dealerseat {
		return false
	}
	return true
}
func (this *HuiYinSeatRecords) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinSeatRecords)
	if !ok {
		that2, ok := that.(HuiYinSeatRecords)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if this.Wins != that1.Wins {
		return false
	}
	return true
}
func (this *HuiYinWinRecords) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinWinRecords)
	if !ok {
		that2, ok := that.(HuiYinWinRecords)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if this.Wins != that1.Wins {
		return false
	}
	return true
}
func (this *HuiYinUserRecords) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinUserRecords)
	if !ok {
		that2, ok := that.(HuiYinUserRecords)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	return true
}
func (this *HuiYinGameInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinGameInfo)
	if !ok {
		that2, ok := that.(HuiYinGameInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Ltype != that1.Ltype {
		return false
	}
	if this.Rname != that1.Rname {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Ante != that1.Ante {
		return false
	}
	if this.Cost != that1.Cost {
		return false
	}
	if this.Vip != that1.Vip {
		return false
	}
	if this.Chip != that1.Chip {
		return false
	}
	if this.Deal != that1.Deal {
		return false
	}
	if this.Carry != that1.Carry {
		return false
	}
	if this.Down != that1.Down {
		return false
	}
	if this.Top != that1.Top {
		return false
	}
	if this.Sit != that1.Sit {
		return false
	}
	return true
}
func (this *LastWins) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LastWins)
	if !ok {
		that2, ok := that.(LastWins)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Chip != that1.Chip {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	return true
}
func (this *HuiYinTrend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HuiYinTrend)
	if !ok {
		that2, ok := that.(HuiYinTrend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Info) != len(that1.Info) {
		return false
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return false
		}
	}
	return true
}
func (this *TrendInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrendInfo)
	if !ok {
		that2, ok := that.(TrendInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	return true
}
func (this *RoomOpenResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoomOpenResult)
	if !ok {
		that2, ok := that.(RoomOpenResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Expect != that1.Expect {
		return false
	}
	if this.Opencode != that1.Opencode {
		return false
	}
	if this.Opentime != that1.Opentime {
		return false
	}
	if len(this.Info) != len(that1.Info) {
		return false
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return false
		}
	}
	return true
}
func (this *OpenResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenResult)
	if !ok {
		that2, ok := that.(OpenResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Point != that1.Point {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	return true
}
func (this *BetInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BetInfo)
	if !ok {
		that2, ok := that.(BetInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	return true
}
func (this *HuiYinRoomInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.HuiYinRoomInfo{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Timer: "+fmt.Sprintf("%#v", this.Timer)+",\n")
	s = append(s, "Expect: "+fmt.Sprintf("%#v", this.Expect)+",\n")
	s = append(s, "Opencode: "+fmt.Sprintf("%#v", this.Opencode)+",\n")
	s = append(s, "Points: "+fmt.Sprintf("%#v", this.Points)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HuiYinRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.HuiYinRoom{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HuiYinGame) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.HuiYinGame{")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Timer: "+fmt.Sprintf("%#v", this.Timer)+",\n")
	s = append(s, "Left: "+fmt.Sprintf("%#v", this.Left)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HuiYinRoomBets) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.HuiYinRoomBets{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HuiYinRoomCards) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.HuiYinRoomCards{")
	s = append(s, "Rank: "+fmt.Sprintf("%#v", this.Rank)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "Point: "+fmt.Sprintf("%#v", this.Point)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pk10Record) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.Pk10Record{")
	s = append(s, "Expect: "+fmt.Sprintf("%#v", this.Expect)+",\n")
	s = append(s, "Opencode: "+fmt.Sprintf("%#v", this.Opencode)+",\n")
	s = append(s, "Opentime: "+fmt.Sprintf("%#v", this.Opentime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HuiYinSeatOver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.HuiYinSeatOver{")
	s = append(s, "Rank: "+fmt.Sprintf("%#v", this.Rank)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "Point: "+fmt.Sprintf("%#v", this.Point)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "WinNum: "+fmt.Sprintf("%#v", this.WinNum)+",\n")
	s = append(s, "Refund: "+fmt.Sprintf("%#v", this.Refund)+",\n")
	s = append(s, "Cost: "+fmt.Sprintf("%#v", this.Cost)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HuiYinRoomWins) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.HuiYinRoomWins{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Wins: "+fmt.Sprintf("%#v", this.Wins)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "Refund: "+fmt.Sprintf("%#v", this.Refund)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HuiYinRoomOver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.HuiYinRoomOver{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "Cost: "+fmt.Sprintf("%#v", this.Cost)+",\n")
	s = append(s, "Wins: "+fmt.Sprintf("%#v", this.Wins)+",\n")
	s = append(s, "Refund: "+fmt.Sprintf("%#v", this.Refund)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HuiYinDealerList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.HuiYinDealerList{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Chip: "+fmt.Sprintf("%#v", this.Chip)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HuiYinRecords) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&pb.HuiYinRecords{")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Rest: "+fmt.Sprintf("%#v", this.Rest)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Expect: "+fmt.Sprintf("%#v", this.Expect)+",\n")
	s = append(s, "Opencode: "+fmt.Sprintf("%#v", this.Opencode)+",\n")
	s = append(s, "Opentime: "+fmt.Sprintf("%#v", this.Opentime)+",\n")
	if this.Cards != nil {
		s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	}
	if this.Selfinfo != nil {
		s = append(s, "Selfinfo: "+fmt.Sprintf("%#v", this.Selfinfo)+",\n")
	}
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Dealerseat: "+fmt.Sprintf("%#v", this.Dealerseat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HuiYinSeatRecords) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.HuiYinSeatRecords{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "Wins: "+fmt.Sprintf("%#v", this.Wins)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HuiYinWinRecords) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.HuiYinWinRecords{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "Wins: "+fmt.Sprintf("%#v", this.Wins)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HuiYinUserRecords) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.HuiYinUserRecords{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HuiYinGameInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&pb.HuiYinGameInfo{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Ltype: "+fmt.Sprintf("%#v", this.Ltype)+",\n")
	s = append(s, "Rname: "+fmt.Sprintf("%#v", this.Rname)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Ante: "+fmt.Sprintf("%#v", this.Ante)+",\n")
	s = append(s, "Cost: "+fmt.Sprintf("%#v", this.Cost)+",\n")
	s = append(s, "Vip: "+fmt.Sprintf("%#v", this.Vip)+",\n")
	s = append(s, "Chip: "+fmt.Sprintf("%#v", this.Chip)+",\n")
	s = append(s, "Deal: "+fmt.Sprintf("%#v", this.Deal)+",\n")
	s = append(s, "Carry: "+fmt.Sprintf("%#v", this.Carry)+",\n")
	s = append(s, "Down: "+fmt.Sprintf("%#v", this.Down)+",\n")
	s = append(s, "Top: "+fmt.Sprintf("%#v", this.Top)+",\n")
	s = append(s, "Sit: "+fmt.Sprintf("%#v", this.Sit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LastWins) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.LastWins{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Chip: "+fmt.Sprintf("%#v", this.Chip)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HuiYinTrend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.HuiYinTrend{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TrendInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.TrendInfo{")
	s = append(s, "Rank: "+fmt.Sprintf("%#v", this.Rank)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoomOpenResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.RoomOpenResult{")
	s = append(s, "Expect: "+fmt.Sprintf("%#v", this.Expect)+",\n")
	s = append(s, "Opencode: "+fmt.Sprintf("%#v", this.Opencode)+",\n")
	s = append(s, "Opentime: "+fmt.Sprintf("%#v", this.Opentime)+",\n")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.OpenResult{")
	s = append(s, "Rank: "+fmt.Sprintf("%#v", this.Rank)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Point: "+fmt.Sprintf("%#v", this.Point)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BetInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.BetInfo{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPubHuiyin(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HuiYinRoomInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinRoomInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Info.Size()))
		n1, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Num))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.State))
	}
	if m.Timer != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Timer))
	}
	if len(m.Expect) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Expect)))
		i += copy(dAtA[i:], m.Expect)
	}
	if len(m.Opencode) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Opencode)))
		i += copy(dAtA[i:], m.Opencode)
	}
	if len(m.Points) > 0 {
		dAtA3 := make([]byte, len(m.Points)*10)
		var j2 int
		for _, num := range m.Points {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *HuiYinRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Info.Size()))
		n4, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *HuiYinGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Gtype))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.State))
	}
	if m.Timer != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Timer))
	}
	if m.Left != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Left))
	}
	return i, nil
}

func (m *HuiYinRoomBets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinRoomBets) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Seat))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Bets))
	}
	return i, nil
}

func (m *HuiYinRoomCards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinRoomCards) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Rank))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Seat))
	}
	if len(m.Cards) > 0 {
		dAtA6 := make([]byte, len(m.Cards)*10)
		var j5 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.Point != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Point))
	}
	return i, nil
}

func (m *Pk10Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pk10Record) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Expect) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Expect)))
		i += copy(dAtA[i:], m.Expect)
	}
	if len(m.Opencode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Opencode)))
		i += copy(dAtA[i:], m.Opencode)
	}
	if len(m.Opentime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Opentime)))
		i += copy(dAtA[i:], m.Opentime)
	}
	return i, nil
}

func (m *HuiYinSeatOver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinSeatOver) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Rank))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Seat))
	}
	if len(m.Cards) > 0 {
		dAtA8 := make([]byte, len(m.Cards)*10)
		var j7 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if m.Point != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Point))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Bets))
	}
	if m.WinNum != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.WinNum))
	}
	if m.Refund != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Refund))
	}
	if m.Cost != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Cost))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintPubHuiyin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HuiYinRoomWins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinRoomWins) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Seat))
	}
	if m.Wins != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Wins))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Bets))
	}
	if m.Refund != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Refund))
	}
	return i, nil
}

func (m *HuiYinRoomOver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinRoomOver) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Seat))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Bets))
	}
	if m.Cost != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Cost))
	}
	if m.Wins != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Wins))
	}
	if m.Refund != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Refund))
	}
	return i, nil
}

func (m *HuiYinDealerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinDealerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Chip != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Chip))
	}
	return i, nil
}

func (m *HuiYinRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinRecords) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Rtype))
	}
	if m.Rest != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Rest))
	}
	if m.Num != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Num))
	}
	if len(m.Expect) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Expect)))
		i += copy(dAtA[i:], m.Expect)
	}
	if len(m.Opencode) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Opencode)))
		i += copy(dAtA[i:], m.Opencode)
	}
	if len(m.Opentime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Opentime)))
		i += copy(dAtA[i:], m.Opentime)
	}
	if len(m.Cards) > 0 {
		for _, msg := range m.Cards {
			dAtA[i] = 0x42
			i++
			i = encodeVarintPubHuiyin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Selfinfo) > 0 {
		for _, msg := range m.Selfinfo {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintPubHuiyin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Result) > 0 {
		for _, msg := range m.Result {
			dAtA[i] = 0x52
			i++
			i = encodeVarintPubHuiyin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if m.Dealerseat != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Dealerseat))
	}
	return i, nil
}

func (m *HuiYinSeatRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinSeatRecords) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Seat))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Bets))
	}
	if m.Wins != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Wins))
	}
	return i, nil
}

func (m *HuiYinWinRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinWinRecords) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Bets != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Bets))
	}
	if m.Wins != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Wins))
	}
	return i, nil
}

func (m *HuiYinUserRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinUserRecords) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	return i, nil
}

func (m *HuiYinGameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinGameInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Rtype))
	}
	if m.Ltype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Ltype))
	}
	if len(m.Rname) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Rname)))
		i += copy(dAtA[i:], m.Rname)
	}
	if m.Count != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Count))
	}
	if m.Ante != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Ante))
	}
	if m.Cost != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Cost))
	}
	if m.Vip != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Vip))
	}
	if m.Chip != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Chip))
	}
	if m.Deal {
		dAtA[i] = 0x58
		i++
		if m.Deal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Carry != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Carry))
	}
	if m.Down != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Down))
	}
	if m.Top != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Top))
	}
	if m.Sit != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Sit))
	}
	return i, nil
}

func (m *LastWins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastWins) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Chip != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Chip))
	}
	if m.Dealer {
		dAtA[i] = 0x28
		i++
		if m.Dealer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *HuiYinTrend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuiYinTrend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPubHuiyin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TrendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrendInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Rank))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Seat))
	}
	return i, nil
}

func (m *RoomOpenResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomOpenResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Expect) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Expect)))
		i += copy(dAtA[i:], m.Expect)
	}
	if len(m.Opencode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Opencode)))
		i += copy(dAtA[i:], m.Opencode)
	}
	if len(m.Opentime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Opentime)))
		i += copy(dAtA[i:], m.Opentime)
	}
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPubHuiyin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OpenResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Rank))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Seat))
	}
	if m.Point != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Point))
	}
	if len(m.Cards) > 0 {
		dAtA10 := make([]byte, len(m.Cards)*10)
		var j9 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func (m *BetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Bets != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubHuiyin(dAtA, i, uint64(m.Bets))
	}
	return i, nil
}

func encodeVarintPubHuiyin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HuiYinRoomInfo) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Num))
	}
	if m.State != 0 {
		n += 1 + sovPubHuiyin(uint64(m.State))
	}
	if m.Timer != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Timer))
	}
	l = len(m.Expect)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	l = len(m.Opencode)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	if len(m.Points) > 0 {
		l = 0
		for _, e := range m.Points {
			l += sovPubHuiyin(uint64(e))
		}
		n += 1 + sovPubHuiyin(uint64(l)) + l
	}
	return n
}

func (m *HuiYinRoom) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Num))
	}
	return n
}

func (m *HuiYinGame) Size() (n int) {
	var l int
	_ = l
	if m.Gtype != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Gtype))
	}
	if m.State != 0 {
		n += 1 + sovPubHuiyin(uint64(m.State))
	}
	if m.Timer != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Timer))
	}
	if m.Left != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Left))
	}
	return n
}

func (m *HuiYinRoomBets) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Seat))
	}
	if m.Bets != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Bets))
	}
	return n
}

func (m *HuiYinRoomCards) Size() (n int) {
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Rank))
	}
	if m.Seat != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Seat))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovPubHuiyin(uint64(e))
		}
		n += 1 + sovPubHuiyin(uint64(l)) + l
	}
	if m.Point != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Point))
	}
	return n
}

func (m *Pk10Record) Size() (n int) {
	var l int
	_ = l
	l = len(m.Expect)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	l = len(m.Opencode)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	l = len(m.Opentime)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	return n
}

func (m *HuiYinSeatOver) Size() (n int) {
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Rank))
	}
	if m.Seat != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Seat))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovPubHuiyin(uint64(e))
		}
		n += 1 + sovPubHuiyin(uint64(l)) + l
	}
	if m.Point != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Point))
	}
	if m.Bets != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Bets))
	}
	if m.WinNum != 0 {
		n += 1 + sovPubHuiyin(uint64(m.WinNum))
	}
	if m.Refund != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Refund))
	}
	if m.Cost != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Cost))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovPubHuiyin(uint64(l))
		}
	}
	return n
}

func (m *HuiYinRoomWins) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	if m.Seat != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Seat))
	}
	if m.Wins != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Wins))
	}
	if m.Bets != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Bets))
	}
	if m.Refund != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Refund))
	}
	return n
}

func (m *HuiYinRoomOver) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	if m.Seat != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Seat))
	}
	if m.Bets != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Bets))
	}
	if m.Cost != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Cost))
	}
	if m.Wins != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Wins))
	}
	if m.Refund != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Refund))
	}
	return n
}

func (m *HuiYinDealerList) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	if m.Chip != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Chip))
	}
	return n
}

func (m *HuiYinRecords) Size() (n int) {
	var l int
	_ = l
	if m.Gtype != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Rtype))
	}
	if m.Rest != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Rest))
	}
	if m.Num != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Num))
	}
	l = len(m.Expect)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	l = len(m.Opencode)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	l = len(m.Opentime)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovPubHuiyin(uint64(l))
		}
	}
	if len(m.Selfinfo) > 0 {
		for _, e := range m.Selfinfo {
			l = e.Size()
			n += 1 + l + sovPubHuiyin(uint64(l))
		}
	}
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovPubHuiyin(uint64(l))
		}
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	if m.Dealerseat != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Dealerseat))
	}
	return n
}

func (m *HuiYinSeatRecords) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Seat))
	}
	if m.Bets != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Bets))
	}
	if m.Wins != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Wins))
	}
	return n
}

func (m *HuiYinWinRecords) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	if m.Bets != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Bets))
	}
	if m.Wins != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Wins))
	}
	return n
}

func (m *HuiYinUserRecords) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	return n
}

func (m *HuiYinGameInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	if m.Gtype != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Rtype))
	}
	if m.Ltype != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Ltype))
	}
	l = len(m.Rname)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Count))
	}
	if m.Ante != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Ante))
	}
	if m.Cost != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Cost))
	}
	if m.Vip != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Vip))
	}
	if m.Chip != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Chip))
	}
	if m.Deal {
		n += 2
	}
	if m.Carry != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Carry))
	}
	if m.Down != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Down))
	}
	if m.Top != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Top))
	}
	if m.Sit != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Sit))
	}
	return n
}

func (m *LastWins) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	if m.Chip != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Chip))
	}
	if m.Dealer {
		n += 2
	}
	return n
}

func (m *HuiYinTrend) Size() (n int) {
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovPubHuiyin(uint64(l))
		}
	}
	return n
}

func (m *TrendInfo) Size() (n int) {
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Rank))
	}
	if m.Seat != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Seat))
	}
	return n
}

func (m *RoomOpenResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Expect)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	l = len(m.Opencode)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	l = len(m.Opentime)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovPubHuiyin(uint64(l))
		}
	}
	return n
}

func (m *OpenResult) Size() (n int) {
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Rank))
	}
	if m.Seat != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Seat))
	}
	if m.Point != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Point))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovPubHuiyin(uint64(e))
		}
		n += 1 + sovPubHuiyin(uint64(l)) + l
	}
	return n
}

func (m *BetInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovPubHuiyin(uint64(l))
	}
	if m.Bets != 0 {
		n += 1 + sovPubHuiyin(uint64(m.Bets))
	}
	return n
}

func sovPubHuiyin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPubHuiyin(x uint64) (n int) {
	return sovPubHuiyin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HuiYinRoomInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinRoomInfo{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "HuiYinGameInfo", "HuiYinGameInfo", 1) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Timer:` + fmt.Sprintf("%v", this.Timer) + `,`,
		`Expect:` + fmt.Sprintf("%v", this.Expect) + `,`,
		`Opencode:` + fmt.Sprintf("%v", this.Opencode) + `,`,
		`Points:` + fmt.Sprintf("%v", this.Points) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HuiYinRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinRoom{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "HuiYinGameInfo", "HuiYinGameInfo", 1) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HuiYinGame) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinGame{`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Timer:` + fmt.Sprintf("%v", this.Timer) + `,`,
		`Left:` + fmt.Sprintf("%v", this.Left) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HuiYinRoomBets) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinRoomBets{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HuiYinRoomCards) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinRoomCards{`,
		`Rank:` + fmt.Sprintf("%v", this.Rank) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`Point:` + fmt.Sprintf("%v", this.Point) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pk10Record) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pk10Record{`,
		`Expect:` + fmt.Sprintf("%v", this.Expect) + `,`,
		`Opencode:` + fmt.Sprintf("%v", this.Opencode) + `,`,
		`Opentime:` + fmt.Sprintf("%v", this.Opentime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HuiYinSeatOver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinSeatOver{`,
		`Rank:` + fmt.Sprintf("%v", this.Rank) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`Point:` + fmt.Sprintf("%v", this.Point) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`WinNum:` + fmt.Sprintf("%v", this.WinNum) + `,`,
		`Refund:` + fmt.Sprintf("%v", this.Refund) + `,`,
		`Cost:` + fmt.Sprintf("%v", this.Cost) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "HuiYinRoomWins", "HuiYinRoomWins", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HuiYinRoomWins) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinRoomWins{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Wins:` + fmt.Sprintf("%v", this.Wins) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`Refund:` + fmt.Sprintf("%v", this.Refund) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HuiYinRoomOver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinRoomOver{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`Cost:` + fmt.Sprintf("%v", this.Cost) + `,`,
		`Wins:` + fmt.Sprintf("%v", this.Wins) + `,`,
		`Refund:` + fmt.Sprintf("%v", this.Refund) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HuiYinDealerList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinDealerList{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Chip:` + fmt.Sprintf("%v", this.Chip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HuiYinRecords) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinRecords{`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Rest:` + fmt.Sprintf("%v", this.Rest) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Expect:` + fmt.Sprintf("%v", this.Expect) + `,`,
		`Opencode:` + fmt.Sprintf("%v", this.Opencode) + `,`,
		`Opentime:` + fmt.Sprintf("%v", this.Opentime) + `,`,
		`Cards:` + strings.Replace(fmt.Sprintf("%v", this.Cards), "HuiYinRoomCards", "HuiYinRoomCards", 1) + `,`,
		`Selfinfo:` + strings.Replace(fmt.Sprintf("%v", this.Selfinfo), "HuiYinSeatRecords", "HuiYinSeatRecords", 1) + `,`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "HuiYinWinRecords", "HuiYinWinRecords", 1) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Dealerseat:` + fmt.Sprintf("%v", this.Dealerseat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HuiYinSeatRecords) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinSeatRecords{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`Wins:` + fmt.Sprintf("%v", this.Wins) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HuiYinWinRecords) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinWinRecords{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`Wins:` + fmt.Sprintf("%v", this.Wins) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HuiYinUserRecords) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinUserRecords{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HuiYinGameInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinGameInfo{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Ltype:` + fmt.Sprintf("%v", this.Ltype) + `,`,
		`Rname:` + fmt.Sprintf("%v", this.Rname) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Ante:` + fmt.Sprintf("%v", this.Ante) + `,`,
		`Cost:` + fmt.Sprintf("%v", this.Cost) + `,`,
		`Vip:` + fmt.Sprintf("%v", this.Vip) + `,`,
		`Chip:` + fmt.Sprintf("%v", this.Chip) + `,`,
		`Deal:` + fmt.Sprintf("%v", this.Deal) + `,`,
		`Carry:` + fmt.Sprintf("%v", this.Carry) + `,`,
		`Down:` + fmt.Sprintf("%v", this.Down) + `,`,
		`Top:` + fmt.Sprintf("%v", this.Top) + `,`,
		`Sit:` + fmt.Sprintf("%v", this.Sit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LastWins) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LastWins{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Chip:` + fmt.Sprintf("%v", this.Chip) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HuiYinTrend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HuiYinTrend{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "TrendInfo", "TrendInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrendInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrendInfo{`,
		`Rank:` + fmt.Sprintf("%v", this.Rank) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoomOpenResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoomOpenResult{`,
		`Expect:` + fmt.Sprintf("%v", this.Expect) + `,`,
		`Opencode:` + fmt.Sprintf("%v", this.Opencode) + `,`,
		`Opentime:` + fmt.Sprintf("%v", this.Opentime) + `,`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "OpenResult", "OpenResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenResult{`,
		`Rank:` + fmt.Sprintf("%v", this.Rank) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Point:` + fmt.Sprintf("%v", this.Point) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BetInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BetInfo{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPubHuiyin(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HuiYinRoomInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinRoomInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinRoomInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &HuiYinGameInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timer", wireType)
			}
			m.Timer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timer |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opencode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opencode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPubHuiyin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Points = append(m.Points, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPubHuiyin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPubHuiyin
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPubHuiyin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Points = append(m.Points, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuiYinRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &HuiYinGameInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuiYinGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timer", wireType)
			}
			m.Timer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timer |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			m.Left = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Left |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuiYinRoomBets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinRoomBets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinRoomBets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuiYinRoomCards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinRoomCards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinRoomCards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPubHuiyin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPubHuiyin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPubHuiyin
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPubHuiyin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pk10Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pk10Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pk10Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opencode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opencode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opentime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opentime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuiYinSeatOver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinSeatOver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinSeatOver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPubHuiyin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPubHuiyin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPubHuiyin
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPubHuiyin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinNum", wireType)
			}
			m.WinNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refund", wireType)
			}
			m.Refund = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Refund |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &HuiYinRoomWins{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuiYinRoomWins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinRoomWins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinRoomWins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wins", wireType)
			}
			m.Wins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wins |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refund", wireType)
			}
			m.Refund = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Refund |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuiYinRoomOver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinRoomOver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinRoomOver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wins", wireType)
			}
			m.Wins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wins |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refund", wireType)
			}
			m.Refund = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Refund |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuiYinDealerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinDealerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinDealerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chip", wireType)
			}
			m.Chip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chip |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuiYinRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rest", wireType)
			}
			m.Rest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rest |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opencode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opencode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opentime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opentime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &HuiYinRoomCards{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selfinfo = append(m.Selfinfo, &HuiYinSeatRecords{})
			if err := m.Selfinfo[len(m.Selfinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &HuiYinWinRecords{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealerseat", wireType)
			}
			m.Dealerseat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dealerseat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuiYinSeatRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinSeatRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinSeatRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wins", wireType)
			}
			m.Wins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wins |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuiYinWinRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinWinRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinWinRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wins", wireType)
			}
			m.Wins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wins |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuiYinUserRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinUserRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinUserRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuiYinGameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinGameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinGameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltype", wireType)
			}
			m.Ltype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ltype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ante", wireType)
			}
			m.Ante = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ante |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			m.Vip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vip |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chip", wireType)
			}
			m.Chip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chip |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deal = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Carry", wireType)
			}
			m.Carry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Carry |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Down", wireType)
			}
			m.Down = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Down |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			m.Top = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Top |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sit", wireType)
			}
			m.Sit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastWins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastWins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastWins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chip", wireType)
			}
			m.Chip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chip |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dealer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuiYinTrend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuiYinTrend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuiYinTrend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &TrendInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomOpenResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomOpenResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomOpenResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opencode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opencode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opentime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opentime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &OpenResult{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPubHuiyin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPubHuiyin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPubHuiyin
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPubHuiyin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubHuiyin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubHuiyin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPubHuiyin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPubHuiyin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubHuiyin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPubHuiyin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPubHuiyin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPubHuiyin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPubHuiyin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPubHuiyin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pub_huiyin.proto", fileDescriptorPubHuiyin) }

var fileDescriptorPubHuiyin = []byte{
	// 969 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0x1c, 0x45,
	0x10, 0xf6, 0xec, 0xcc, 0xda, 0xeb, 0x32, 0xeb, 0x98, 0xc1, 0xa0, 0x51, 0x0e, 0xa3, 0xa5, 0x0f,
	0xc8, 0x48, 0x91, 0x95, 0x90, 0x0b, 0x67, 0x83, 0xf8, 0x91, 0x22, 0x82, 0x1a, 0x50, 0x84, 0x04,
	0x82, 0xd9, 0xdd, 0xde, 0x6c, 0xcb, 0xbb, 0xdd, 0xa3, 0xe9, 0x1e, 0x1b, 0x4b, 0x1c, 0x72, 0xe0,
	0x01, 0xf2, 0x18, 0x3c, 0x07, 0x07, 0xc4, 0x31, 0x47, 0x8e, 0x78, 0xe1, 0xc0, 0x31, 0x17, 0xee,
	0xa8, 0xaa, 0xbb, 0x67, 0x66, 0x83, 0x1d, 0xec, 0xc8, 0xb7, 0xfa, 0x6a, 0xfa, 0xe7, 0xab, 0xaa,
	0xaf, 0xaa, 0x07, 0xf6, 0xca, 0x7a, 0xfc, 0xdd, 0xbc, 0x96, 0x67, 0x52, 0x1d, 0x96, 0x95, 0xb6,
	0x3a, 0xed, 0x95, 0x63, 0xf6, 0x4b, 0x04, 0xbb, 0x9f, 0xd4, 0xf2, 0x6b, 0xa9, 0xb8, 0xd6, 0xcb,
	0x4f, 0xd5, 0x4c, 0xa7, 0xef, 0x40, 0x22, 0xd5, 0x4c, 0x67, 0xd1, 0x28, 0x3a, 0xd8, 0x79, 0x2f,
	0x3d, 0x2c, 0xc7, 0x87, 0x6e, 0xc5, 0xc7, 0xc5, 0x52, 0xe0, 0x0a, 0x4e, 0xdf, 0xd3, 0x3d, 0x88,
	0x55, 0xbd, 0xcc, 0x7a, 0xa3, 0xe8, 0x60, 0xc8, 0xd1, 0x4c, 0xf7, 0xa1, 0x6f, 0x6c, 0x61, 0x45,
	0x16, 0x93, 0xcf, 0x01, 0xf4, 0x5a, 0xb9, 0x14, 0x55, 0x96, 0x38, 0x2f, 0x81, 0xf4, 0x2d, 0xd8,
	0x14, 0x3f, 0x94, 0x62, 0x62, 0xb3, 0xfe, 0x28, 0x3a, 0xd8, 0xe6, 0x1e, 0xa5, 0xb7, 0x61, 0xa0,
	0x4b, 0xa1, 0x26, 0x7a, 0x2a, 0xb2, 0x4d, 0xfa, 0xd2, 0x60, 0xdc, 0x53, 0x6a, 0xa9, 0xac, 0xc9,
	0xb6, 0x46, 0xf1, 0xc1, 0x90, 0x7b, 0xc4, 0x3e, 0x02, 0x68, 0x63, 0x78, 0x75, 0xfe, 0x6c, 0x1c,
	0xce, 0xc1, 0x95, 0xc8, 0xfb, 0xb1, 0x3d, 0x2b, 0x05, 0x1d, 0x34, 0xe4, 0x0e, 0xb4, 0x31, 0xf6,
	0x2e, 0x8c, 0x11, 0x23, 0x8f, 0x43, 0x8c, 0x29, 0x24, 0x0b, 0x31, 0xb3, 0x14, 0x78, 0xcc, 0xc9,
	0x66, 0xef, 0x77, 0xf3, 0x7d, 0x24, 0xac, 0xc1, 0x55, 0x46, 0x14, 0xd6, 0x5f, 0x43, 0x36, 0xfa,
	0xc6, 0xc2, 0x1a, 0xba, 0x24, 0xe6, 0x64, 0x33, 0x01, 0xb7, 0xda, 0x9d, 0x1f, 0x14, 0xd5, 0x94,
	0xb6, 0x56, 0x85, 0x3a, 0x0e, 0x5b, 0xd1, 0x6e, 0x8e, 0xeb, 0x75, 0x8e, 0xdb, 0x87, 0xfe, 0x04,
	0x37, 0x64, 0x31, 0xe5, 0xcd, 0x01, 0xf4, 0x52, 0x02, 0x43, 0x61, 0x08, 0xb0, 0x6f, 0x00, 0x3e,
	0x3f, 0xbe, 0x77, 0x97, 0x8b, 0x89, 0xae, 0xa6, 0x9d, 0x32, 0x45, 0x97, 0x96, 0xa9, 0xf7, 0x42,
	0x99, 0xfc, 0x37, 0xcc, 0x01, 0xe5, 0xc3, 0x7f, 0x43, 0xcc, 0xfe, 0x6a, 0xf4, 0xf6, 0x85, 0x28,
	0xec, 0xc3, 0x13, 0x97, 0xa5, 0x9b, 0x0e, 0xa2, 0xc9, 0x5f, 0xbf, 0xcd, 0x1f, 0x86, 0x72, 0x2a,
	0xd5, 0x67, 0xf5, 0x92, 0x74, 0x15, 0x73, 0x8f, 0xd0, 0x5f, 0x89, 0x59, 0xad, 0xa6, 0xd9, 0x96,
	0xf3, 0x3b, 0x84, 0x67, 0x4c, 0xb4, 0xb1, 0xd9, 0xc0, 0x9d, 0x81, 0x36, 0x6a, 0x6b, 0x21, 0x8d,
	0xcd, 0xb6, 0x47, 0xf1, 0xba, 0xb6, 0xb0, 0x26, 0x8f, 0xa4, 0x32, 0x9c, 0xbe, 0xb3, 0x1f, 0xbb,
	0x55, 0x46, 0x3f, 0xde, 0x52, 0x1b, 0x51, 0xc9, 0x69, 0x48, 0xa4, 0x43, 0x17, 0x46, 0x9a, 0x42,
	0x72, 0x2a, 0x95, 0xf1, 0x62, 0x22, 0xbb, 0x89, 0x28, 0x59, 0x8f, 0xc8, 0x33, 0xef, 0x77, 0x99,
	0xb3, 0xa7, 0x6b, 0x4d, 0x4d, 0x49, 0xbe, 0xe6, 0xf5, 0x74, 0x55, 0xdc, 0xb9, 0x2a, 0x24, 0x23,
	0xe9, 0x24, 0x23, 0xd0, 0xec, 0x77, 0x68, 0xb6, 0x94, 0x36, 0xd7, 0x28, 0x95, 0xb0, 0xe7, 0x18,
	0x7d, 0x28, 0x8a, 0x85, 0xa8, 0x1e, 0x48, 0x63, 0x2f, 0xe5, 0x74, 0x1b, 0x06, 0x4a, 0x4e, 0x8e,
	0x55, 0xb1, 0x6c, 0xb4, 0x15, 0x30, 0x95, 0x7b, 0xae, 0xad, 0xf6, 0xc2, 0x72, 0x80, 0xd8, 0xcd,
	0x65, 0xd9, 0xb0, 0x9b, 0xcb, 0x92, 0xfd, 0xd3, 0x83, 0xa1, 0x4f, 0x02, 0x49, 0xd9, 0x5c, 0xde,
	0xd0, 0x15, 0x79, 0x7d, 0x43, 0x13, 0x20, 0x51, 0x0a, 0x63, 0x43, 0x0e, 0xd0, 0x0e, 0x03, 0x23,
	0x69, 0x07, 0xde, 0xab, 0x0c, 0xb1, 0x6e, 0x77, 0x6c, 0xad, 0x77, 0x47, 0xfa, 0x6e, 0x90, 0xf8,
	0x80, 0xf4, 0xf5, 0xc6, 0xba, 0xbe, 0xa8, 0xe7, 0x83, 0xee, 0xef, 0xc1, 0xc0, 0x88, 0xc5, 0x8c,
	0x26, 0x9d, 0x53, 0xe3, 0x9b, 0xed, 0x6a, 0xec, 0x2d, 0x1f, 0x35, 0x6f, 0x96, 0xa5, 0x77, 0xb0,
	0x36, 0xa6, 0x5e, 0xd8, 0x0c, 0x68, 0xc3, 0x7e, 0xbb, 0xe1, 0x51, 0x93, 0x25, 0xee, 0xd7, 0x60,
	0x6c, 0x53, 0xaa, 0x55, 0xb6, 0xe3, 0x62, 0x73, 0x28, 0xcd, 0x01, 0x9c, 0x45, 0xba, 0x79, 0x8d,
	0x92, 0xd1, 0xf1, 0xb0, 0x87, 0xf0, 0xfa, 0x7f, 0x48, 0x5c, 0x75, 0xc6, 0x5d, 0xa4, 0x7c, 0xc6,
	0x83, 0x74, 0x5a, 0x92, 0x2f, 0x93, 0xf3, 0x95, 0xce, 0xfc, 0x36, 0x90, 0xfc, 0xca, 0x88, 0xea,
	0xff, 0x0e, 0xbd, 0xb6, 0x1e, 0xd9, 0xaf, 0xbd, 0xd0, 0x80, 0xe1, 0xcd, 0xa1, 0xc6, 0xd0, 0x7a,
	0xd9, 0x1e, 0xee, 0x50, 0x2b, 0xca, 0xde, 0x85, 0xa2, 0x8c, 0xbb, 0xa2, 0xdc, 0x87, 0xfe, 0x82,
	0xbc, 0x7e, 0xd6, 0x2d, 0x9a, 0xb5, 0xc4, 0xcd, 0x69, 0xd0, 0x01, 0x9a, 0x96, 0xba, 0x56, 0x96,
	0xf4, 0x87, 0xd3, 0x12, 0x01, 0xe6, 0xa2, 0x50, 0xd6, 0x09, 0x6f, 0xc8, 0xc9, 0x5e, 0x9b, 0x73,
	0x43, 0xdf, 0xda, 0x7b, 0x10, 0x9f, 0xc8, 0x32, 0xdb, 0x76, 0x52, 0x3f, 0x91, 0x65, 0xd3, 0x62,
	0xe0, 0x57, 0xcd, 0x9d, 0x0f, 0x0b, 0x4f, 0x02, 0x19, 0x70, 0xb2, 0xfd, 0x94, 0xae, 0xce, 0xbc,
	0x32, 0x1c, 0xa0, 0x95, 0xfa, 0x54, 0x65, 0x43, 0xb7, 0x1b, 0x6d, 0xbc, 0xc3, 0xea, 0x32, 0xdb,
	0x75, 0x77, 0x58, 0x5d, 0xa2, 0xc7, 0x48, 0x9b, 0xdd, 0x72, 0x1e, 0x23, 0x2d, 0x7b, 0x12, 0xc1,
	0xe0, 0x41, 0x61, 0xec, 0x4b, 0x47, 0xe8, 0x8d, 0xcc, 0x8b, 0x8e, 0xde, 0xfb, 0x14, 0x8e, 0x47,
	0xec, 0x2e, 0xec, 0xb8, 0x52, 0x7e, 0x59, 0x09, 0x35, 0x4d, 0xdf, 0x6e, 0xfe, 0x2e, 0xb0, 0x85,
	0x86, 0xd8, 0x42, 0xf4, 0xa1, 0xfd, 0xb1, 0x60, 0xf7, 0x61, 0xbb, 0x71, 0x5d, 0xf5, 0x75, 0x63,
	0x3f, 0x45, 0xb0, 0x4b, 0xd3, 0xba, 0x14, 0x8a, 0x37, 0x1d, 0x78, 0x93, 0x6f, 0x6f, 0xca, 0x3c,
	0xf5, 0x84, 0xa8, 0xef, 0x22, 0xf5, 0xf6, 0x36, 0xcf, 0xfd, 0x7b, 0x80, 0x0e, 0x83, 0x6b, 0x3c,
	0xcd, 0xee, 0x11, 0x8e, 0xbb, 0x8f, 0x70, 0xf3, 0x60, 0x27, 0x9d, 0x07, 0x9b, 0x3d, 0x86, 0xad,
	0x23, 0x61, 0x43, 0x4f, 0xdc, 0x5c, 0x41, 0x5f, 0x7c, 0x1d, 0x8f, 0xee, 0x3c, 0x3b, 0xcf, 0x37,
	0x7e, 0x3f, 0xcf, 0x37, 0x9e, 0x9f, 0xe7, 0xd1, 0x93, 0x55, 0x1e, 0xfd, 0xbc, 0xca, 0xa3, 0xdf,
	0x56, 0x79, 0xf4, 0x6c, 0x95, 0x47, 0x7f, 0xac, 0xf2, 0xe8, 0xef, 0x55, 0xbe, 0xf1, 0x7c, 0x95,
	0x47, 0x4f, 0xff, 0xcc, 0x37, 0xc6, 0x9b, 0xf4, 0x4f, 0x7c, 0xff, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x7b, 0xd6, 0xdd, 0xb3, 0x27, 0x0b, 0x00, 0x00,
}
