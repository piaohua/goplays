// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: huiyin_room.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 进入房间
type CHuiYinEnterRoom struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Roomid string `protobuf:"bytes,2,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Gtype  uint32 `protobuf:"varint,3,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Rtype  uint32 `protobuf:"varint,4,opt,name=rtype,proto3" json:"rtype,omitempty"`
}

func (m *CHuiYinEnterRoom) Reset()                    { *m = CHuiYinEnterRoom{} }
func (*CHuiYinEnterRoom) ProtoMessage()               {}
func (*CHuiYinEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{0} }

func (m *CHuiYinEnterRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CHuiYinEnterRoom) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *CHuiYinEnterRoom) GetGtype() uint32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *CHuiYinEnterRoom) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

type SHuiYinEnterRoom struct {
	Code       uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Roominfo   *HuiYinRoomInfo    `protobuf:"bytes,2,opt,name=roominfo" json:"roominfo,omitempty"`
	Seatbets   []*HuiYinRoomBets  `protobuf:"bytes,3,rep,name=seatbets" json:"seatbets,omitempty"`
	Rolebets   []*HuiYinRoomBets  `protobuf:"bytes,4,rep,name=rolebets" json:"rolebets,omitempty"`
	Userinfo   []*RoomUser        `protobuf:"bytes,5,rep,name=userinfo" json:"userinfo,omitempty"`
	Dealerinfo *SHuiYinPushDealer `protobuf:"bytes,6,opt,name=dealerinfo" json:"dealerinfo,omitempty"`
	Error      ErrCode            `protobuf:"varint,7,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SHuiYinEnterRoom) Reset()                    { *m = SHuiYinEnterRoom{} }
func (*SHuiYinEnterRoom) ProtoMessage()               {}
func (*SHuiYinEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{1} }

func (m *SHuiYinEnterRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinEnterRoom) GetRoominfo() *HuiYinRoomInfo {
	if m != nil {
		return m.Roominfo
	}
	return nil
}

func (m *SHuiYinEnterRoom) GetSeatbets() []*HuiYinRoomBets {
	if m != nil {
		return m.Seatbets
	}
	return nil
}

func (m *SHuiYinEnterRoom) GetRolebets() []*HuiYinRoomBets {
	if m != nil {
		return m.Rolebets
	}
	return nil
}

func (m *SHuiYinEnterRoom) GetUserinfo() []*RoomUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *SHuiYinEnterRoom) GetDealerinfo() *SHuiYinPushDealer {
	if m != nil {
		return m.Dealerinfo
	}
	return nil
}

func (m *SHuiYinEnterRoom) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 其他玩家进入房间
type SHuiYinCamein struct {
	Code     uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Userdata *UserData `protobuf:"bytes,2,opt,name=userdata" json:"userdata,omitempty"`
}

func (m *SHuiYinCamein) Reset()                    { *m = SHuiYinCamein{} }
func (*SHuiYinCamein) ProtoMessage()               {}
func (*SHuiYinCamein) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{2} }

func (m *SHuiYinCamein) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinCamein) GetUserdata() *UserData {
	if m != nil {
		return m.Userdata
	}
	return nil
}

// 房间内玩家列表(旁观玩家)
type CHuiYinRoomRoles struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CHuiYinRoomRoles) Reset()                    { *m = CHuiYinRoomRoles{} }
func (*CHuiYinRoomRoles) ProtoMessage()               {}
func (*CHuiYinRoomRoles) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{3} }

func (m *CHuiYinRoomRoles) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SHuiYinRoomRoles struct {
	Code  uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List  []*RoomUser `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode     `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SHuiYinRoomRoles) Reset()                    { *m = SHuiYinRoomRoles{} }
func (*SHuiYinRoomRoles) ProtoMessage()               {}
func (*SHuiYinRoomRoles) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{4} }

func (m *SHuiYinRoomRoles) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinRoomRoles) GetList() []*RoomUser {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SHuiYinRoomRoles) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 离开房间
type CHuiYinLeave struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Userid string `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CHuiYinLeave) Reset()                    { *m = CHuiYinLeave{} }
func (*CHuiYinLeave) ProtoMessage()               {}
func (*CHuiYinLeave) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{5} }

func (m *CHuiYinLeave) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CHuiYinLeave) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SHuiYinLeave struct {
	Code   uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat   uint32  `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid string  `protobuf:"bytes,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Error  ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SHuiYinLeave) Reset()                    { *m = SHuiYinLeave{} }
func (*SHuiYinLeave) ProtoMessage()               {}
func (*SHuiYinLeave) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{6} }

func (m *SHuiYinLeave) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinLeave) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SHuiYinLeave) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SHuiYinLeave) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 4.玩家入坐,站起
type CHuiYinSit struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	State bool   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Seat  uint32 `protobuf:"varint,3,opt,name=seat,proto3" json:"seat,omitempty"`
}

func (m *CHuiYinSit) Reset()                    { *m = CHuiYinSit{} }
func (*CHuiYinSit) ProtoMessage()               {}
func (*CHuiYinSit) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{7} }

func (m *CHuiYinSit) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CHuiYinSit) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *CHuiYinSit) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

type SHuiYinSit struct {
	Code     uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	State    bool    `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Seat     uint32  `protobuf:"varint,3,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid   string  `protobuf:"bytes,4,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string  `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Photo    string  `protobuf:"bytes,6,opt,name=photo,proto3" json:"photo,omitempty"`
	Chip     int64   `protobuf:"varint,7,opt,name=chip,proto3" json:"chip,omitempty"`
	Error    ErrCode `protobuf:"varint,8,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SHuiYinSit) Reset()                    { *m = SHuiYinSit{} }
func (*SHuiYinSit) ProtoMessage()               {}
func (*SHuiYinSit) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{8} }

func (m *SHuiYinSit) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinSit) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *SHuiYinSit) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SHuiYinSit) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SHuiYinSit) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SHuiYinSit) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *SHuiYinSit) GetChip() int64 {
	if m != nil {
		return m.Chip
	}
	return 0
}

func (m *SHuiYinSit) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 玩家下注
type CHuiYinRoomBet struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seatbet uint32 `protobuf:"varint,2,opt,name=seatbet,proto3" json:"seatbet,omitempty"`
	Value   uint32 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CHuiYinRoomBet) Reset()                    { *m = CHuiYinRoomBet{} }
func (*CHuiYinRoomBet) ProtoMessage()               {}
func (*CHuiYinRoomBet) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{9} }

func (m *CHuiYinRoomBet) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CHuiYinRoomBet) GetSeatbet() uint32 {
	if m != nil {
		return m.Seatbet
	}
	return 0
}

func (m *CHuiYinRoomBet) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SHuiYinRoomBet struct {
	Code   uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat   uint32  `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Beseat uint32  `protobuf:"varint,3,opt,name=beseat,proto3" json:"beseat,omitempty"`
	Value  uint32  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Userid string  `protobuf:"bytes,5,opt,name=userid,proto3" json:"userid,omitempty"`
	Chip   int64   `protobuf:"varint,6,opt,name=chip,proto3" json:"chip,omitempty"`
	Bets   int64   `protobuf:"varint,7,opt,name=bets,proto3" json:"bets,omitempty"`
	Error  ErrCode `protobuf:"varint,8,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SHuiYinRoomBet) Reset()                    { *m = SHuiYinRoomBet{} }
func (*SHuiYinRoomBet) ProtoMessage()               {}
func (*SHuiYinRoomBet) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{10} }

func (m *SHuiYinRoomBet) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinRoomBet) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SHuiYinRoomBet) GetBeseat() uint32 {
	if m != nil {
		return m.Beseat
	}
	return 0
}

func (m *SHuiYinRoomBet) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SHuiYinRoomBet) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SHuiYinRoomBet) GetChip() int64 {
	if m != nil {
		return m.Chip
	}
	return 0
}

func (m *SHuiYinRoomBet) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *SHuiYinRoomBet) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 选择上庄,下庄
type CHuiYinDealer struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	State uint32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Num   uint32 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *CHuiYinDealer) Reset()                    { *m = CHuiYinDealer{} }
func (*CHuiYinDealer) ProtoMessage()               {}
func (*CHuiYinDealer) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{11} }

func (m *CHuiYinDealer) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CHuiYinDealer) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CHuiYinDealer) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type SHuiYinDealer struct {
	Code     uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	State    uint32  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Dealer   string  `protobuf:"bytes,3,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Userid   string  `protobuf:"bytes,4,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string  `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Num      int64   `protobuf:"varint,6,opt,name=num,proto3" json:"num,omitempty"`
	Down     bool    `protobuf:"varint,7,opt,name=down,proto3" json:"down,omitempty"`
	Error    ErrCode `protobuf:"varint,8,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SHuiYinDealer) Reset()                    { *m = SHuiYinDealer{} }
func (*SHuiYinDealer) ProtoMessage()               {}
func (*SHuiYinDealer) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{12} }

func (m *SHuiYinDealer) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinDealer) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SHuiYinDealer) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SHuiYinDealer) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SHuiYinDealer) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SHuiYinDealer) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *SHuiYinDealer) GetDown() bool {
	if m != nil {
		return m.Down
	}
	return false
}

func (m *SHuiYinDealer) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 上庄列表
type CHuiYinDealerList struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CHuiYinDealerList) Reset()                    { *m = CHuiYinDealerList{} }
func (*CHuiYinDealerList) ProtoMessage()               {}
func (*CHuiYinDealerList) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{13} }

func (m *CHuiYinDealerList) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SHuiYinDealerList struct {
	Code  uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List  []*HuiYinDealerList `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode             `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SHuiYinDealerList) Reset()                    { *m = SHuiYinDealerList{} }
func (*SHuiYinDealerList) ProtoMessage()               {}
func (*SHuiYinDealerList) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{14} }

func (m *SHuiYinDealerList) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinDealerList) GetList() []*HuiYinDealerList {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SHuiYinDealerList) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 庄信息
type SHuiYinPushDealer struct {
	Code     uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Dealer   string              `protobuf:"bytes,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Seat     uint32              `protobuf:"varint,3,opt,name=seat,proto3" json:"seat,omitempty"`
	Carry    int64               `protobuf:"varint,4,opt,name=carry,proto3" json:"carry,omitempty"`
	List     []*HuiYinDealerList `protobuf:"bytes,5,rep,name=list" json:"list,omitempty"`
	Nickname string              `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Down     bool                `protobuf:"varint,7,opt,name=down,proto3" json:"down,omitempty"`
}

func (m *SHuiYinPushDealer) Reset()                    { *m = SHuiYinPushDealer{} }
func (*SHuiYinPushDealer) ProtoMessage()               {}
func (*SHuiYinPushDealer) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{15} }

func (m *SHuiYinPushDealer) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinPushDealer) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SHuiYinPushDealer) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SHuiYinPushDealer) GetCarry() int64 {
	if m != nil {
		return m.Carry
	}
	return 0
}

func (m *SHuiYinPushDealer) GetList() []*HuiYinDealerList {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SHuiYinPushDealer) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SHuiYinPushDealer) GetDown() bool {
	if m != nil {
		return m.Down
	}
	return false
}

// 成为庄家
type SHuiYinPushBeDealer struct {
	Code     uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Dealer   string              `protobuf:"bytes,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Seat     uint32              `protobuf:"varint,3,opt,name=seat,proto3" json:"seat,omitempty"`
	Carry    int64               `protobuf:"varint,4,opt,name=carry,proto3" json:"carry,omitempty"`
	List     []*HuiYinDealerList `protobuf:"bytes,5,rep,name=list" json:"list,omitempty"`
	Nickname string              `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (m *SHuiYinPushBeDealer) Reset()                    { *m = SHuiYinPushBeDealer{} }
func (*SHuiYinPushBeDealer) ProtoMessage()               {}
func (*SHuiYinPushBeDealer) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{16} }

func (m *SHuiYinPushBeDealer) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinPushBeDealer) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SHuiYinPushBeDealer) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SHuiYinPushBeDealer) GetCarry() int64 {
	if m != nil {
		return m.Carry
	}
	return 0
}

func (m *SHuiYinPushBeDealer) GetList() []*HuiYinDealerList {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SHuiYinPushBeDealer) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

// 桌子状态
type CHuiYinDeskState struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CHuiYinDeskState) Reset()                    { *m = CHuiYinDeskState{} }
func (*CHuiYinDeskState) ProtoMessage()               {}
func (*CHuiYinDeskState) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{17} }

func (m *CHuiYinDeskState) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SHuiYinDeskState struct {
	Code     uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	State    uint32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Nexttime int64  `protobuf:"varint,3,opt,name=nexttime,proto3" json:"nexttime,omitempty"`
}

func (m *SHuiYinDeskState) Reset()                    { *m = SHuiYinDeskState{} }
func (*SHuiYinDeskState) ProtoMessage()               {}
func (*SHuiYinDeskState) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{18} }

func (m *SHuiYinDeskState) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinDeskState) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SHuiYinDeskState) GetNexttime() int64 {
	if m != nil {
		return m.Nexttime
	}
	return 0
}

// 结算广播接口，游戏结束
type SHuiYinGameover struct {
	Code       uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Dealer     string            `protobuf:"bytes,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Carry      int64             `protobuf:"varint,3,opt,name=carry,proto3" json:"carry,omitempty"`
	Expect     string            `protobuf:"bytes,4,opt,name=expect,proto3" json:"expect,omitempty"`
	Data       []*HuiYinRoomOver `protobuf:"bytes,5,rep,name=data" json:"data,omitempty"`
	Seats      []*HuiYinSeatOver `protobuf:"bytes,6,rep,name=seats" json:"seats,omitempty"`
	Opencode   string            `protobuf:"bytes,7,opt,name=opencode,proto3" json:"opencode,omitempty"`
	DealerSeat uint32            `protobuf:"varint,8,opt,name=dealerSeat,proto3" json:"dealerSeat,omitempty"`
}

func (m *SHuiYinGameover) Reset()                    { *m = SHuiYinGameover{} }
func (*SHuiYinGameover) ProtoMessage()               {}
func (*SHuiYinGameover) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{19} }

func (m *SHuiYinGameover) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinGameover) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SHuiYinGameover) GetCarry() int64 {
	if m != nil {
		return m.Carry
	}
	return 0
}

func (m *SHuiYinGameover) GetExpect() string {
	if m != nil {
		return m.Expect
	}
	return ""
}

func (m *SHuiYinGameover) GetData() []*HuiYinRoomOver {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SHuiYinGameover) GetSeats() []*HuiYinSeatOver {
	if m != nil {
		return m.Seats
	}
	return nil
}

func (m *SHuiYinGameover) GetOpencode() string {
	if m != nil {
		return m.Opencode
	}
	return ""
}

func (m *SHuiYinGameover) GetDealerSeat() uint32 {
	if m != nil {
		return m.DealerSeat
	}
	return 0
}

// 桌子位置下注信息
type CHuiYinDeskBetInfo struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
}

func (m *CHuiYinDeskBetInfo) Reset()                    { *m = CHuiYinDeskBetInfo{} }
func (*CHuiYinDeskBetInfo) ProtoMessage()               {}
func (*CHuiYinDeskBetInfo) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{20} }

func (m *CHuiYinDeskBetInfo) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CHuiYinDeskBetInfo) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

type SHuiYinDeskBetInfo struct {
	Code  uint32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32     `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Bets  int64      `protobuf:"varint,3,opt,name=bets,proto3" json:"bets,omitempty"`
	List  []*BetInfo `protobuf:"bytes,4,rep,name=list" json:"list,omitempty"`
	Error ErrCode    `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SHuiYinDeskBetInfo) Reset()                    { *m = SHuiYinDeskBetInfo{} }
func (*SHuiYinDeskBetInfo) ProtoMessage()               {}
func (*SHuiYinDeskBetInfo) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinRoom, []int{21} }

func (m *SHuiYinDeskBetInfo) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinDeskBetInfo) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SHuiYinDeskBetInfo) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *SHuiYinDeskBetInfo) GetList() []*BetInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SHuiYinDeskBetInfo) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*CHuiYinEnterRoom)(nil), "pb.CHuiYinEnterRoom")
	proto.RegisterType((*SHuiYinEnterRoom)(nil), "pb.SHuiYinEnterRoom")
	proto.RegisterType((*SHuiYinCamein)(nil), "pb.SHuiYinCamein")
	proto.RegisterType((*CHuiYinRoomRoles)(nil), "pb.CHuiYinRoomRoles")
	proto.RegisterType((*SHuiYinRoomRoles)(nil), "pb.SHuiYinRoomRoles")
	proto.RegisterType((*CHuiYinLeave)(nil), "pb.CHuiYinLeave")
	proto.RegisterType((*SHuiYinLeave)(nil), "pb.SHuiYinLeave")
	proto.RegisterType((*CHuiYinSit)(nil), "pb.CHuiYinSit")
	proto.RegisterType((*SHuiYinSit)(nil), "pb.SHuiYinSit")
	proto.RegisterType((*CHuiYinRoomBet)(nil), "pb.CHuiYinRoomBet")
	proto.RegisterType((*SHuiYinRoomBet)(nil), "pb.SHuiYinRoomBet")
	proto.RegisterType((*CHuiYinDealer)(nil), "pb.CHuiYinDealer")
	proto.RegisterType((*SHuiYinDealer)(nil), "pb.SHuiYinDealer")
	proto.RegisterType((*CHuiYinDealerList)(nil), "pb.CHuiYinDealerList")
	proto.RegisterType((*SHuiYinDealerList)(nil), "pb.SHuiYinDealerList")
	proto.RegisterType((*SHuiYinPushDealer)(nil), "pb.SHuiYinPushDealer")
	proto.RegisterType((*SHuiYinPushBeDealer)(nil), "pb.SHuiYinPushBeDealer")
	proto.RegisterType((*CHuiYinDeskState)(nil), "pb.CHuiYinDeskState")
	proto.RegisterType((*SHuiYinDeskState)(nil), "pb.SHuiYinDeskState")
	proto.RegisterType((*SHuiYinGameover)(nil), "pb.SHuiYinGameover")
	proto.RegisterType((*CHuiYinDeskBetInfo)(nil), "pb.CHuiYinDeskBetInfo")
	proto.RegisterType((*SHuiYinDeskBetInfo)(nil), "pb.SHuiYinDeskBetInfo")
}
func (this *CHuiYinEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CHuiYinEnterRoom)
	if !ok {
		that2, ok := that.(CHuiYinEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	return true
}
func (this *SHuiYinEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinEnterRoom)
	if !ok {
		that2, ok := that.(SHuiYinEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !this.Roominfo.Equal(that1.Roominfo) {
		return false
	}
	if len(this.Seatbets) != len(that1.Seatbets) {
		return false
	}
	for i := range this.Seatbets {
		if !this.Seatbets[i].Equal(that1.Seatbets[i]) {
			return false
		}
	}
	if len(this.Rolebets) != len(that1.Rolebets) {
		return false
	}
	for i := range this.Rolebets {
		if !this.Rolebets[i].Equal(that1.Rolebets[i]) {
			return false
		}
	}
	if len(this.Userinfo) != len(that1.Userinfo) {
		return false
	}
	for i := range this.Userinfo {
		if !this.Userinfo[i].Equal(that1.Userinfo[i]) {
			return false
		}
	}
	if !this.Dealerinfo.Equal(that1.Dealerinfo) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SHuiYinCamein) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinCamein)
	if !ok {
		that2, ok := that.(SHuiYinCamein)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !this.Userdata.Equal(that1.Userdata) {
		return false
	}
	return true
}
func (this *CHuiYinRoomRoles) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CHuiYinRoomRoles)
	if !ok {
		that2, ok := that.(CHuiYinRoomRoles)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SHuiYinRoomRoles) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinRoomRoles)
	if !ok {
		that2, ok := that.(SHuiYinRoomRoles)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CHuiYinLeave) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CHuiYinLeave)
	if !ok {
		that2, ok := that.(CHuiYinLeave)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SHuiYinLeave) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinLeave)
	if !ok {
		that2, ok := that.(SHuiYinLeave)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CHuiYinSit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CHuiYinSit)
	if !ok {
		that2, ok := that.(CHuiYinSit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	return true
}
func (this *SHuiYinSit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinSit)
	if !ok {
		that2, ok := that.(SHuiYinSit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Chip != that1.Chip {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CHuiYinRoomBet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CHuiYinRoomBet)
	if !ok {
		that2, ok := that.(CHuiYinRoomBet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seatbet != that1.Seatbet {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SHuiYinRoomBet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinRoomBet)
	if !ok {
		that2, ok := that.(SHuiYinRoomBet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Beseat != that1.Beseat {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Chip != that1.Chip {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CHuiYinDealer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CHuiYinDealer)
	if !ok {
		that2, ok := that.(CHuiYinDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *SHuiYinDealer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinDealer)
	if !ok {
		that2, ok := that.(SHuiYinDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Down != that1.Down {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CHuiYinDealerList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CHuiYinDealerList)
	if !ok {
		that2, ok := that.(CHuiYinDealerList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SHuiYinDealerList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinDealerList)
	if !ok {
		that2, ok := that.(SHuiYinDealerList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SHuiYinPushDealer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinPushDealer)
	if !ok {
		that2, ok := that.(SHuiYinPushDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Carry != that1.Carry {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Down != that1.Down {
		return false
	}
	return true
}
func (this *SHuiYinPushBeDealer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinPushBeDealer)
	if !ok {
		that2, ok := that.(SHuiYinPushBeDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Carry != that1.Carry {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	return true
}
func (this *CHuiYinDeskState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CHuiYinDeskState)
	if !ok {
		that2, ok := that.(CHuiYinDeskState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SHuiYinDeskState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinDeskState)
	if !ok {
		that2, ok := that.(SHuiYinDeskState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Nexttime != that1.Nexttime {
		return false
	}
	return true
}
func (this *SHuiYinGameover) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinGameover)
	if !ok {
		that2, ok := that.(SHuiYinGameover)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Carry != that1.Carry {
		return false
	}
	if this.Expect != that1.Expect {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	if len(this.Seats) != len(that1.Seats) {
		return false
	}
	for i := range this.Seats {
		if !this.Seats[i].Equal(that1.Seats[i]) {
			return false
		}
	}
	if this.Opencode != that1.Opencode {
		return false
	}
	if this.DealerSeat != that1.DealerSeat {
		return false
	}
	return true
}
func (this *CHuiYinDeskBetInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CHuiYinDeskBetInfo)
	if !ok {
		that2, ok := that.(CHuiYinDeskBetInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	return true
}
func (this *SHuiYinDeskBetInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinDeskBetInfo)
	if !ok {
		that2, ok := that.(SHuiYinDeskBetInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CHuiYinEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CHuiYinEnterRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.SHuiYinEnterRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Roominfo != nil {
		s = append(s, "Roominfo: "+fmt.Sprintf("%#v", this.Roominfo)+",\n")
	}
	if this.Seatbets != nil {
		s = append(s, "Seatbets: "+fmt.Sprintf("%#v", this.Seatbets)+",\n")
	}
	if this.Rolebets != nil {
		s = append(s, "Rolebets: "+fmt.Sprintf("%#v", this.Rolebets)+",\n")
	}
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	if this.Dealerinfo != nil {
		s = append(s, "Dealerinfo: "+fmt.Sprintf("%#v", this.Dealerinfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinCamein) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SHuiYinCamein{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Userdata != nil {
		s = append(s, "Userdata: "+fmt.Sprintf("%#v", this.Userdata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CHuiYinRoomRoles) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CHuiYinRoomRoles{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinRoomRoles) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SHuiYinRoomRoles{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CHuiYinLeave) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CHuiYinLeave{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinLeave) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SHuiYinLeave{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CHuiYinSit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CHuiYinSit{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinSit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.SHuiYinSit{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Chip: "+fmt.Sprintf("%#v", this.Chip)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CHuiYinRoomBet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CHuiYinRoomBet{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seatbet: "+fmt.Sprintf("%#v", this.Seatbet)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinRoomBet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.SHuiYinRoomBet{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Beseat: "+fmt.Sprintf("%#v", this.Beseat)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Chip: "+fmt.Sprintf("%#v", this.Chip)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CHuiYinDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CHuiYinDealer{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.SHuiYinDealer{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Down: "+fmt.Sprintf("%#v", this.Down)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CHuiYinDealerList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CHuiYinDealerList{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinDealerList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SHuiYinDealerList{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinPushDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.SHuiYinPushDealer{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Carry: "+fmt.Sprintf("%#v", this.Carry)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Down: "+fmt.Sprintf("%#v", this.Down)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinPushBeDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.SHuiYinPushBeDealer{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Carry: "+fmt.Sprintf("%#v", this.Carry)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CHuiYinDeskState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CHuiYinDeskState{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinDeskState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SHuiYinDeskState{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Nexttime: "+fmt.Sprintf("%#v", this.Nexttime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinGameover) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.SHuiYinGameover{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Carry: "+fmt.Sprintf("%#v", this.Carry)+",\n")
	s = append(s, "Expect: "+fmt.Sprintf("%#v", this.Expect)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Seats != nil {
		s = append(s, "Seats: "+fmt.Sprintf("%#v", this.Seats)+",\n")
	}
	s = append(s, "Opencode: "+fmt.Sprintf("%#v", this.Opencode)+",\n")
	s = append(s, "DealerSeat: "+fmt.Sprintf("%#v", this.DealerSeat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CHuiYinDeskBetInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CHuiYinDeskBetInfo{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinDeskBetInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SHuiYinDeskBetInfo{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHuiyinRoom(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CHuiYinEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CHuiYinEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Rtype))
	}
	return i, nil
}

func (m *SHuiYinEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if m.Roominfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Roominfo.Size()))
		n1, err := m.Roominfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Seatbets) > 0 {
		for _, msg := range m.Seatbets {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintHuiyinRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Rolebets) > 0 {
		for _, msg := range m.Rolebets {
			dAtA[i] = 0x22
			i++
			i = encodeVarintHuiyinRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Userinfo) > 0 {
		for _, msg := range m.Userinfo {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintHuiyinRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Dealerinfo != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Dealerinfo.Size()))
		n2, err := m.Dealerinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Error != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SHuiYinCamein) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinCamein) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if m.Userdata != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Userdata.Size()))
		n3, err := m.Userdata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *CHuiYinRoomRoles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CHuiYinRoomRoles) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SHuiYinRoomRoles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinRoomRoles) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHuiyinRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CHuiYinLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CHuiYinLeave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SHuiYinLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinLeave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CHuiYinSit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CHuiYinSit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if m.State {
		dAtA[i] = 0x10
		i++
		if m.State {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Seat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Seat))
	}
	return i, nil
}

func (m *SHuiYinSit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinSit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if m.State {
		dAtA[i] = 0x10
		i++
		if m.State {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Seat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Chip != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Chip))
	}
	if m.Error != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CHuiYinRoomBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CHuiYinRoomBet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if m.Seatbet != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Seatbet))
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *SHuiYinRoomBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinRoomBet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Beseat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Beseat))
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Value))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Chip != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Chip))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Bets))
	}
	if m.Error != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CHuiYinDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CHuiYinDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.State))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *SHuiYinDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.State))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.Num != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Num))
	}
	if m.Down {
		dAtA[i] = 0x38
		i++
		if m.Down {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CHuiYinDealerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CHuiYinDealerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SHuiYinDealerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinDealerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHuiyinRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SHuiYinPushDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinPushDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if m.Seat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Carry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Carry))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintHuiyinRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.Down {
		dAtA[i] = 0x38
		i++
		if m.Down {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SHuiYinPushBeDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinPushBeDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if m.Seat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Carry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Carry))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintHuiyinRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	return i, nil
}

func (m *CHuiYinDeskState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CHuiYinDeskState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SHuiYinDeskState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinDeskState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.State))
	}
	if m.Nexttime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Nexttime))
	}
	return i, nil
}

func (m *SHuiYinGameover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinGameover) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if m.Carry != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Carry))
	}
	if len(m.Expect) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Expect)))
		i += copy(dAtA[i:], m.Expect)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintHuiyinRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Seats) > 0 {
		for _, msg := range m.Seats {
			dAtA[i] = 0x32
			i++
			i = encodeVarintHuiyinRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Opencode) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(len(m.Opencode)))
		i += copy(dAtA[i:], m.Opencode)
	}
	if m.DealerSeat != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.DealerSeat))
	}
	return i, nil
}

func (m *CHuiYinDeskBetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CHuiYinDeskBetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Seat))
	}
	return i, nil
}

func (m *SHuiYinDeskBetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinDeskBetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Bets))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x22
			i++
			i = encodeVarintHuiyinRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHuiyinRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeVarintHuiyinRoom(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CHuiYinEnterRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	if m.Gtype != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Rtype))
	}
	return n
}

func (m *SHuiYinEnterRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	if m.Roominfo != nil {
		l = m.Roominfo.Size()
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	if len(m.Seatbets) > 0 {
		for _, e := range m.Seatbets {
			l = e.Size()
			n += 1 + l + sovHuiyinRoom(uint64(l))
		}
	}
	if len(m.Rolebets) > 0 {
		for _, e := range m.Rolebets {
			l = e.Size()
			n += 1 + l + sovHuiyinRoom(uint64(l))
		}
	}
	if len(m.Userinfo) > 0 {
		for _, e := range m.Userinfo {
			l = e.Size()
			n += 1 + l + sovHuiyinRoom(uint64(l))
		}
	}
	if m.Dealerinfo != nil {
		l = m.Dealerinfo.Size()
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Error))
	}
	return n
}

func (m *SHuiYinCamein) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	if m.Userdata != nil {
		l = m.Userdata.Size()
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	return n
}

func (m *CHuiYinRoomRoles) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	return n
}

func (m *SHuiYinRoomRoles) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovHuiyinRoom(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Error))
	}
	return n
}

func (m *CHuiYinLeave) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	return n
}

func (m *SHuiYinLeave) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Error))
	}
	return n
}

func (m *CHuiYinSit) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	if m.State {
		n += 2
	}
	if m.Seat != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Seat))
	}
	return n
}

func (m *SHuiYinSit) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	if m.State {
		n += 2
	}
	if m.Seat != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	if m.Chip != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Chip))
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Error))
	}
	return n
}

func (m *CHuiYinRoomBet) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	if m.Seatbet != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Seatbet))
	}
	if m.Value != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Value))
	}
	return n
}

func (m *SHuiYinRoomBet) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Seat))
	}
	if m.Beseat != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Beseat))
	}
	if m.Value != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Value))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	if m.Chip != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Chip))
	}
	if m.Bets != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Bets))
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Error))
	}
	return n
}

func (m *CHuiYinDealer) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	if m.State != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.State))
	}
	if m.Num != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Num))
	}
	return n
}

func (m *SHuiYinDealer) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	if m.State != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.State))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Num))
	}
	if m.Down {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Error))
	}
	return n
}

func (m *CHuiYinDealerList) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	return n
}

func (m *SHuiYinDealerList) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovHuiyinRoom(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Error))
	}
	return n
}

func (m *SHuiYinPushDealer) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	if m.Seat != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Seat))
	}
	if m.Carry != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Carry))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovHuiyinRoom(uint64(l))
		}
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	if m.Down {
		n += 2
	}
	return n
}

func (m *SHuiYinPushBeDealer) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	if m.Seat != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Seat))
	}
	if m.Carry != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Carry))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovHuiyinRoom(uint64(l))
		}
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	return n
}

func (m *CHuiYinDeskState) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	return n
}

func (m *SHuiYinDeskState) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	if m.State != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.State))
	}
	if m.Nexttime != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Nexttime))
	}
	return n
}

func (m *SHuiYinGameover) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	if m.Carry != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Carry))
	}
	l = len(m.Expect)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovHuiyinRoom(uint64(l))
		}
	}
	if len(m.Seats) > 0 {
		for _, e := range m.Seats {
			l = e.Size()
			n += 1 + l + sovHuiyinRoom(uint64(l))
		}
	}
	l = len(m.Opencode)
	if l > 0 {
		n += 1 + l + sovHuiyinRoom(uint64(l))
	}
	if m.DealerSeat != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.DealerSeat))
	}
	return n
}

func (m *CHuiYinDeskBetInfo) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Seat))
	}
	return n
}

func (m *SHuiYinDeskBetInfo) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Seat))
	}
	if m.Bets != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Bets))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovHuiyinRoom(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinRoom(uint64(m.Error))
	}
	return n
}

func sovHuiyinRoom(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHuiyinRoom(x uint64) (n int) {
	return sovHuiyinRoom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CHuiYinEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CHuiYinEnterRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinEnterRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Roominfo:` + strings.Replace(fmt.Sprintf("%v", this.Roominfo), "HuiYinRoomInfo", "HuiYinRoomInfo", 1) + `,`,
		`Seatbets:` + strings.Replace(fmt.Sprintf("%v", this.Seatbets), "HuiYinRoomBets", "HuiYinRoomBets", 1) + `,`,
		`Rolebets:` + strings.Replace(fmt.Sprintf("%v", this.Rolebets), "HuiYinRoomBets", "HuiYinRoomBets", 1) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "RoomUser", "RoomUser", 1) + `,`,
		`Dealerinfo:` + strings.Replace(fmt.Sprintf("%v", this.Dealerinfo), "SHuiYinPushDealer", "SHuiYinPushDealer", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinCamein) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinCamein{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Userdata:` + strings.Replace(fmt.Sprintf("%v", this.Userdata), "UserData", "UserData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CHuiYinRoomRoles) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CHuiYinRoomRoles{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinRoomRoles) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinRoomRoles{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "RoomUser", "RoomUser", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CHuiYinLeave) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CHuiYinLeave{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinLeave) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinLeave{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CHuiYinSit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CHuiYinSit{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinSit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinSit{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Chip:` + fmt.Sprintf("%v", this.Chip) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CHuiYinRoomBet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CHuiYinRoomBet{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seatbet:` + fmt.Sprintf("%v", this.Seatbet) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinRoomBet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinRoomBet{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Beseat:` + fmt.Sprintf("%v", this.Beseat) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Chip:` + fmt.Sprintf("%v", this.Chip) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CHuiYinDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CHuiYinDealer{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinDealer{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Down:` + fmt.Sprintf("%v", this.Down) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CHuiYinDealerList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CHuiYinDealerList{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinDealerList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinDealerList{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "HuiYinDealerList", "HuiYinDealerList", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinPushDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinPushDealer{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Carry:` + fmt.Sprintf("%v", this.Carry) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "HuiYinDealerList", "HuiYinDealerList", 1) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Down:` + fmt.Sprintf("%v", this.Down) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinPushBeDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinPushBeDealer{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Carry:` + fmt.Sprintf("%v", this.Carry) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "HuiYinDealerList", "HuiYinDealerList", 1) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CHuiYinDeskState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CHuiYinDeskState{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinDeskState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinDeskState{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Nexttime:` + fmt.Sprintf("%v", this.Nexttime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinGameover) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinGameover{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Carry:` + fmt.Sprintf("%v", this.Carry) + `,`,
		`Expect:` + fmt.Sprintf("%v", this.Expect) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "HuiYinRoomOver", "HuiYinRoomOver", 1) + `,`,
		`Seats:` + strings.Replace(fmt.Sprintf("%v", this.Seats), "HuiYinSeatOver", "HuiYinSeatOver", 1) + `,`,
		`Opencode:` + fmt.Sprintf("%v", this.Opencode) + `,`,
		`DealerSeat:` + fmt.Sprintf("%v", this.DealerSeat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CHuiYinDeskBetInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CHuiYinDeskBetInfo{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinDeskBetInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinDeskBetInfo{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "BetInfo", "BetInfo", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHuiyinRoom(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CHuiYinEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CHuiYinEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CHuiYinEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roominfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roominfo == nil {
				m.Roominfo = &HuiYinRoomInfo{}
			}
			if err := m.Roominfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seatbets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seatbets = append(m.Seatbets, &HuiYinRoomBets{})
			if err := m.Seatbets[len(m.Seatbets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rolebets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rolebets = append(m.Rolebets, &HuiYinRoomBets{})
			if err := m.Rolebets[len(m.Rolebets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userinfo = append(m.Userinfo, &RoomUser{})
			if err := m.Userinfo[len(m.Userinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealerinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dealerinfo == nil {
				m.Dealerinfo = &SHuiYinPushDealer{}
			}
			if err := m.Dealerinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinCamein) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinCamein: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinCamein: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Userdata == nil {
				m.Userdata = &UserData{}
			}
			if err := m.Userdata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CHuiYinRoomRoles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CHuiYinRoomRoles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CHuiYinRoomRoles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinRoomRoles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinRoomRoles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinRoomRoles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RoomUser{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CHuiYinLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CHuiYinLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CHuiYinLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CHuiYinSit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CHuiYinSit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CHuiYinSit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinSit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinSit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinSit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chip", wireType)
			}
			m.Chip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chip |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CHuiYinRoomBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CHuiYinRoomBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CHuiYinRoomBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seatbet", wireType)
			}
			m.Seatbet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seatbet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinRoomBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinRoomBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinRoomBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beseat", wireType)
			}
			m.Beseat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Beseat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chip", wireType)
			}
			m.Chip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chip |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CHuiYinDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CHuiYinDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CHuiYinDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Down", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Down = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CHuiYinDealerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CHuiYinDealerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CHuiYinDealerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinDealerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinDealerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinDealerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &HuiYinDealerList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinPushDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinPushDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinPushDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Carry", wireType)
			}
			m.Carry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Carry |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &HuiYinDealerList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Down", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Down = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinPushBeDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinPushBeDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinPushBeDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Carry", wireType)
			}
			m.Carry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Carry |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &HuiYinDealerList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CHuiYinDeskState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CHuiYinDeskState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CHuiYinDeskState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinDeskState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinDeskState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinDeskState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nexttime", wireType)
			}
			m.Nexttime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nexttime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinGameover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinGameover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinGameover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Carry", wireType)
			}
			m.Carry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Carry |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &HuiYinRoomOver{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seats = append(m.Seats, &HuiYinSeatOver{})
			if err := m.Seats[len(m.Seats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opencode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opencode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealerSeat", wireType)
			}
			m.DealerSeat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealerSeat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CHuiYinDeskBetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CHuiYinDeskBetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CHuiYinDeskBetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinDeskBetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinDeskBetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinDeskBetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &BetInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHuiyinRoom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHuiyinRoom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHuiyinRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHuiyinRoom
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHuiyinRoom
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHuiyinRoom(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHuiyinRoom = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHuiyinRoom   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("huiyin_room.proto", fileDescriptorHuiyinRoom) }

var fileDescriptorHuiyinRoom = []byte{
	// 919 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xbf, 0x73, 0xe4, 0x34,
	0x14, 0x8e, 0xd6, 0xf6, 0x66, 0xef, 0x5d, 0x36, 0x97, 0x88, 0x90, 0xf1, 0xa4, 0x30, 0x8b, 0x8b,
	0x63, 0x0b, 0x26, 0xc5, 0x31, 0x34, 0x0c, 0x55, 0x92, 0x1b, 0x7e, 0x1d, 0x03, 0x23, 0xc3, 0x0c,
	0x54, 0x19, 0x6f, 0x56, 0x77, 0x31, 0x59, 0x5b, 0xc6, 0xd6, 0x86, 0x4b, 0xc7, 0x9f, 0x40, 0xc1,
	0x1f, 0x41, 0x4b, 0x4b, 0x4b, 0x03, 0xc3, 0x0c, 0x73, 0x25, 0x25, 0x59, 0x1a, 0xca, 0x6b, 0xe9,
	0x18, 0x3d, 0xc9, 0xb2, 0x37, 0x67, 0xdf, 0xee, 0xdd, 0x50, 0xd0, 0xe9, 0x49, 0x9f, 0x9e, 0xbe,
	0xf7, 0x49, 0xef, 0xb3, 0x61, 0xf7, 0x7c, 0x9e, 0x5c, 0x25, 0xd9, 0x69, 0x21, 0x44, 0x7a, 0x98,
	0x17, 0x42, 0x0a, 0xda, 0xcb, 0x27, 0x07, 0x77, 0x1e, 0xc5, 0x29, 0x3f, 0x3d, 0x13, 0x53, 0xae,
	0x27, 0x0f, 0x76, 0xf2, 0xf9, 0xe4, 0x54, 0x63, 0x9b, 0x33, 0xa9, 0x98, 0xce, 0x67, 0x06, 0x13,
	0x7e, 0x05, 0x3b, 0xc7, 0xef, 0xcf, 0x93, 0x2f, 0x93, 0xec, 0x7e, 0x26, 0x79, 0xc1, 0x84, 0x48,
	0x29, 0x05, 0x57, 0x65, 0xf1, 0xc9, 0x88, 0x8c, 0x87, 0x0c, 0xc7, 0x74, 0x1f, 0xfa, 0xea, 0xb8,
	0x64, 0xea, 0xf7, 0x46, 0x64, 0x7c, 0x8b, 0x99, 0x88, 0xee, 0x81, 0xf7, 0x48, 0x5e, 0xe5, 0xdc,
	0x77, 0x10, 0xac, 0x03, 0x35, 0x5b, 0xe0, 0xac, 0xab, 0x67, 0x31, 0x08, 0x7f, 0xea, 0xc1, 0x4e,
	0xb4, 0xce, 0x61, 0x87, 0x30, 0xc0, 0xf4, 0xd9, 0x43, 0x81, 0xc7, 0xdd, 0xbe, 0x47, 0x0f, 0xf3,
	0xc9, 0xa1, 0xde, 0xaa, 0x76, 0x7d, 0x90, 0x3d, 0x14, 0xcc, 0x62, 0x14, 0xbe, 0xe4, 0xb1, 0x9c,
	0x70, 0x59, 0xfa, 0xce, 0xc8, 0x79, 0x16, 0x7f, 0xc4, 0x65, 0xc9, 0x2c, 0x46, 0xe7, 0x9f, 0x71,
	0xc4, 0xbb, 0xdd, 0xf8, 0x0a, 0x43, 0xc7, 0x30, 0x98, 0x97, 0xbc, 0x40, 0x3e, 0x1e, 0xe2, 0xb7,
	0x14, 0x5e, 0x21, 0x3f, 0x2f, 0x79, 0xc1, 0xec, 0x2a, 0x7d, 0x1b, 0x60, 0xca, 0xe3, 0x99, 0xc1,
	0xf6, 0x91, 0xfb, 0xab, 0x0a, 0x6b, 0xea, 0xfe, 0x74, 0x5e, 0x9e, 0x9f, 0x20, 0x80, 0x35, 0x80,
	0xf4, 0x75, 0xf0, 0x78, 0x51, 0x88, 0xc2, 0xdf, 0x1c, 0x91, 0xf1, 0xf6, 0xbd, 0xdb, 0x6a, 0xc7,
	0xfd, 0xa2, 0x38, 0x16, 0x53, 0xce, 0xf4, 0x4a, 0xf8, 0x31, 0x0c, 0x4d, 0x8e, 0xe3, 0x38, 0xe5,
	0x49, 0xd6, 0x2a, 0x9c, 0x21, 0x3a, 0x8d, 0x65, 0x6c, 0x84, 0x43, 0xa2, 0x8a, 0xe4, 0x49, 0x2c,
	0x63, 0x66, 0x57, 0xc3, 0xbb, 0xf6, 0xde, 0x55, 0x15, 0x4c, 0xcc, 0x78, 0xd9, 0x96, 0x31, 0xbc,
	0xb0, 0x57, 0xf6, 0x5c, 0x1c, 0x1d, 0x81, 0x3b, 0x4b, 0x4a, 0xe9, 0xf7, 0x5a, 0xe4, 0xc1, 0x95,
	0xba, 0x46, 0xa7, 0xb3, 0xc6, 0x77, 0x60, 0xcb, 0x90, 0x7a, 0xc0, 0xe3, 0x4b, 0xde, 0xf5, 0x10,
	0x51, 0x6d, 0xfb, 0x10, 0x75, 0x14, 0x7e, 0x0d, 0x5b, 0xd1, 0xaa, 0xbd, 0x14, 0x5c, 0xf5, 0x06,
	0x70, 0xe7, 0x90, 0xe1, 0xb8, 0x91, 0xcf, 0x69, 0xe6, 0xab, 0xe9, 0xba, 0x9d, 0x74, 0x3f, 0x04,
	0x30, 0x74, 0xa3, 0x44, 0xb6, 0x1e, 0xb8, 0x07, 0x5e, 0x29, 0x63, 0xc9, 0xf1, 0xc4, 0x01, 0xd3,
	0x81, 0xa5, 0xe1, 0xd4, 0x34, 0xc2, 0xdf, 0x08, 0x40, 0xf4, 0x1f, 0x25, 0x6b, 0xd4, 0xe4, 0x2e,
	0xd5, 0x74, 0x00, 0x83, 0x2c, 0x39, 0xbb, 0xc8, 0xe2, 0x94, 0xfb, 0x1e, 0xae, 0xd8, 0x58, 0x65,
	0xcf, 0xcf, 0x85, 0xd4, 0x8f, 0xf6, 0x16, 0xd3, 0x01, 0xf2, 0x38, 0x4f, 0x72, 0x7c, 0x97, 0x0e,
	0xc3, 0x71, 0xad, 0xcc, 0xa0, 0x53, 0x99, 0xcf, 0x60, 0xfb, 0x78, 0xa9, 0x9b, 0x5a, 0x0b, 0xf2,
	0x61, 0xd3, 0xb4, 0xa4, 0xb9, 0x91, 0x2a, 0x54, 0x64, 0x2e, 0xe3, 0xd9, 0xdc, 0xba, 0x0a, 0x06,
	0xe1, 0xaf, 0x04, 0xb6, 0xa3, 0xd5, 0x69, 0x3b, 0x6e, 0x79, 0xc2, 0x1b, 0x3a, 0x99, 0xa8, 0x3e,
	0xc8, 0x6d, 0x1c, 0xd4, 0xd0, 0xcf, 0x5b, 0xd2, 0xaf, 0x52, 0xa3, 0xdf, 0x50, 0x83, 0x82, 0x8b,
	0x3e, 0x62, 0x14, 0x42, 0xbf, 0x58, 0x43, 0xa1, 0x8f, 0x60, 0x68, 0x14, 0xd2, 0x76, 0xb0, 0xfa,
	0xc6, 0x87, 0xd5, 0x8d, 0xef, 0x80, 0x93, 0xcd, 0x53, 0x53, 0x88, 0x1a, 0x86, 0xbf, 0x13, 0x6b,
	0x0e, 0x2f, 0x9c, 0x6d, 0x1f, 0xfa, 0xda, 0x88, 0xaa, 0xf7, 0xaf, 0xa3, 0x97, 0x7a, 0x43, 0x86,
	0x99, 0x96, 0x47, 0x0d, 0x15, 0x8f, 0xa9, 0xf8, 0x26, 0x43, 0x75, 0x06, 0x0c, 0xc7, 0xeb, 0xa8,
	0xf3, 0x06, 0xec, 0x2e, 0xa9, 0xf3, 0x40, 0x19, 0x48, 0x9b, 0x3d, 0x49, 0xd8, 0x8d, 0xd6, 0x01,
	0xd2, 0xf1, 0x92, 0x3f, 0xed, 0xd5, 0x76, 0x5f, 0xef, 0x5b, 0xdf, 0xa7, 0x7e, 0x26, 0xf6, 0xd8,
	0xda, 0xd0, 0xbb, 0xdc, 0xca, 0xa8, 0xdb, 0x5b, 0x52, 0xb7, 0xad, 0x6b, 0xf7, 0xc0, 0x3b, 0x8b,
	0x8b, 0xe2, 0x0a, 0x05, 0x77, 0x98, 0x0e, 0x2c, 0x71, 0x6f, 0x25, 0xf1, 0xe6, 0xcd, 0xf4, 0x6f,
	0xdc, 0x4c, 0xcb, 0x3d, 0x84, 0x3f, 0x12, 0x78, 0xa5, 0x51, 0xc5, 0x11, 0xff, 0xff, 0xd7, 0xd1,
	0xf8, 0x6c, 0x9d, 0xf0, 0xf2, 0x22, 0xaa, 0x1c, 0xf0, 0x99, 0x77, 0xf1, 0x85, 0xfd, 0x6c, 0x3d,
	0x17, 0xd7, 0xd1, 0x13, 0x8a, 0x01, 0x7f, 0x2c, 0x65, 0x92, 0x6a, 0x07, 0x72, 0x98, 0x8d, 0xc3,
	0x7f, 0x08, 0xdc, 0x31, 0xa9, 0xdf, 0x8b, 0x53, 0x2e, 0x2e, 0x5f, 0x50, 0x31, 0xab, 0x8e, 0xd3,
	0x54, 0x67, 0x1f, 0xfa, 0xfc, 0x71, 0xce, 0xcf, 0x64, 0xd5, 0x6d, 0x3a, 0xa2, 0x77, 0xc1, 0xc5,
	0x8f, 0xb9, 0xd7, 0xf6, 0x97, 0xf2, 0xc9, 0xa5, 0xfa, 0xb8, 0xaa, 0x75, 0x3a, 0x06, 0x4f, 0x69,
	0x5f, 0xfa, 0xfd, 0x9b, 0xc0, 0x88, 0xc7, 0x12, 0x81, 0x1a, 0xa0, 0x6a, 0x13, 0x39, 0xcf, 0x90,
	0xef, 0xa6, 0x56, 0xb7, 0x8a, 0x69, 0x50, 0xfd, 0xbd, 0xa8, 0x4d, 0xd8, 0x9e, 0x43, 0xd6, 0x98,
	0x09, 0xdf, 0x05, 0xda, 0x50, 0xff, 0x88, 0x4b, 0xf5, 0x1f, 0xb6, 0xae, 0x07, 0x87, 0xdf, 0x13,
	0xa0, 0xd1, 0x4b, 0x6f, 0xb7, 0x46, 0xeb, 0x34, 0x8c, 0xf6, 0x35, 0xf3, 0xa8, 0xf4, 0x4f, 0x1c,
	0xb6, 0xaa, 0x49, 0x7b, 0xb3, 0x99, 0xbd, 0xae, 0x66, 0x3e, 0x7a, 0xf3, 0xc9, 0x75, 0xb0, 0xf1,
	0xc7, 0x75, 0xb0, 0xf1, 0xf4, 0x3a, 0x20, 0xdf, 0x2e, 0x02, 0xf2, 0xc3, 0x22, 0x20, 0xbf, 0x2c,
	0x02, 0xf2, 0x64, 0x11, 0x90, 0x3f, 0x17, 0x01, 0xf9, 0x7b, 0x11, 0x6c, 0x3c, 0x5d, 0x04, 0xe4,
	0xbb, 0xbf, 0x82, 0x8d, 0x49, 0x1f, 0x7f, 0x9b, 0xdf, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0x6b,
	0x50, 0x1d, 0xe4, 0x84, 0x0b, 0x00, 0x00,
}
