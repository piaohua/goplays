// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: actor_role.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import actor "github.com/AsynkronIT/protoactor-go/actor"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 登录设置连接
type SetLogin struct {
	Sender *actor.PID `protobuf:"bytes,1,opt,name=Sender" json:"Sender,omitempty"`
}

func (m *SetLogin) Reset()                    { *m = SetLogin{} }
func (*SetLogin) ProtoMessage()               {}
func (*SetLogin) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{0} }

func (m *SetLogin) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

type SetLogined struct {
	DbmsPid *actor.PID `protobuf:"bytes,1,opt,name=DbmsPid" json:"DbmsPid,omitempty"`
	RoomPid *actor.PID `protobuf:"bytes,2,opt,name=RoomPid" json:"RoomPid,omitempty"`
	RolePid *actor.PID `protobuf:"bytes,3,opt,name=RolePid" json:"RolePid,omitempty"`
	HallPid *actor.PID `protobuf:"bytes,4,opt,name=HallPid" json:"HallPid,omitempty"`
}

func (m *SetLogined) Reset()                    { *m = SetLogined{} }
func (*SetLogined) ProtoMessage()               {}
func (*SetLogined) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{1} }

func (m *SetLogined) GetDbmsPid() *actor.PID {
	if m != nil {
		return m.DbmsPid
	}
	return nil
}

func (m *SetLogined) GetRoomPid() *actor.PID {
	if m != nil {
		return m.RoomPid
	}
	return nil
}

func (m *SetLogined) GetRolePid() *actor.PID {
	if m != nil {
		return m.RolePid
	}
	return nil
}

func (m *SetLogined) GetHallPid() *actor.PID {
	if m != nil {
		return m.HallPid
	}
	return nil
}

// 登录大厅
type LoginHall struct {
	Userid   string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	NodeName string `protobuf:"bytes,2,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
}

func (m *LoginHall) Reset()                    { *m = LoginHall{} }
func (*LoginHall) ProtoMessage()               {}
func (*LoginHall) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{2} }

func (m *LoginHall) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LoginHall) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type LoginedHall struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *LoginedHall) Reset()                    { *m = LoginedHall{} }
func (*LoginedHall) ProtoMessage()               {}
func (*LoginedHall) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{3} }

func (m *LoginedHall) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 登录成功
type Login struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
}

func (m *Login) Reset()                    { *m = Login{} }
func (*Login) ProtoMessage()               {}
func (*Login) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{4} }

func (m *Login) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type Logined struct {
	Data []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Logined) Reset()                    { *m = Logined{} }
func (*Logined) ProtoMessage()               {}
func (*Logined) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{5} }

func (m *Logined) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 别处登录
type LoginElse struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
}

func (m *LoginElse) Reset()                    { *m = LoginElse{} }
func (*LoginElse) ProtoMessage()               {}
func (*LoginElse) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{6} }

func (m *LoginElse) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type LoginedElse struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
}

func (m *LoginedElse) Reset()                    { *m = LoginedElse{} }
func (*LoginedElse) ProtoMessage()               {}
func (*LoginedElse) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{7} }

func (m *LoginedElse) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

// 登出
type Logout struct {
	Sender *actor.PID `protobuf:"bytes,1,opt,name=Sender" json:"Sender,omitempty"`
	Userid string     `protobuf:"bytes,2,opt,name=Userid,proto3" json:"Userid,omitempty"`
}

func (m *Logout) Reset()                    { *m = Logout{} }
func (*Logout) ProtoMessage()               {}
func (*Logout) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{8} }

func (m *Logout) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Logout) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type Logouted struct {
	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *Logouted) Reset()                    { *m = Logouted{} }
func (*Logouted) ProtoMessage()               {}
func (*Logouted) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{9} }

func (m *Logouted) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 同步数据,(登录时,变更时)
type SyncUser struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *SyncUser) Reset()                    { *m = SyncUser{} }
func (*SyncUser) ProtoMessage()               {}
func (*SyncUser) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{10} }

func (m *SyncUser) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SyncUser) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 同步变动货币数据
type ChangeCurrency struct {
	Userid  string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Type    int32  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Coin    int64  `protobuf:"varint,3,opt,name=Coin,proto3" json:"Coin,omitempty"`
	Diamond int64  `protobuf:"varint,4,opt,name=Diamond,proto3" json:"Diamond,omitempty"`
	Chip    int64  `protobuf:"varint,5,opt,name=Chip,proto3" json:"Chip,omitempty"`
	Card    int64  `protobuf:"varint,6,opt,name=Card,proto3" json:"Card,omitempty"`
	Money   int64  `protobuf:"varint,7,opt,name=Money,proto3" json:"Money,omitempty"`
}

func (m *ChangeCurrency) Reset()                    { *m = ChangeCurrency{} }
func (*ChangeCurrency) ProtoMessage()               {}
func (*ChangeCurrency) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{11} }

func (m *ChangeCurrency) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *ChangeCurrency) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ChangeCurrency) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *ChangeCurrency) GetDiamond() int64 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *ChangeCurrency) GetChip() int64 {
	if m != nil {
		return m.Chip
	}
	return 0
}

func (m *ChangeCurrency) GetCard() int64 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *ChangeCurrency) GetMoney() int64 {
	if m != nil {
		return m.Money
	}
	return 0
}

// 房间离线同步结算变动货币数据
type OfflineCurrency struct {
	Userid  string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Type    int32  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Coin    int64  `protobuf:"varint,3,opt,name=Coin,proto3" json:"Coin,omitempty"`
	Diamond int64  `protobuf:"varint,4,opt,name=Diamond,proto3" json:"Diamond,omitempty"`
	Chip    int64  `protobuf:"varint,5,opt,name=Chip,proto3" json:"Chip,omitempty"`
	Card    int64  `protobuf:"varint,6,opt,name=Card,proto3" json:"Card,omitempty"`
	Money   int64  `protobuf:"varint,7,opt,name=Money,proto3" json:"Money,omitempty"`
}

func (m *OfflineCurrency) Reset()                    { *m = OfflineCurrency{} }
func (*OfflineCurrency) ProtoMessage()               {}
func (*OfflineCurrency) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{12} }

func (m *OfflineCurrency) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *OfflineCurrency) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *OfflineCurrency) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *OfflineCurrency) GetDiamond() int64 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *OfflineCurrency) GetChip() int64 {
	if m != nil {
		return m.Chip
	}
	return 0
}

func (m *OfflineCurrency) GetCard() int64 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *OfflineCurrency) GetMoney() int64 {
	if m != nil {
		return m.Money
	}
	return 0
}

// 同步变动货币数据(充值或后台操作等)
type PayCurrency struct {
	Userid  string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Type    int32  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Coin    int64  `protobuf:"varint,3,opt,name=Coin,proto3" json:"Coin,omitempty"`
	Diamond int64  `protobuf:"varint,4,opt,name=Diamond,proto3" json:"Diamond,omitempty"`
	Chip    int64  `protobuf:"varint,5,opt,name=Chip,proto3" json:"Chip,omitempty"`
	Card    int64  `protobuf:"varint,6,opt,name=Card,proto3" json:"Card,omitempty"`
	Money   int64  `protobuf:"varint,7,opt,name=Money,proto3" json:"Money,omitempty"`
}

func (m *PayCurrency) Reset()                    { *m = PayCurrency{} }
func (*PayCurrency) ProtoMessage()               {}
func (*PayCurrency) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{13} }

func (m *PayCurrency) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *PayCurrency) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PayCurrency) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *PayCurrency) GetDiamond() int64 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *PayCurrency) GetChip() int64 {
	if m != nil {
		return m.Chip
	}
	return 0
}

func (m *PayCurrency) GetCard() int64 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *PayCurrency) GetMoney() int64 {
	if m != nil {
		return m.Money
	}
	return 0
}

// 登录(验证登录)
type RoleLogin struct {
	Phone    string `protobuf:"bytes,1,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (m *RoleLogin) Reset()                    { *m = RoleLogin{} }
func (*RoleLogin) ProtoMessage()               {}
func (*RoleLogin) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{14} }

func (m *RoleLogin) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *RoleLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RoleLogined struct {
	Userid string  `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Error  ErrCode `protobuf:"varint,2,opt,name=Error,proto3,enum=pb.ErrCode" json:"Error,omitempty"`
}

func (m *RoleLogined) Reset()                    { *m = RoleLogined{} }
func (*RoleLogined) ProtoMessage()               {}
func (*RoleLogined) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{15} }

func (m *RoleLogined) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *RoleLogined) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 注册(验证注册)
type RoleRegist struct {
	Nickname   string `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Phone      string `protobuf:"bytes,2,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Password   string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	Smscode    string `protobuf:"bytes,4,opt,name=Smscode,proto3" json:"Smscode,omitempty"`
	Safetycode string `protobuf:"bytes,5,opt,name=Safetycode,proto3" json:"Safetycode,omitempty"`
}

func (m *RoleRegist) Reset()                    { *m = RoleRegist{} }
func (*RoleRegist) ProtoMessage()               {}
func (*RoleRegist) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{16} }

func (m *RoleRegist) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *RoleRegist) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *RoleRegist) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RoleRegist) GetSmscode() string {
	if m != nil {
		return m.Smscode
	}
	return ""
}

func (m *RoleRegist) GetSafetycode() string {
	if m != nil {
		return m.Safetycode
	}
	return ""
}

type RoleRegisted struct {
	Userid string  `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Error  ErrCode `protobuf:"varint,2,opt,name=Error,proto3,enum=pb.ErrCode" json:"Error,omitempty"`
}

func (m *RoleRegisted) Reset()                    { *m = RoleRegisted{} }
func (*RoleRegisted) ProtoMessage()               {}
func (*RoleRegisted) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{17} }

func (m *RoleRegisted) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *RoleRegisted) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 登录(验证登录)
type WxLogin struct {
	Wxuid    string `protobuf:"bytes,1,opt,name=Wxuid,proto3" json:"Wxuid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Photo    string `protobuf:"bytes,3,opt,name=Photo,proto3" json:"Photo,omitempty"`
	Sex      uint32 `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`
}

func (m *WxLogin) Reset()                    { *m = WxLogin{} }
func (*WxLogin) ProtoMessage()               {}
func (*WxLogin) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{18} }

func (m *WxLogin) GetWxuid() string {
	if m != nil {
		return m.Wxuid
	}
	return ""
}

func (m *WxLogin) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *WxLogin) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *WxLogin) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

type WxLogined struct {
	Userid   string  `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	IsRegist bool    `protobuf:"varint,2,opt,name=IsRegist,proto3" json:"IsRegist,omitempty"`
	Error    ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *WxLogined) Reset()                    { *m = WxLogined{} }
func (*WxLogined) ProtoMessage()               {}
func (*WxLogined) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{19} }

func (m *WxLogined) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *WxLogined) GetIsRegist() bool {
	if m != nil {
		return m.IsRegist
	}
	return false
}

func (m *WxLogined) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 玩家信息
type GetUserData struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
}

func (m *GetUserData) Reset()                    { *m = GetUserData{} }
func (*GetUserData) ProtoMessage()               {}
func (*GetUserData) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{20} }

func (m *GetUserData) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type GotUserData struct {
	Data  *UserData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Info  *TopInfo  `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Error ErrCode   `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *GotUserData) Reset()                    { *m = GotUserData{} }
func (*GotUserData) ProtoMessage()               {}
func (*GotUserData) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{21} }

func (m *GotUserData) GetData() *UserData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GotUserData) GetInfo() *TopInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *GotUserData) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 验证码注册
type SmscodeRegist struct {
	Type    uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Phone   string `protobuf:"bytes,2,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Smscode string `protobuf:"bytes,3,opt,name=Smscode,proto3" json:"Smscode,omitempty"`
	Expired int64  `protobuf:"varint,4,opt,name=Expired,proto3" json:"Expired,omitempty"`
	Ipaddr  string `protobuf:"bytes,5,opt,name=Ipaddr,proto3" json:"Ipaddr,omitempty"`
}

func (m *SmscodeRegist) Reset()                    { *m = SmscodeRegist{} }
func (*SmscodeRegist) ProtoMessage()               {}
func (*SmscodeRegist) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{22} }

func (m *SmscodeRegist) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SmscodeRegist) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *SmscodeRegist) GetSmscode() string {
	if m != nil {
		return m.Smscode
	}
	return ""
}

func (m *SmscodeRegist) GetExpired() int64 {
	if m != nil {
		return m.Expired
	}
	return 0
}

func (m *SmscodeRegist) GetIpaddr() string {
	if m != nil {
		return m.Ipaddr
	}
	return ""
}

type SmscodeRegisted struct {
	Smscode string  `protobuf:"bytes,1,opt,name=Smscode,proto3" json:"Smscode,omitempty"`
	Error   ErrCode `protobuf:"varint,2,opt,name=Error,proto3,enum=pb.ErrCode" json:"Error,omitempty"`
}

func (m *SmscodeRegisted) Reset()                    { *m = SmscodeRegisted{} }
func (*SmscodeRegisted) ProtoMessage()               {}
func (*SmscodeRegisted) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{23} }

func (m *SmscodeRegisted) GetSmscode() string {
	if m != nil {
		return m.Smscode
	}
	return ""
}

func (m *SmscodeRegisted) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 绑定手机
type RoleBuild struct {
	Nickname   string `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Phone      string `protobuf:"bytes,2,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Password   string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	Smscode    string `protobuf:"bytes,4,opt,name=Smscode,proto3" json:"Smscode,omitempty"`
	Safetycode string `protobuf:"bytes,5,opt,name=Safetycode,proto3" json:"Safetycode,omitempty"`
}

func (m *RoleBuild) Reset()                    { *m = RoleBuild{} }
func (*RoleBuild) ProtoMessage()               {}
func (*RoleBuild) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{24} }

func (m *RoleBuild) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *RoleBuild) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *RoleBuild) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RoleBuild) GetSmscode() string {
	if m != nil {
		return m.Smscode
	}
	return ""
}

func (m *RoleBuild) GetSafetycode() string {
	if m != nil {
		return m.Safetycode
	}
	return ""
}

type RoleBuilded struct {
	Userid string  `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Error  ErrCode `protobuf:"varint,2,opt,name=Error,proto3,enum=pb.ErrCode" json:"Error,omitempty"`
}

func (m *RoleBuilded) Reset()                    { *m = RoleBuilded{} }
func (*RoleBuilded) ProtoMessage()               {}
func (*RoleBuilded) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{25} }

func (m *RoleBuilded) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *RoleBuilded) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 游客登录(验证登录)
type TouristLogin struct {
	Account  string `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Registip string `protobuf:"bytes,3,opt,name=Registip,proto3" json:"Registip,omitempty"`
}

func (m *TouristLogin) Reset()                    { *m = TouristLogin{} }
func (*TouristLogin) ProtoMessage()               {}
func (*TouristLogin) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{26} }

func (m *TouristLogin) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *TouristLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *TouristLogin) GetRegistip() string {
	if m != nil {
		return m.Registip
	}
	return ""
}

type TouristLogined struct {
	Userid   string  `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	IsRegist bool    `protobuf:"varint,2,opt,name=IsRegist,proto3" json:"IsRegist,omitempty"`
	Error    ErrCode `protobuf:"varint,3,opt,name=Error,proto3,enum=pb.ErrCode" json:"Error,omitempty"`
}

func (m *TouristLogined) Reset()                    { *m = TouristLogined{} }
func (*TouristLogined) ProtoMessage()               {}
func (*TouristLogined) Descriptor() ([]byte, []int) { return fileDescriptorActorRole, []int{27} }

func (m *TouristLogined) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *TouristLogined) GetIsRegist() bool {
	if m != nil {
		return m.IsRegist
	}
	return false
}

func (m *TouristLogined) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*SetLogin)(nil), "pb.SetLogin")
	proto.RegisterType((*SetLogined)(nil), "pb.SetLogined")
	proto.RegisterType((*LoginHall)(nil), "pb.LoginHall")
	proto.RegisterType((*LoginedHall)(nil), "pb.LoginedHall")
	proto.RegisterType((*Login)(nil), "pb.Login")
	proto.RegisterType((*Logined)(nil), "pb.Logined")
	proto.RegisterType((*LoginElse)(nil), "pb.LoginElse")
	proto.RegisterType((*LoginedElse)(nil), "pb.LoginedElse")
	proto.RegisterType((*Logout)(nil), "pb.Logout")
	proto.RegisterType((*Logouted)(nil), "pb.Logouted")
	proto.RegisterType((*SyncUser)(nil), "pb.SyncUser")
	proto.RegisterType((*ChangeCurrency)(nil), "pb.ChangeCurrency")
	proto.RegisterType((*OfflineCurrency)(nil), "pb.OfflineCurrency")
	proto.RegisterType((*PayCurrency)(nil), "pb.PayCurrency")
	proto.RegisterType((*RoleLogin)(nil), "pb.RoleLogin")
	proto.RegisterType((*RoleLogined)(nil), "pb.RoleLogined")
	proto.RegisterType((*RoleRegist)(nil), "pb.RoleRegist")
	proto.RegisterType((*RoleRegisted)(nil), "pb.RoleRegisted")
	proto.RegisterType((*WxLogin)(nil), "pb.WxLogin")
	proto.RegisterType((*WxLogined)(nil), "pb.WxLogined")
	proto.RegisterType((*GetUserData)(nil), "pb.GetUserData")
	proto.RegisterType((*GotUserData)(nil), "pb.GotUserData")
	proto.RegisterType((*SmscodeRegist)(nil), "pb.SmscodeRegist")
	proto.RegisterType((*SmscodeRegisted)(nil), "pb.SmscodeRegisted")
	proto.RegisterType((*RoleBuild)(nil), "pb.RoleBuild")
	proto.RegisterType((*RoleBuilded)(nil), "pb.RoleBuilded")
	proto.RegisterType((*TouristLogin)(nil), "pb.TouristLogin")
	proto.RegisterType((*TouristLogined)(nil), "pb.TouristLogined")
}
func (this *SetLogin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetLogin)
	if !ok {
		that2, ok := that.(SetLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	return true
}
func (this *SetLogined) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetLogined)
	if !ok {
		that2, ok := that.(SetLogined)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DbmsPid.Equal(that1.DbmsPid) {
		return false
	}
	if !this.RoomPid.Equal(that1.RoomPid) {
		return false
	}
	if !this.RolePid.Equal(that1.RolePid) {
		return false
	}
	if !this.HallPid.Equal(that1.HallPid) {
		return false
	}
	return true
}
func (this *LoginHall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginHall)
	if !ok {
		that2, ok := that.(LoginHall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.NodeName != that1.NodeName {
		return false
	}
	return true
}
func (this *LoginedHall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginedHall)
	if !ok {
		that2, ok := that.(LoginedHall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *Login) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Login)
	if !ok {
		that2, ok := that.(Login)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *Logined) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Logined)
	if !ok {
		that2, ok := that.(Logined)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *LoginElse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginElse)
	if !ok {
		that2, ok := that.(LoginElse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *LoginedElse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginedElse)
	if !ok {
		that2, ok := that.(LoginedElse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *Logout) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Logout)
	if !ok {
		that2, ok := that.(Logout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *Logouted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Logouted)
	if !ok {
		that2, ok := that.(Logouted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *SyncUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncUser)
	if !ok {
		that2, ok := that.(SyncUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *ChangeCurrency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeCurrency)
	if !ok {
		that2, ok := that.(ChangeCurrency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if this.Chip != that1.Chip {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Money != that1.Money {
		return false
	}
	return true
}
func (this *OfflineCurrency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OfflineCurrency)
	if !ok {
		that2, ok := that.(OfflineCurrency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if this.Chip != that1.Chip {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Money != that1.Money {
		return false
	}
	return true
}
func (this *PayCurrency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PayCurrency)
	if !ok {
		that2, ok := that.(PayCurrency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if this.Chip != that1.Chip {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Money != that1.Money {
		return false
	}
	return true
}
func (this *RoleLogin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleLogin)
	if !ok {
		that2, ok := that.(RoleLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *RoleLogined) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleLogined)
	if !ok {
		that2, ok := that.(RoleLogined)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *RoleRegist) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleRegist)
	if !ok {
		that2, ok := that.(RoleRegist)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Smscode != that1.Smscode {
		return false
	}
	if this.Safetycode != that1.Safetycode {
		return false
	}
	return true
}
func (this *RoleRegisted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleRegisted)
	if !ok {
		that2, ok := that.(RoleRegisted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *WxLogin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WxLogin)
	if !ok {
		that2, ok := that.(WxLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Wxuid != that1.Wxuid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	return true
}
func (this *WxLogined) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WxLogined)
	if !ok {
		that2, ok := that.(WxLogined)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.IsRegist != that1.IsRegist {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *GetUserData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserData)
	if !ok {
		that2, ok := that.(GetUserData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *GotUserData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GotUserData)
	if !ok {
		that2, ok := that.(GotUserData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SmscodeRegist) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmscodeRegist)
	if !ok {
		that2, ok := that.(SmscodeRegist)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Smscode != that1.Smscode {
		return false
	}
	if this.Expired != that1.Expired {
		return false
	}
	if this.Ipaddr != that1.Ipaddr {
		return false
	}
	return true
}
func (this *SmscodeRegisted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmscodeRegisted)
	if !ok {
		that2, ok := that.(SmscodeRegisted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Smscode != that1.Smscode {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *RoleBuild) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleBuild)
	if !ok {
		that2, ok := that.(RoleBuild)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Smscode != that1.Smscode {
		return false
	}
	if this.Safetycode != that1.Safetycode {
		return false
	}
	return true
}
func (this *RoleBuilded) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleBuilded)
	if !ok {
		that2, ok := that.(RoleBuilded)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *TouristLogin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TouristLogin)
	if !ok {
		that2, ok := that.(TouristLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Account != that1.Account {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Registip != that1.Registip {
		return false
	}
	return true
}
func (this *TouristLogined) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TouristLogined)
	if !ok {
		that2, ok := that.(TouristLogined)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.IsRegist != that1.IsRegist {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SetLogin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SetLogin{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetLogined) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SetLogined{")
	if this.DbmsPid != nil {
		s = append(s, "DbmsPid: "+fmt.Sprintf("%#v", this.DbmsPid)+",\n")
	}
	if this.RoomPid != nil {
		s = append(s, "RoomPid: "+fmt.Sprintf("%#v", this.RoomPid)+",\n")
	}
	if this.RolePid != nil {
		s = append(s, "RolePid: "+fmt.Sprintf("%#v", this.RolePid)+",\n")
	}
	if this.HallPid != nil {
		s = append(s, "HallPid: "+fmt.Sprintf("%#v", this.HallPid)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginHall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.LoginHall{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "NodeName: "+fmt.Sprintf("%#v", this.NodeName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginedHall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.LoginedHall{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Login) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.Login{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Logined) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.Logined{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginElse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.LoginElse{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginedElse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.LoginedElse{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Logout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Logout{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Logouted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.Logouted{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyncUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SyncUser{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChangeCurrency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.ChangeCurrency{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "Chip: "+fmt.Sprintf("%#v", this.Chip)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Money: "+fmt.Sprintf("%#v", this.Money)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OfflineCurrency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.OfflineCurrency{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "Chip: "+fmt.Sprintf("%#v", this.Chip)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Money: "+fmt.Sprintf("%#v", this.Money)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PayCurrency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.PayCurrency{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "Chip: "+fmt.Sprintf("%#v", this.Chip)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Money: "+fmt.Sprintf("%#v", this.Money)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoleLogin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RoleLogin{")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoleLogined) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RoleLogined{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoleRegist) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.RoleRegist{")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Smscode: "+fmt.Sprintf("%#v", this.Smscode)+",\n")
	s = append(s, "Safetycode: "+fmt.Sprintf("%#v", this.Safetycode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoleRegisted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RoleRegisted{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WxLogin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.WxLogin{")
	s = append(s, "Wxuid: "+fmt.Sprintf("%#v", this.Wxuid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WxLogined) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.WxLogined{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "IsRegist: "+fmt.Sprintf("%#v", this.IsRegist)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetUserData{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GotUserData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.GotUserData{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SmscodeRegist) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SmscodeRegist{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Smscode: "+fmt.Sprintf("%#v", this.Smscode)+",\n")
	s = append(s, "Expired: "+fmt.Sprintf("%#v", this.Expired)+",\n")
	s = append(s, "Ipaddr: "+fmt.Sprintf("%#v", this.Ipaddr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SmscodeRegisted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SmscodeRegisted{")
	s = append(s, "Smscode: "+fmt.Sprintf("%#v", this.Smscode)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoleBuild) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.RoleBuild{")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Smscode: "+fmt.Sprintf("%#v", this.Smscode)+",\n")
	s = append(s, "Safetycode: "+fmt.Sprintf("%#v", this.Safetycode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoleBuilded) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RoleBuilded{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TouristLogin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.TouristLogin{")
	s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Registip: "+fmt.Sprintf("%#v", this.Registip)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TouristLogined) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.TouristLogined{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "IsRegist: "+fmt.Sprintf("%#v", this.IsRegist)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringActorRole(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SetLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Sender.Size()))
		n1, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SetLogined) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLogined) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DbmsPid != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.DbmsPid.Size()))
		n2, err := m.DbmsPid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.RoomPid != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.RoomPid.Size()))
		n3, err := m.RoomPid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.RolePid != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.RolePid.Size()))
		n4, err := m.RolePid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.HallPid != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.HallPid.Size()))
		n5, err := m.HallPid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *LoginHall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginHall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.NodeName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	return i, nil
}

func (m *LoginedHall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginedHall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *Login) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Login) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *Logined) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Logined) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *LoginElse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginElse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *LoginedElse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginedElse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *Logout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Logout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Sender.Size()))
		n6, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *Logouted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Logouted) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *SyncUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ChangeCurrency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeCurrency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Type))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Coin))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Diamond))
	}
	if m.Chip != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Chip))
	}
	if m.Card != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Card))
	}
	if m.Money != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Money))
	}
	return i, nil
}

func (m *OfflineCurrency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfflineCurrency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Type))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Coin))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Diamond))
	}
	if m.Chip != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Chip))
	}
	if m.Card != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Card))
	}
	if m.Money != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Money))
	}
	return i, nil
}

func (m *PayCurrency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayCurrency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Type))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Coin))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Diamond))
	}
	if m.Chip != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Chip))
	}
	if m.Card != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Card))
	}
	if m.Money != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Money))
	}
	return i, nil
}

func (m *RoleLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *RoleLogined) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleLogined) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *RoleRegist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleRegist) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nickname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Smscode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Smscode)))
		i += copy(dAtA[i:], m.Smscode)
	}
	if len(m.Safetycode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Safetycode)))
		i += copy(dAtA[i:], m.Safetycode)
	}
	return i, nil
}

func (m *RoleRegisted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleRegisted) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *WxLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Wxuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Wxuid)))
		i += copy(dAtA[i:], m.Wxuid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Sex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Sex))
	}
	return i, nil
}

func (m *WxLogined) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxLogined) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.IsRegist {
		dAtA[i] = 0x10
		i++
		if m.IsRegist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *GetUserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *GotUserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GotUserData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Data.Size()))
		n7, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Info != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Info.Size()))
		n8, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SmscodeRegist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmscodeRegist) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Type))
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.Smscode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Smscode)))
		i += copy(dAtA[i:], m.Smscode)
	}
	if m.Expired != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Expired))
	}
	if len(m.Ipaddr) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Ipaddr)))
		i += copy(dAtA[i:], m.Ipaddr)
	}
	return i, nil
}

func (m *SmscodeRegisted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmscodeRegisted) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Smscode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Smscode)))
		i += copy(dAtA[i:], m.Smscode)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *RoleBuild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleBuild) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nickname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Smscode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Smscode)))
		i += copy(dAtA[i:], m.Smscode)
	}
	if len(m.Safetycode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Safetycode)))
		i += copy(dAtA[i:], m.Safetycode)
	}
	return i, nil
}

func (m *RoleBuilded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleBuilded) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *TouristLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TouristLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Registip) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Registip)))
		i += copy(dAtA[i:], m.Registip)
	}
	return i, nil
}

func (m *TouristLogined) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TouristLogined) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.IsRegist {
		dAtA[i] = 0x10
		i++
		if m.IsRegist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorRole(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeVarintActorRole(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SetLogin) Size() (n int) {
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *SetLogined) Size() (n int) {
	var l int
	_ = l
	if m.DbmsPid != nil {
		l = m.DbmsPid.Size()
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.RoomPid != nil {
		l = m.RoomPid.Size()
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.RolePid != nil {
		l = m.RolePid.Size()
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.HallPid != nil {
		l = m.HallPid.Size()
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *LoginHall) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *LoginedHall) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovActorRole(uint64(m.Error))
	}
	return n
}

func (m *Login) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *Logined) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *LoginElse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *LoginedElse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *Logout) Size() (n int) {
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *Logouted) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *SyncUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *ChangeCurrency) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovActorRole(uint64(m.Type))
	}
	if m.Coin != 0 {
		n += 1 + sovActorRole(uint64(m.Coin))
	}
	if m.Diamond != 0 {
		n += 1 + sovActorRole(uint64(m.Diamond))
	}
	if m.Chip != 0 {
		n += 1 + sovActorRole(uint64(m.Chip))
	}
	if m.Card != 0 {
		n += 1 + sovActorRole(uint64(m.Card))
	}
	if m.Money != 0 {
		n += 1 + sovActorRole(uint64(m.Money))
	}
	return n
}

func (m *OfflineCurrency) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovActorRole(uint64(m.Type))
	}
	if m.Coin != 0 {
		n += 1 + sovActorRole(uint64(m.Coin))
	}
	if m.Diamond != 0 {
		n += 1 + sovActorRole(uint64(m.Diamond))
	}
	if m.Chip != 0 {
		n += 1 + sovActorRole(uint64(m.Chip))
	}
	if m.Card != 0 {
		n += 1 + sovActorRole(uint64(m.Card))
	}
	if m.Money != 0 {
		n += 1 + sovActorRole(uint64(m.Money))
	}
	return n
}

func (m *PayCurrency) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovActorRole(uint64(m.Type))
	}
	if m.Coin != 0 {
		n += 1 + sovActorRole(uint64(m.Coin))
	}
	if m.Diamond != 0 {
		n += 1 + sovActorRole(uint64(m.Diamond))
	}
	if m.Chip != 0 {
		n += 1 + sovActorRole(uint64(m.Chip))
	}
	if m.Card != 0 {
		n += 1 + sovActorRole(uint64(m.Card))
	}
	if m.Money != 0 {
		n += 1 + sovActorRole(uint64(m.Money))
	}
	return n
}

func (m *RoleLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *RoleLogined) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovActorRole(uint64(m.Error))
	}
	return n
}

func (m *RoleRegist) Size() (n int) {
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Smscode)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Safetycode)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *RoleRegisted) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovActorRole(uint64(m.Error))
	}
	return n
}

func (m *WxLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Wxuid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovActorRole(uint64(m.Sex))
	}
	return n
}

func (m *WxLogined) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.IsRegist {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovActorRole(uint64(m.Error))
	}
	return n
}

func (m *GetUserData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *GotUserData) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovActorRole(uint64(m.Error))
	}
	return n
}

func (m *SmscodeRegist) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovActorRole(uint64(m.Type))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Smscode)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.Expired != 0 {
		n += 1 + sovActorRole(uint64(m.Expired))
	}
	l = len(m.Ipaddr)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *SmscodeRegisted) Size() (n int) {
	var l int
	_ = l
	l = len(m.Smscode)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovActorRole(uint64(m.Error))
	}
	return n
}

func (m *RoleBuild) Size() (n int) {
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Smscode)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Safetycode)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *RoleBuilded) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovActorRole(uint64(m.Error))
	}
	return n
}

func (m *TouristLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	l = len(m.Registip)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	return n
}

func (m *TouristLogined) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorRole(uint64(l))
	}
	if m.IsRegist {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovActorRole(uint64(m.Error))
	}
	return n
}

func sovActorRole(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozActorRole(x uint64) (n int) {
	return sovActorRole(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SetLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetLogin{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetLogined) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetLogined{`,
		`DbmsPid:` + strings.Replace(fmt.Sprintf("%v", this.DbmsPid), "PID", "actor.PID", 1) + `,`,
		`RoomPid:` + strings.Replace(fmt.Sprintf("%v", this.RoomPid), "PID", "actor.PID", 1) + `,`,
		`RolePid:` + strings.Replace(fmt.Sprintf("%v", this.RolePid), "PID", "actor.PID", 1) + `,`,
		`HallPid:` + strings.Replace(fmt.Sprintf("%v", this.HallPid), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginHall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginHall{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginedHall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginedHall{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Login) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Login{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Logined) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Logined{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginElse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginElse{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginedElse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginedElse{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Logout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Logout{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Logouted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Logouted{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyncUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyncUser{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangeCurrency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangeCurrency{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Chip:` + fmt.Sprintf("%v", this.Chip) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Money:` + fmt.Sprintf("%v", this.Money) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OfflineCurrency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OfflineCurrency{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Chip:` + fmt.Sprintf("%v", this.Chip) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Money:` + fmt.Sprintf("%v", this.Money) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PayCurrency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PayCurrency{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Chip:` + fmt.Sprintf("%v", this.Chip) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Money:` + fmt.Sprintf("%v", this.Money) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoleLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoleLogin{`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoleLogined) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoleLogined{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoleRegist) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoleRegist{`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Smscode:` + fmt.Sprintf("%v", this.Smscode) + `,`,
		`Safetycode:` + fmt.Sprintf("%v", this.Safetycode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoleRegisted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoleRegisted{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WxLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WxLogin{`,
		`Wxuid:` + fmt.Sprintf("%v", this.Wxuid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WxLogined) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WxLogined{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`IsRegist:` + fmt.Sprintf("%v", this.IsRegist) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserData{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GotUserData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GotUserData{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "UserData", "UserData", 1) + `,`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "TopInfo", "TopInfo", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmscodeRegist) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmscodeRegist{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Smscode:` + fmt.Sprintf("%v", this.Smscode) + `,`,
		`Expired:` + fmt.Sprintf("%v", this.Expired) + `,`,
		`Ipaddr:` + fmt.Sprintf("%v", this.Ipaddr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmscodeRegisted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmscodeRegisted{`,
		`Smscode:` + fmt.Sprintf("%v", this.Smscode) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoleBuild) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoleBuild{`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Smscode:` + fmt.Sprintf("%v", this.Smscode) + `,`,
		`Safetycode:` + fmt.Sprintf("%v", this.Safetycode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoleBuilded) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoleBuilded{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TouristLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TouristLogin{`,
		`Account:` + fmt.Sprintf("%v", this.Account) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Registip:` + fmt.Sprintf("%v", this.Registip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TouristLogined) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TouristLogined{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`IsRegist:` + fmt.Sprintf("%v", this.IsRegist) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringActorRole(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SetLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetLogined) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLogined: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLogined: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbmsPid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DbmsPid == nil {
				m.DbmsPid = &actor.PID{}
			}
			if err := m.DbmsPid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomPid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoomPid == nil {
				m.RoomPid = &actor.PID{}
			}
			if err := m.RoomPid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RolePid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RolePid == nil {
				m.RolePid = &actor.PID{}
			}
			if err := m.RolePid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HallPid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HallPid == nil {
				m.HallPid = &actor.PID{}
			}
			if err := m.HallPid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginHall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginHall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginHall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginedHall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginedHall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginedHall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Login) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Login: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Login: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Logined) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Logined: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Logined: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginElse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginElse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginElse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginedElse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginedElse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginedElse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Logout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Logout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Logout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Logouted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Logouted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Logouted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeCurrency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeCurrency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeCurrency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chip", wireType)
			}
			m.Chip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chip |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfflineCurrency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfflineCurrency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfflineCurrency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chip", wireType)
			}
			m.Chip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chip |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayCurrency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayCurrency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayCurrency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chip", wireType)
			}
			m.Chip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chip |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleLogined) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleLogined: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleLogined: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleRegist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleRegist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleRegist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Smscode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Smscode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Safetycode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Safetycode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleRegisted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleRegisted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleRegisted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wxuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wxuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxLogined) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxLogined: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxLogined: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegist = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GotUserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GotUserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GotUserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &UserData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &TopInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmscodeRegist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmscodeRegist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmscodeRegist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Smscode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Smscode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			m.Expired = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expired |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipaddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipaddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmscodeRegisted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmscodeRegisted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmscodeRegisted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Smscode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Smscode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleBuild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleBuild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleBuild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Smscode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Smscode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Safetycode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Safetycode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleBuilded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleBuilded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleBuilded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TouristLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TouristLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TouristLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TouristLogined) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TouristLogined: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TouristLogined: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegist = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActorRole(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActorRole
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorRole
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthActorRole
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowActorRole
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActorRole(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthActorRole = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActorRole   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("actor_role.proto", fileDescriptorActorRole) }

var fileDescriptorActorRole = []byte{
	// 883 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x8f, 0xda, 0x46,
	0x14, 0x67, 0x00, 0xf3, 0xe7, 0x41, 0x76, 0x57, 0x56, 0x54, 0x21, 0xa4, 0x3a, 0xc9, 0x34, 0x91,
	0x7a, 0x68, 0xd9, 0x2a, 0x95, 0x72, 0xab, 0xaa, 0x04, 0x50, 0x82, 0x94, 0x6c, 0x91, 0xa1, 0xca,
	0x71, 0x6b, 0xec, 0xc1, 0x58, 0xc1, 0x33, 0xd6, 0xd8, 0x56, 0xe1, 0xd6, 0x4b, 0xef, 0x95, 0xda,
	0x8f, 0xd0, 0x4a, 0xe9, 0x37, 0xe9, 0x31, 0xc7, 0x1e, 0xbb, 0xf4, 0xd2, 0x63, 0x3e, 0x42, 0x35,
	0x7f, 0x6c, 0x40, 0xc1, 0x68, 0x95, 0xbd, 0xec, 0x6d, 0x7e, 0xf3, 0xfe, 0xcc, 0xef, 0xf7, 0xfc,
	0xde, 0x03, 0x38, 0x73, 0xdc, 0x84, 0xf1, 0x4b, 0xce, 0x96, 0xa4, 0x17, 0x71, 0x96, 0x30, 0xb3,
	0x1c, 0xcd, 0xba, 0x4f, 0xfc, 0x20, 0x59, 0xa4, 0xb3, 0x9e, 0xcb, 0xc2, 0xf3, 0xa7, 0xf1, 0x9a,
	0xbe, 0xe1, 0x8c, 0x8e, 0xa6, 0xe7, 0xd2, 0x41, 0x06, 0x7c, 0xe9, 0xb3, 0x73, 0x79, 0x50, 0x77,
	0xb1, 0x8a, 0xed, 0x9e, 0xfa, 0x4e, 0x48, 0x2e, 0x5d, 0xe6, 0xe9, 0x64, 0xdd, 0xb3, 0x28, 0x9d,
	0x5d, 0x86, 0xcc, 0x4b, 0xb3, 0xf4, 0xb8, 0x07, 0x8d, 0x09, 0x49, 0x5e, 0x32, 0x3f, 0xa0, 0x26,
	0x86, 0xda, 0x84, 0x50, 0x8f, 0xf0, 0x0e, 0xba, 0x8f, 0x3e, 0x6f, 0x3d, 0x86, 0x9e, 0xcc, 0xd9,
	0x1b, 0x8f, 0x06, 0xb6, 0xb6, 0xe0, 0xdf, 0x11, 0x40, 0x16, 0x40, 0x3c, 0xf3, 0x21, 0xd4, 0x07,
	0xb3, 0x30, 0x1e, 0x07, 0xde, 0x81, 0x98, 0xcc, 0x24, 0xbc, 0x6c, 0xc6, 0x42, 0xe1, 0x55, 0xfe,
	0xd0, 0x4b, 0x9b, 0x94, 0xd7, 0x92, 0x08, 0xaf, 0xca, 0x21, 0x2f, 0x69, 0x12, 0x5e, 0x2f, 0x9c,
	0xe5, 0x52, 0x78, 0x55, 0x3f, 0xf4, 0xd2, 0x26, 0xfc, 0x2d, 0x34, 0x25, 0x45, 0x81, 0xcd, 0x4f,
	0xa0, 0xf6, 0x7d, 0x4c, 0xb8, 0xe6, 0xd8, 0xb4, 0x35, 0x32, 0xbb, 0xd0, 0xb8, 0x60, 0x1e, 0xb9,
	0x70, 0x42, 0x22, 0x79, 0x35, 0xed, 0x1c, 0xe3, 0xaf, 0xa0, 0xa5, 0x35, 0xca, 0x14, 0x0f, 0xc0,
	0x20, 0x9c, 0x33, 0x55, 0x99, 0x93, 0xc7, 0xad, 0x5e, 0x34, 0xeb, 0x0d, 0x39, 0xef, 0x33, 0x8f,
	0xd8, 0xca, 0x82, 0xef, 0x81, 0xa1, 0xca, 0x58, 0xf0, 0x1c, 0xfe, 0x14, 0xea, 0x59, 0xd9, 0x4c,
	0xa8, 0x0e, 0x9c, 0xc4, 0x91, 0x3a, 0xdb, 0xb6, 0x3c, 0xe3, 0xcf, 0x34, 0xe5, 0xe1, 0x32, 0x26,
	0x85, 0x39, 0x1e, 0xe5, 0xb4, 0x8e, 0xba, 0x0d, 0xa0, 0xf6, 0x92, 0xf9, 0x2c, 0x4d, 0xae, 0xf3,
	0x4d, 0x77, 0xb2, 0x94, 0xf7, 0xb2, 0x3c, 0x84, 0x86, 0xca, 0x42, 0x3c, 0xb3, 0x03, 0xf5, 0x57,
	0x24, 0x8e, 0x1d, 0x9f, 0xe8, 0xa7, 0x32, 0x88, 0x9f, 0x40, 0x63, 0xb2, 0xa6, 0xae, 0x88, 0x29,
	0xac, 0x74, 0xa6, 0xb7, 0xbc, 0xa3, 0xf7, 0x2d, 0x82, 0x93, 0xfe, 0xc2, 0xa1, 0x3e, 0xe9, 0xa7,
	0x9c, 0x13, 0xea, 0xae, 0x8f, 0x85, 0x4f, 0xd7, 0x91, 0xfa, 0x48, 0x86, 0x2d, 0xcf, 0xe2, 0xae,
	0xcf, 0x02, 0x2a, 0x4b, 0x58, 0xb1, 0xe5, 0x59, 0x90, 0x1c, 0x04, 0x4e, 0xc8, 0xa8, 0xea, 0x8d,
	0x8a, 0x9d, 0x41, 0xe9, 0xbd, 0x08, 0xa2, 0x8e, 0xa1, 0xbd, 0x17, 0x41, 0x24, 0xef, 0x1c, 0xee,
	0x75, 0x6a, 0xfa, 0xce, 0xe1, 0x9e, 0x79, 0x17, 0x8c, 0x57, 0x8c, 0x92, 0x75, 0xa7, 0x2e, 0x2f,
	0x15, 0xc0, 0x7f, 0x22, 0x38, 0xfd, 0x6e, 0x3e, 0x5f, 0x06, 0xf4, 0xf6, 0x73, 0xfd, 0x03, 0x41,
	0x6b, 0xec, 0xac, 0x6f, 0x3d, 0xcf, 0x6f, 0xa0, 0x29, 0x46, 0x5a, 0x8d, 0xcc, 0x5d, 0x30, 0xc6,
	0x0b, 0x46, 0xb3, 0xde, 0x52, 0x40, 0xcc, 0xe7, 0xd8, 0x89, 0xe3, 0x1f, 0x19, 0xcf, 0x3a, 0x33,
	0xc7, 0xf8, 0x05, 0xb4, 0xf2, 0x70, 0xe2, 0x15, 0xaa, 0x7c, 0x00, 0xc6, 0x50, 0xce, 0x6d, 0xf9,
	0xc0, 0xdc, 0x4a, 0x0b, 0xfe, 0x0d, 0x01, 0x88, 0x54, 0x36, 0xf1, 0x83, 0x38, 0x91, 0x4b, 0x21,
	0x70, 0xdf, 0x50, 0xb1, 0x14, 0x90, 0x5e, 0x0a, 0x1a, 0x6f, 0x69, 0x96, 0x8b, 0x68, 0x56, 0xf6,
	0x69, 0x8a, 0xea, 0x4d, 0xc2, 0x58, 0x6c, 0x60, 0x59, 0xbd, 0xa6, 0x9d, 0x41, 0xd3, 0x02, 0x98,
	0x38, 0x73, 0x92, 0xac, 0xa5, 0xd1, 0x90, 0xc6, 0x9d, 0x1b, 0x3c, 0x82, 0xf6, 0x96, 0xd5, 0xcd,
	0x14, 0xba, 0x50, 0x7f, 0xbd, 0xca, 0x0b, 0xfd, 0x7a, 0x95, 0xe6, 0x49, 0x14, 0xd8, 0xd3, 0x5c,
	0x3e, 0xa8, 0x39, 0x61, 0x5a, 0x9a, 0x02, 0xe6, 0x19, 0x54, 0x26, 0x64, 0x25, 0x35, 0xdd, 0xb1,
	0xc5, 0x11, 0xcf, 0xa0, 0xa9, 0x1f, 0x39, 0x42, 0xb6, 0x0b, 0x8d, 0x51, 0xac, 0x24, 0xc9, 0x87,
	0x1a, 0x76, 0x8e, 0xb7, 0x2b, 0xb6, 0x52, 0xb8, 0x62, 0x1f, 0x41, 0xeb, 0x39, 0x49, 0x44, 0x2e,
	0xb1, 0x41, 0x0a, 0xb7, 0x5f, 0x0c, 0xad, 0xe7, 0x6c, 0xeb, 0x76, 0x1f, 0xaa, 0x9e, 0x58, 0x3e,
	0x6a, 0x01, 0xb6, 0x45, 0xde, 0xcc, 0x66, 0x4b, 0x8b, 0x79, 0x0f, 0xaa, 0x01, 0x9d, 0x33, 0xfd,
	0xe3, 0x24, 0x5f, 0x9e, 0xb2, 0x68, 0x44, 0xe7, 0xcc, 0x96, 0x86, 0xeb, 0x70, 0xfb, 0x19, 0xc1,
	0x1d, 0xfd, 0x6d, 0xb5, 0xa0, 0x6c, 0xc2, 0x90, 0x2c, 0x92, 0x9a, 0xb0, 0xc3, 0x1d, 0xb4, 0xd3,
	0x25, 0x95, 0xfd, 0x2e, 0xe9, 0x40, 0x7d, 0xb8, 0x8a, 0x02, 0x4e, 0xf2, 0xe9, 0xd3, 0x50, 0x88,
	0x1f, 0x45, 0x8e, 0xe7, 0x71, 0xdd, 0x3b, 0x1a, 0xe1, 0x0b, 0x38, 0xdd, 0xa3, 0x41, 0xf6, 0x9a,
	0x10, 0xed, 0xa7, 0xbf, 0x46, 0xf3, 0xfc, 0x8a, 0xd4, 0xa0, 0x3e, 0x4b, 0x83, 0xa5, 0x77, 0x6b,
	0xa6, 0x43, 0x8f, 0xbf, 0x24, 0x75, 0xb3, 0xe1, 0xf8, 0x01, 0xda, 0x53, 0x96, 0xf2, 0x20, 0xd6,
	0x7f, 0x82, 0x3a, 0x50, 0x7f, 0xea, 0xba, 0x2c, 0xa5, 0x49, 0x56, 0x2c, 0x0d, 0x8f, 0xad, 0x23,
	0x61, 0x53, 0xe5, 0x0e, 0xa2, 0x4c, 0x65, 0x86, 0xb1, 0x0f, 0x27, 0xbb, 0x2f, 0x7c, 0xfc, 0x78,
	0x0c, 0x0b, 0x5b, 0x50, 0x5a, 0x9e, 0x7d, 0xf1, 0xee, 0xca, 0x2a, 0xfd, 0x7d, 0x65, 0x95, 0xde,
	0x5f, 0x59, 0xe8, 0xa7, 0x8d, 0x85, 0xde, 0x6e, 0x2c, 0xf4, 0xd7, 0xc6, 0x42, 0xef, 0x36, 0x16,
	0xfa, 0x67, 0x63, 0xa1, 0xff, 0x36, 0x56, 0xe9, 0xfd, 0xc6, 0x42, 0xbf, 0xfc, 0x6b, 0x95, 0x66,
	0x35, 0xf9, 0x07, 0xf0, 0xeb, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x13, 0x8c, 0xdb, 0x7d, 0x73,
	0x0a, 0x00, 0x00,
}
