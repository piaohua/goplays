// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: actor_desk.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		actor_desk.proto
		actor_gate.proto
		actor_huiyin.proto
		actor_logger.proto
		actor_node.proto
		actor_pay.proto
		actor_robot.proto
		actor_role.proto
		actor_web.proto
		game_buy.proto
		game_chat.proto
		game_code.proto
		game_login.proto
		game_user.proto
		huiyin_room.proto
		huiyin_user.proto
		pub_huiyin.proto
		pub_module.proto

	It has these top-level messages:
		MatchDesk
		MatchedDesk
		GenDesk
		GenedDesk
		AddDesk
		AddedDesk
		CloseDesk
		ClosedDesk
		EnterDesk
		EnteredDesk
		JoinDesk
		JoinedDesk
		LeaveDesk
		LeftDesk
		PrintDesk
		SetRecord
		LoginGate
		LoginedGate
		Login2Gate
		Logined2Gate
		SelectGate
		SelectedGate
		LoginSuccess
		LogoutGate
		LogoutedGate
		OfflineStop
		HuiYinOpenTime
		HuiYinOpenedTime
		PushDeskState
		OfflineDesk
		Pk10RecordLog
		Pk10TrendLog
		TrendResult
		Pk10GameLog
		ResultRecord
		FeeResult
		FeeDetails
		Pk10UseridLog
		UseridDetails
		LogRegist
		LogLogin
		LogLogout
		LogDiamond
		LogCoin
		LogCard
		LogChip
		LogBuildAgency
		LogOnline
		LogExpect
		Request
		Response
		Connect
		Connected
		Disconnect
		Disconnected
		ServeStart
		ServeStarted
		ServeStop
		ServeStoped
		ServeClose
		GetNode
		GotNode
		Tick
		ApplePay
		ApplePaid
		WxpayCallback
		WxpayGoods
		RobotMsg
		RobotLogin
		RobotReLogin
		RobotLogout
		RobotStop
		RobotRoomList
		RobotEnterRoom
		RobotAllot
		RobotFake
		SetLogin
		SetLogined
		LoginHall
		LoginedHall
		Login
		Logined
		LoginElse
		LoginedElse
		Logout
		Logouted
		SyncUser
		ChangeCurrency
		OfflineCurrency
		PayCurrency
		RoleLogin
		RoleLogined
		RoleRegist
		RoleRegisted
		WxLogin
		WxLogined
		GetUserData
		GotUserData
		SmscodeRegist
		SmscodeRegisted
		RoleBuild
		RoleBuilded
		TouristLogin
		TouristLogined
		SyncConfig
		GetConfig
		WebRequest
		WebResponse
		GetNumber
		GotNumber
		CBuy
		SBuy
		CWxpayOrder
		SWxpayOrder
		CWxpayQuery
		SWxpayQuery
		CApplePay
		SApplePay
		CShop
		SShop
		Shop
		CJtpayOrder
		SJtpayOrder
		CChatText
		SChatText
		CChatVoice
		SChatVoice
		SBroadcast
		CNotice
		SNotice
		Notice
		CLogin
		SLogin
		CRegist
		SRegist
		CWxLogin
		SWxLogin
		SLoginOut
		CResetPwd
		SResetPwd
		CTourist
		STourist
		CPing
		SPing
		CUserData
		SUserData
		CGetCurrency
		SGetCurrency
		SPushCurrency
		CHuiYinEnterRoom
		SHuiYinEnterRoom
		SHuiYinCamein
		CHuiYinRoomRoles
		SHuiYinRoomRoles
		CHuiYinLeave
		SHuiYinLeave
		CHuiYinSit
		SHuiYinSit
		CHuiYinRoomBet
		SHuiYinRoomBet
		CHuiYinDealer
		SHuiYinDealer
		CHuiYinDealerList
		SHuiYinDealerList
		SHuiYinPushDealer
		SHuiYinPushBeDealer
		CHuiYinDeskState
		SHuiYinDeskState
		SHuiYinGameover
		CHuiYinDeskBetInfo
		SHuiYinDeskBetInfo
		CHuiYinRecords
		SHuiYinRecords
		CPk10Record
		SPk10Record
		CGetTrend
		SGetTrend
		CGetOpenResult
		SGetOpenResult
		CGetLastWins
		SGetLastWins
		CHuiYinGames
		SHuiYinGames
		CHuiYinRoomList
		SHuiYinRoomList
		CHuiYinProfit
		SHuiYinProfit
		HuiYinRoomInfo
		HuiYinRoom
		HuiYinGame
		HuiYinRoomBets
		HuiYinRoomCards
		Pk10Record
		HuiYinSeatOver
		HuiYinRoomWins
		HuiYinRoomOver
		HuiYinDealerList
		HuiYinRecords
		HuiYinSeatRecords
		HuiYinWinRecords
		HuiYinUserRecords
		HuiYinGameInfo
		LastWins
		HuiYinTrend
		TrendInfo
		RoomOpenResult
		OpenResult
		BetInfo
		UserData
		Currency
		RoomUser
		TopInfo
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import actor "github.com/AsynkronIT/protoactor-go/actor"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 匹配桌子
type MatchDesk struct {
	Rtype  uint32 `protobuf:"varint,1,opt,name=Rtype,proto3" json:"Rtype,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Roomid string `protobuf:"bytes,3,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Gtype  uint32 `protobuf:"varint,4,opt,name=Gtype,proto3" json:"Gtype,omitempty"`
}

func (m *MatchDesk) Reset()                    { *m = MatchDesk{} }
func (*MatchDesk) ProtoMessage()               {}
func (*MatchDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{0} }

func (m *MatchDesk) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *MatchDesk) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MatchDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *MatchDesk) GetGtype() uint32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

type MatchedDesk struct {
	Desk *actor.PID `protobuf:"bytes,1,opt,name=Desk" json:"Desk,omitempty"`
}

func (m *MatchedDesk) Reset()                    { *m = MatchedDesk{} }
func (*MatchedDesk) ProtoMessage()               {}
func (*MatchedDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{1} }

func (m *MatchedDesk) GetDesk() *actor.PID {
	if m != nil {
		return m.Desk
	}
	return nil
}

// 生成桌子
type GenDesk struct {
	Rtype uint32 `protobuf:"varint,1,opt,name=Rtype,proto3" json:"Rtype,omitempty"`
	Gtype uint32 `protobuf:"varint,2,opt,name=Gtype,proto3" json:"Gtype,omitempty"`
}

func (m *GenDesk) Reset()                    { *m = GenDesk{} }
func (*GenDesk) ProtoMessage()               {}
func (*GenDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{2} }

func (m *GenDesk) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *GenDesk) GetGtype() uint32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

type GenedDesk struct {
	Roomid string  `protobuf:"bytes,1,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Code   string  `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Error  ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *GenedDesk) Reset()                    { *m = GenedDesk{} }
func (*GenedDesk) ProtoMessage()               {}
func (*GenedDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{3} }

func (m *GenedDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *GenedDesk) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *GenedDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 创建桌子进程
type AddDesk struct {
	Desk   *actor.PID `protobuf:"bytes,1,opt,name=Desk" json:"Desk,omitempty"`
	Roomid string     `protobuf:"bytes,2,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Rtype  uint32     `protobuf:"varint,3,opt,name=Rtype,proto3" json:"Rtype,omitempty"`
	Gtype  uint32     `protobuf:"varint,4,opt,name=Gtype,proto3" json:"Gtype,omitempty"`
	Data   []byte     `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *AddDesk) Reset()                    { *m = AddDesk{} }
func (*AddDesk) ProtoMessage()               {}
func (*AddDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{4} }

func (m *AddDesk) GetDesk() *actor.PID {
	if m != nil {
		return m.Desk
	}
	return nil
}

func (m *AddDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *AddDesk) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *AddDesk) GetGtype() uint32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *AddDesk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type AddedDesk struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *AddedDesk) Reset()                    { *m = AddedDesk{} }
func (*AddedDesk) ProtoMessage()               {}
func (*AddedDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{5} }

func (m *AddedDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 关闭桌子进程
type CloseDesk struct {
	Roomid string `protobuf:"bytes,1,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Rtype  uint32 `protobuf:"varint,2,opt,name=Rtype,proto3" json:"Rtype,omitempty"`
	Gtype  uint32 `protobuf:"varint,3,opt,name=Gtype,proto3" json:"Gtype,omitempty"`
	Code   string `protobuf:"bytes,4,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (m *CloseDesk) Reset()                    { *m = CloseDesk{} }
func (*CloseDesk) ProtoMessage()               {}
func (*CloseDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{6} }

func (m *CloseDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *CloseDesk) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *CloseDesk) GetGtype() uint32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *CloseDesk) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type ClosedDesk struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *ClosedDesk) Reset()                    { *m = ClosedDesk{} }
func (*ClosedDesk) ProtoMessage()               {}
func (*ClosedDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{7} }

func (m *ClosedDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 进入房间
type EnterDesk struct {
	Sender *actor.PID `protobuf:"bytes,1,opt,name=Sender" json:"Sender,omitempty"`
	Data   []byte     `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *EnterDesk) Reset()                    { *m = EnterDesk{} }
func (*EnterDesk) ProtoMessage()               {}
func (*EnterDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{8} }

func (m *EnterDesk) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *EnterDesk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type EnteredDesk struct {
	Roomid string  `protobuf:"bytes,1,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Rtype  uint32  `protobuf:"varint,2,opt,name=Rtype,proto3" json:"Rtype,omitempty"`
	Gtype  uint32  `protobuf:"varint,3,opt,name=Gtype,proto3" json:"Gtype,omitempty"`
	Userid string  `protobuf:"bytes,4,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Error  ErrCode `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *EnteredDesk) Reset()                    { *m = EnteredDesk{} }
func (*EnteredDesk) ProtoMessage()               {}
func (*EnteredDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{9} }

func (m *EnteredDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *EnteredDesk) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *EnteredDesk) GetGtype() uint32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *EnteredDesk) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *EnteredDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 加入桌子
type JoinDesk struct {
	Sender *actor.PID `protobuf:"bytes,1,opt,name=Sender" json:"Sender,omitempty"`
	Roomid string     `protobuf:"bytes,2,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Rtype  uint32     `protobuf:"varint,3,opt,name=Rtype,proto3" json:"Rtype,omitempty"`
	Gtype  uint32     `protobuf:"varint,4,opt,name=Gtype,proto3" json:"Gtype,omitempty"`
	Userid string     `protobuf:"bytes,5,opt,name=Userid,proto3" json:"Userid,omitempty"`
}

func (m *JoinDesk) Reset()                    { *m = JoinDesk{} }
func (*JoinDesk) ProtoMessage()               {}
func (*JoinDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{10} }

func (m *JoinDesk) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *JoinDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *JoinDesk) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *JoinDesk) GetGtype() uint32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *JoinDesk) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type JoinedDesk struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *JoinedDesk) Reset()                    { *m = JoinedDesk{} }
func (*JoinedDesk) ProtoMessage()               {}
func (*JoinedDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{11} }

func (m *JoinedDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 离开房间
type LeaveDesk struct {
	Roomid string `protobuf:"bytes,1,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Userid string `protobuf:"bytes,2,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Type   uint32 `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (m *LeaveDesk) Reset()                    { *m = LeaveDesk{} }
func (*LeaveDesk) ProtoMessage()               {}
func (*LeaveDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{12} }

func (m *LeaveDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *LeaveDesk) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LeaveDesk) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type LeftDesk struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *LeftDesk) Reset()                    { *m = LeftDesk{} }
func (*LeftDesk) ProtoMessage()               {}
func (*LeftDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{13} }

func (m *LeftDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 打印桌子信息
type PrintDesk struct {
}

func (m *PrintDesk) Reset()                    { *m = PrintDesk{} }
func (*PrintDesk) ProtoMessage()               {}
func (*PrintDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{14} }

// 记录
type SetRecord struct {
	// 1胜利 //-1输了 //0荒庄
	Rtype int32 `protobuf:"varint,1,opt,name=Rtype,proto3" json:"Rtype,omitempty"`
}

func (m *SetRecord) Reset()                    { *m = SetRecord{} }
func (*SetRecord) ProtoMessage()               {}
func (*SetRecord) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{15} }

func (m *SetRecord) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func init() {
	proto.RegisterType((*MatchDesk)(nil), "pb.MatchDesk")
	proto.RegisterType((*MatchedDesk)(nil), "pb.MatchedDesk")
	proto.RegisterType((*GenDesk)(nil), "pb.GenDesk")
	proto.RegisterType((*GenedDesk)(nil), "pb.GenedDesk")
	proto.RegisterType((*AddDesk)(nil), "pb.AddDesk")
	proto.RegisterType((*AddedDesk)(nil), "pb.AddedDesk")
	proto.RegisterType((*CloseDesk)(nil), "pb.CloseDesk")
	proto.RegisterType((*ClosedDesk)(nil), "pb.ClosedDesk")
	proto.RegisterType((*EnterDesk)(nil), "pb.EnterDesk")
	proto.RegisterType((*EnteredDesk)(nil), "pb.EnteredDesk")
	proto.RegisterType((*JoinDesk)(nil), "pb.JoinDesk")
	proto.RegisterType((*JoinedDesk)(nil), "pb.JoinedDesk")
	proto.RegisterType((*LeaveDesk)(nil), "pb.LeaveDesk")
	proto.RegisterType((*LeftDesk)(nil), "pb.LeftDesk")
	proto.RegisterType((*PrintDesk)(nil), "pb.PrintDesk")
	proto.RegisterType((*SetRecord)(nil), "pb.SetRecord")
}
func (this *MatchDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatchDesk)
	if !ok {
		that2, ok := that.(MatchDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	return true
}
func (this *MatchedDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatchedDesk)
	if !ok {
		that2, ok := that.(MatchedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Desk.Equal(that1.Desk) {
		return false
	}
	return true
}
func (this *GenDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenDesk)
	if !ok {
		that2, ok := that.(GenDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	return true
}
func (this *GenedDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenedDesk)
	if !ok {
		that2, ok := that.(GenedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AddDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddDesk)
	if !ok {
		that2, ok := that.(AddDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Desk.Equal(that1.Desk) {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *AddedDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddedDesk)
	if !ok {
		that2, ok := that.(AddedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CloseDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloseDesk)
	if !ok {
		that2, ok := that.(CloseDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *ClosedDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClosedDesk)
	if !ok {
		that2, ok := that.(ClosedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *EnterDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnterDesk)
	if !ok {
		that2, ok := that.(EnterDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *EnteredDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnteredDesk)
	if !ok {
		that2, ok := that.(EnteredDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *JoinDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinDesk)
	if !ok {
		that2, ok := that.(JoinDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *JoinedDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinedDesk)
	if !ok {
		that2, ok := that.(JoinedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *LeaveDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LeaveDesk)
	if !ok {
		that2, ok := that.(LeaveDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *LeftDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LeftDesk)
	if !ok {
		that2, ok := that.(LeftDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *PrintDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrintDesk)
	if !ok {
		that2, ok := that.(PrintDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetRecord)
	if !ok {
		that2, ok := that.(SetRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	return true
}
func (this *MatchDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.MatchDesk{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MatchedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.MatchedDesk{")
	if this.Desk != nil {
		s = append(s, "Desk: "+fmt.Sprintf("%#v", this.Desk)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GenDesk{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.GenedDesk{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.AddDesk{")
	if this.Desk != nil {
		s = append(s, "Desk: "+fmt.Sprintf("%#v", this.Desk)+",\n")
	}
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AddedDesk{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloseDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CloseDesk{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClosedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ClosedDesk{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnterDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.EnterDesk{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnteredDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.EnteredDesk{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JoinDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.JoinDesk{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JoinedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.JoinedDesk{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LeaveDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.LeaveDesk{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LeftDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.LeftDesk{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrintDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.PrintDesk{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SetRecord{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringActorDesk(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MatchDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	return i, nil
}

func (m *MatchedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Desk != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Desk.Size()))
		n1, err := m.Desk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GenDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	return i, nil
}

func (m *GenedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AddDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Desk != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Desk.Size()))
		n2, err := m.Desk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *AddedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CloseDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	return i, nil
}

func (m *ClosedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClosedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *EnterDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Sender.Size()))
		n3, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *EnteredDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnteredDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *JoinDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Sender.Size()))
		n4, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *JoinedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *LeaveDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *LeftDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeftDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *PrintDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrintDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SetRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	return i, nil
}

func encodeVarintActorDesk(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MatchDesk) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	return n
}

func (m *MatchedDesk) Size() (n int) {
	var l int
	_ = l
	if m.Desk != nil {
		l = m.Desk.Size()
		n += 1 + l + sovActorDesk(uint64(l))
	}
	return n
}

func (m *GenDesk) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	return n
}

func (m *GenedDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovActorDesk(uint64(m.Error))
	}
	return n
}

func (m *AddDesk) Size() (n int) {
	var l int
	_ = l
	if m.Desk != nil {
		l = m.Desk.Size()
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	return n
}

func (m *AddedDesk) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovActorDesk(uint64(m.Error))
	}
	return n
}

func (m *CloseDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	return n
}

func (m *ClosedDesk) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovActorDesk(uint64(m.Error))
	}
	return n
}

func (m *EnterDesk) Size() (n int) {
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	return n
}

func (m *EnteredDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovActorDesk(uint64(m.Error))
	}
	return n
}

func (m *JoinDesk) Size() (n int) {
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	return n
}

func (m *JoinedDesk) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovActorDesk(uint64(m.Error))
	}
	return n
}

func (m *LeaveDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovActorDesk(uint64(m.Type))
	}
	return n
}

func (m *LeftDesk) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovActorDesk(uint64(m.Error))
	}
	return n
}

func (m *PrintDesk) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SetRecord) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	return n
}

func sovActorDesk(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozActorDesk(x uint64) (n int) {
	return sovActorDesk(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MatchDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatchDesk{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MatchedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatchedDesk{`,
		`Desk:` + strings.Replace(fmt.Sprintf("%v", this.Desk), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenDesk{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenedDesk{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddDesk{`,
		`Desk:` + strings.Replace(fmt.Sprintf("%v", this.Desk), "PID", "actor.PID", 1) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddedDesk{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloseDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloseDesk{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClosedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClosedDesk{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnterDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnterDesk{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnteredDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnteredDesk{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinDesk{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinedDesk{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeaveDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeaveDesk{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeftDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeftDesk{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrintDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrintDesk{`,
		`}`,
	}, "")
	return s
}
func (this *SetRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetRecord{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringActorDesk(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MatchDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desk == nil {
				m.Desk = &actor.PID{}
			}
			if err := m.Desk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desk == nil {
				m.Desk = &actor.PID{}
			}
			if err := m.Desk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClosedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClosedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClosedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnteredDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnteredDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnteredDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeftDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeftDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeftDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrintDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrintDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrintDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActorDesk(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthActorDesk
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowActorDesk
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActorDesk(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthActorDesk = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActorDesk   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("actor_desk.proto", fileDescriptorActorDesk) }

var fileDescriptorActorDesk = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0xae, 0x9d, 0xd6, 0x2f, 0xfc, 0x92, 0x85, 0xaa, 0xa8, 0xc3, 0x29, 0xf5, 0x94,
	0x81, 0x38, 0x52, 0x11, 0xec, 0x21, 0xa9, 0xa2, 0xa2, 0x02, 0x95, 0x5b, 0x16, 0x96, 0xca, 0xf1,
	0x3d, 0x52, 0x2b, 0xc4, 0x17, 0x9d, 0x0d, 0x52, 0x37, 0x58, 0x11, 0x03, 0x7f, 0x06, 0x7f, 0x0a,
	0x63, 0x47, 0x46, 0x62, 0x16, 0xc6, 0xfe, 0x09, 0xc8, 0xcf, 0x96, 0xed, 0x54, 0x69, 0x30, 0x12,
	0x53, 0xde, 0xbd, 0x3b, 0xbf, 0xef, 0xe7, 0xfb, 0x3d, 0xc7, 0xf0, 0xc0, 0xf3, 0x63, 0xa9, 0xce,
	0x05, 0x46, 0x33, 0x67, 0xa1, 0x64, 0x2c, 0x2d, 0x6d, 0x31, 0xd9, 0x7b, 0x3a, 0x0d, 0xe2, 0x8b,
	0xf7, 0x13, 0xc7, 0x97, 0xf3, 0xfe, 0x20, 0xba, 0x0c, 0x67, 0x4a, 0x86, 0x47, 0x67, 0x7d, 0x3a,
	0x40, 0x0f, 0xf4, 0xa6, 0xb2, 0x4f, 0x45, 0xd6, 0x8b, 0xb2, 0x67, 0xf7, 0xee, 0x4f, 0xbd, 0x39,
	0x9e, 0xfb, 0x52, 0x60, 0xd6, 0xb0, 0x7d, 0x30, 0x5f, 0x78, 0xb1, 0x7f, 0x31, 0xc2, 0x68, 0x66,
	0x3d, 0x04, 0xc3, 0x8d, 0x2f, 0x17, 0xd8, 0x66, 0x1d, 0xd6, 0xbd, 0xeb, 0x66, 0x0b, 0xcb, 0x02,
	0xfd, 0xa5, 0x37, 0xc7, 0xb6, 0xd6, 0x61, 0x5d, 0xd3, 0xa5, 0xda, 0xda, 0x85, 0xa6, 0x2b, 0xe5,
	0x3c, 0x10, 0xed, 0x2d, 0xea, 0xe6, 0xab, 0x74, 0xc2, 0x98, 0x26, 0xe8, 0xd9, 0x04, 0x5a, 0xd8,
	0x3d, 0x68, 0x91, 0x08, 0x0a, 0x92, 0xe1, 0xa0, 0xa7, 0xbf, 0xa4, 0xd2, 0x3a, 0x00, 0x87, 0x38,
	0x9d, 0x93, 0xa3, 0x91, 0x4b, 0x7d, 0xfb, 0x09, 0x6c, 0x8f, 0x31, 0xdc, 0x40, 0x54, 0xa8, 0x68,
	0x55, 0x95, 0x37, 0x60, 0x8e, 0x31, 0xcc, 0x35, 0x4a, 0x40, 0xb6, 0x02, 0x68, 0x81, 0x3e, 0x94,
	0xa2, 0x30, 0x93, 0xd6, 0xd6, 0x3e, 0x18, 0xa8, 0x94, 0x54, 0xe4, 0xe5, 0xde, 0x41, 0xcb, 0x59,
	0x4c, 0x9c, 0x43, 0xa5, 0xd2, 0x3d, 0x37, 0xdb, 0xb1, 0x3f, 0x31, 0xd8, 0x1e, 0x88, 0x5a, 0xf8,
	0x15, 0x69, 0xed, 0x66, 0x36, 0x99, 0x97, 0xad, 0xb5, 0x5e, 0xaa, 0x89, 0xa5, 0x98, 0x23, 0x2f,
	0xf6, 0xda, 0x46, 0x87, 0x75, 0xef, 0xb8, 0x54, 0xdb, 0x0e, 0x98, 0x03, 0x21, 0x72, 0x7f, 0x05,
	0x33, 0xbb, 0x95, 0xd9, 0x07, 0x73, 0xf8, 0x4e, 0x46, 0xb8, 0x31, 0x8f, 0x02, 0x4a, 0x5b, 0x0b,
	0xb5, 0x75, 0x03, 0x8a, 0xb2, 0xd3, 0xcb, 0xec, 0xec, 0x3e, 0x00, 0x89, 0xd4, 0xa6, 0x1a, 0x82,
	0x79, 0x18, 0xc6, 0xa8, 0xe8, 0xbc, 0x0d, 0xcd, 0x53, 0x0c, 0x05, 0xaa, 0x35, 0x61, 0xe6, 0x3b,
	0x45, 0x14, 0x5a, 0x25, 0x8a, 0x2f, 0x0c, 0x5a, 0x34, 0xe5, 0x2f, 0xb7, 0xfd, 0x2f, 0xee, 0x76,
	0xa1, 0xf9, 0x3a, 0x42, 0x15, 0x88, 0xdc, 0x5f, 0xbe, 0x2a, 0x3d, 0x19, 0xb7, 0x7a, 0xfa, 0xcc,
	0x60, 0xe7, 0xb9, 0x0c, 0xc2, 0xda, 0x9e, 0xfe, 0xc7, 0x2b, 0x52, 0xf2, 0x1a, 0x55, 0xde, 0xf4,
	0x46, 0x52, 0x96, 0xfa, 0x37, 0xf2, 0x0a, 0xcc, 0x63, 0xf4, 0x3e, 0x6c, 0x7e, 0x4f, 0x4a, 0x35,
	0x6d, 0x25, 0x1d, 0x0b, 0xf4, 0xb3, 0x12, 0x98, 0x6a, 0xbb, 0x07, 0x3b, 0xc7, 0xf8, 0x36, 0xae,
	0xab, 0xdf, 0x02, 0xf3, 0x44, 0x05, 0x21, 0x9d, 0xb7, 0xf7, 0xc1, 0x3c, 0xc5, 0xd8, 0x45, 0x5f,
	0x2a, 0xb1, 0xfa, 0xef, 0x37, 0xf2, 0x38, 0x9e, 0x3d, 0xba, 0x5a, 0xf2, 0xc6, 0x8f, 0x25, 0x6f,
	0x5c, 0x2f, 0x39, 0xfb, 0x98, 0x70, 0xf6, 0x2d, 0xe1, 0xec, 0x7b, 0xc2, 0xd9, 0x55, 0xc2, 0xd9,
	0xcf, 0x84, 0xb3, 0xdf, 0x09, 0x6f, 0x5c, 0x27, 0x9c, 0x7d, 0xfd, 0xc5, 0x1b, 0x93, 0x26, 0x7d,
	0xe7, 0x1e, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xa6, 0xef, 0xd4, 0x48, 0x05, 0x00, 0x00,
}
