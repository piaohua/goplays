// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: huiyin_user.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 战绩
type CHuiYinRecords struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Page   uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Gtype  uint32 `protobuf:"varint,3,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Rtype  uint32 `protobuf:"varint,4,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Userid string `protobuf:"bytes,5,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CHuiYinRecords) Reset()                    { *m = CHuiYinRecords{} }
func (*CHuiYinRecords) ProtoMessage()               {}
func (*CHuiYinRecords) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{0} }

func (m *CHuiYinRecords) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CHuiYinRecords) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CHuiYinRecords) GetGtype() uint32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *CHuiYinRecords) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *CHuiYinRecords) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

// TODO 战绩下注输赢明细
type SHuiYinRecords struct {
	Code     uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List     []*HuiYinRecords     `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Userlist []*HuiYinUserRecords `protobuf:"bytes,3,rep,name=userlist" json:"userlist,omitempty"`
	Error    ErrCode              `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SHuiYinRecords) Reset()                    { *m = SHuiYinRecords{} }
func (*SHuiYinRecords) ProtoMessage()               {}
func (*SHuiYinRecords) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{1} }

func (m *SHuiYinRecords) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinRecords) GetList() []*HuiYinRecords {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SHuiYinRecords) GetUserlist() []*HuiYinUserRecords {
	if m != nil {
		return m.Userlist
	}
	return nil
}

func (m *SHuiYinRecords) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 获取开奖结果记录
type CPk10Record struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Type uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *CPk10Record) Reset()                    { *m = CPk10Record{} }
func (*CPk10Record) ProtoMessage()               {}
func (*CPk10Record) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{2} }

func (m *CPk10Record) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CPk10Record) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CPk10Record) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type SPk10Record struct {
	Code  uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List  []*Pk10Record `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode       `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SPk10Record) Reset()                    { *m = SPk10Record{} }
func (*SPk10Record) ProtoMessage()               {}
func (*SPk10Record) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{3} }

func (m *SPk10Record) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SPk10Record) GetList() []*Pk10Record {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SPk10Record) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 获取房间趋势(房间内)
type CGetTrend struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CGetTrend) Reset()                    { *m = CGetTrend{} }
func (*CGetTrend) ProtoMessage()               {}
func (*CGetTrend) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{4} }

func (m *CGetTrend) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SGetTrend struct {
	Code  uint32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List  []*HuiYinTrend `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode        `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SGetTrend) Reset()                    { *m = SGetTrend{} }
func (*SGetTrend) ProtoMessage()               {}
func (*SGetTrend) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{5} }

func (m *SGetTrend) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SGetTrend) GetList() []*HuiYinTrend {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SGetTrend) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 获取房间趋势(房间内)
type CGetOpenResult struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CGetOpenResult) Reset()                    { *m = CGetOpenResult{} }
func (*CGetOpenResult) ProtoMessage()               {}
func (*CGetOpenResult) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{6} }

func (m *CGetOpenResult) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SGetOpenResult struct {
	Code  uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List  []*RoomOpenResult `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode           `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SGetOpenResult) Reset()                    { *m = SGetOpenResult{} }
func (*SGetOpenResult) ProtoMessage()               {}
func (*SGetOpenResult) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{7} }

func (m *SGetOpenResult) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SGetOpenResult) GetList() []*RoomOpenResult {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SGetOpenResult) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 获取上局赢家(房间内)
type CGetLastWins struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CGetLastWins) Reset()                    { *m = CGetLastWins{} }
func (*CGetLastWins) ProtoMessage()               {}
func (*CGetLastWins) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{8} }

func (m *CGetLastWins) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SGetLastWins struct {
	Code  uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List  []*LastWins `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode     `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SGetLastWins) Reset()                    { *m = SGetLastWins{} }
func (*SGetLastWins) ProtoMessage()               {}
func (*SGetLastWins) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{9} }

func (m *SGetLastWins) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SGetLastWins) GetList() []*LastWins {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SGetLastWins) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 获取游戏时间列表
type CHuiYinGames struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CHuiYinGames) Reset()                    { *m = CHuiYinGames{} }
func (*CHuiYinGames) ProtoMessage()               {}
func (*CHuiYinGames) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{10} }

func (m *CHuiYinGames) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SHuiYinGames struct {
	Code  uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List  []*HuiYinGame `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode       `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SHuiYinGames) Reset()                    { *m = SHuiYinGames{} }
func (*SHuiYinGames) ProtoMessage()               {}
func (*SHuiYinGames) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{11} }

func (m *SHuiYinGames) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinGames) GetList() []*HuiYinGame {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SHuiYinGames) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 房间列表,按类型获取
type CHuiYinRoomList struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Ltype uint32 `protobuf:"varint,2,opt,name=ltype,proto3" json:"ltype,omitempty"`
}

func (m *CHuiYinRoomList) Reset()                    { *m = CHuiYinRoomList{} }
func (*CHuiYinRoomList) ProtoMessage()               {}
func (*CHuiYinRoomList) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{12} }

func (m *CHuiYinRoomList) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CHuiYinRoomList) GetLtype() uint32 {
	if m != nil {
		return m.Ltype
	}
	return 0
}

type SHuiYinRoomList struct {
	Code  uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List  []*HuiYinRoom `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode       `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SHuiYinRoomList) Reset()                    { *m = SHuiYinRoomList{} }
func (*SHuiYinRoomList) ProtoMessage()               {}
func (*SHuiYinRoomList) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{13} }

func (m *SHuiYinRoomList) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinRoomList) GetList() []*HuiYinRoom {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SHuiYinRoomList) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 盈亏统计
type CHuiYinProfit struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Userid string `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CHuiYinProfit) Reset()                    { *m = CHuiYinProfit{} }
func (*CHuiYinProfit) ProtoMessage()               {}
func (*CHuiYinProfit) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{14} }

func (m *CHuiYinProfit) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CHuiYinProfit) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SHuiYinProfit struct {
	Code   uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seven  int64   `protobuf:"varint,2,opt,name=seven,proto3" json:"seven,omitempty"`
	Thirty int64   `protobuf:"varint,3,opt,name=thirty,proto3" json:"thirty,omitempty"`
	All    int64   `protobuf:"varint,4,opt,name=all,proto3" json:"all,omitempty"`
	Error  ErrCode `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SHuiYinProfit) Reset()                    { *m = SHuiYinProfit{} }
func (*SHuiYinProfit) ProtoMessage()               {}
func (*SHuiYinProfit) Descriptor() ([]byte, []int) { return fileDescriptorHuiyinUser, []int{15} }

func (m *SHuiYinProfit) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SHuiYinProfit) GetSeven() int64 {
	if m != nil {
		return m.Seven
	}
	return 0
}

func (m *SHuiYinProfit) GetThirty() int64 {
	if m != nil {
		return m.Thirty
	}
	return 0
}

func (m *SHuiYinProfit) GetAll() int64 {
	if m != nil {
		return m.All
	}
	return 0
}

func (m *SHuiYinProfit) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*CHuiYinRecords)(nil), "pb.CHuiYinRecords")
	proto.RegisterType((*SHuiYinRecords)(nil), "pb.SHuiYinRecords")
	proto.RegisterType((*CPk10Record)(nil), "pb.CPk10Record")
	proto.RegisterType((*SPk10Record)(nil), "pb.SPk10Record")
	proto.RegisterType((*CGetTrend)(nil), "pb.CGetTrend")
	proto.RegisterType((*SGetTrend)(nil), "pb.SGetTrend")
	proto.RegisterType((*CGetOpenResult)(nil), "pb.CGetOpenResult")
	proto.RegisterType((*SGetOpenResult)(nil), "pb.SGetOpenResult")
	proto.RegisterType((*CGetLastWins)(nil), "pb.CGetLastWins")
	proto.RegisterType((*SGetLastWins)(nil), "pb.SGetLastWins")
	proto.RegisterType((*CHuiYinGames)(nil), "pb.CHuiYinGames")
	proto.RegisterType((*SHuiYinGames)(nil), "pb.SHuiYinGames")
	proto.RegisterType((*CHuiYinRoomList)(nil), "pb.CHuiYinRoomList")
	proto.RegisterType((*SHuiYinRoomList)(nil), "pb.SHuiYinRoomList")
	proto.RegisterType((*CHuiYinProfit)(nil), "pb.CHuiYinProfit")
	proto.RegisterType((*SHuiYinProfit)(nil), "pb.SHuiYinProfit")
}
func (this *CHuiYinRecords) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CHuiYinRecords)
	if !ok {
		that2, ok := that.(CHuiYinRecords)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SHuiYinRecords) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinRecords)
	if !ok {
		that2, ok := that.(SHuiYinRecords)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if len(this.Userlist) != len(that1.Userlist) {
		return false
	}
	for i := range this.Userlist {
		if !this.Userlist[i].Equal(that1.Userlist[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CPk10Record) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPk10Record)
	if !ok {
		that2, ok := that.(CPk10Record)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *SPk10Record) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SPk10Record)
	if !ok {
		that2, ok := that.(SPk10Record)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CGetTrend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CGetTrend)
	if !ok {
		that2, ok := that.(CGetTrend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SGetTrend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SGetTrend)
	if !ok {
		that2, ok := that.(SGetTrend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CGetOpenResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CGetOpenResult)
	if !ok {
		that2, ok := that.(CGetOpenResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SGetOpenResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SGetOpenResult)
	if !ok {
		that2, ok := that.(SGetOpenResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CGetLastWins) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CGetLastWins)
	if !ok {
		that2, ok := that.(CGetLastWins)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SGetLastWins) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SGetLastWins)
	if !ok {
		that2, ok := that.(SGetLastWins)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CHuiYinGames) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CHuiYinGames)
	if !ok {
		that2, ok := that.(CHuiYinGames)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SHuiYinGames) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinGames)
	if !ok {
		that2, ok := that.(SHuiYinGames)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CHuiYinRoomList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CHuiYinRoomList)
	if !ok {
		that2, ok := that.(CHuiYinRoomList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Ltype != that1.Ltype {
		return false
	}
	return true
}
func (this *SHuiYinRoomList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinRoomList)
	if !ok {
		that2, ok := that.(SHuiYinRoomList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CHuiYinProfit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CHuiYinProfit)
	if !ok {
		that2, ok := that.(CHuiYinProfit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SHuiYinProfit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHuiYinProfit)
	if !ok {
		that2, ok := that.(SHuiYinProfit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seven != that1.Seven {
		return false
	}
	if this.Thirty != that1.Thirty {
		return false
	}
	if this.All != that1.All {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CHuiYinRecords) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.CHuiYinRecords{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinRecords) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SHuiYinRecords{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	if this.Userlist != nil {
		s = append(s, "Userlist: "+fmt.Sprintf("%#v", this.Userlist)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CPk10Record) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CPk10Record{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPk10Record) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SPk10Record{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CGetTrend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CGetTrend{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SGetTrend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SGetTrend{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CGetOpenResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CGetOpenResult{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SGetOpenResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SGetOpenResult{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CGetLastWins) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CGetLastWins{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SGetLastWins) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SGetLastWins{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CHuiYinGames) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CHuiYinGames{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinGames) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SHuiYinGames{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CHuiYinRoomList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CHuiYinRoomList{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Ltype: "+fmt.Sprintf("%#v", this.Ltype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinRoomList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SHuiYinRoomList{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CHuiYinProfit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CHuiYinProfit{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHuiYinProfit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SHuiYinProfit{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seven: "+fmt.Sprintf("%#v", this.Seven)+",\n")
	s = append(s, "Thirty: "+fmt.Sprintf("%#v", this.Thirty)+",\n")
	s = append(s, "All: "+fmt.Sprintf("%#v", this.All)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHuiyinUser(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CHuiYinRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CHuiYinRecords) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Page))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Rtype))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SHuiYinRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinRecords) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHuiyinUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Userlist) > 0 {
		for _, msg := range m.Userlist {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintHuiyinUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CPk10Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPk10Record) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Page))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *SPk10Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPk10Record) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHuiyinUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CGetTrend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CGetTrend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SGetTrend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGetTrend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHuiyinUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CGetOpenResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CGetOpenResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SGetOpenResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGetOpenResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHuiyinUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CGetLastWins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CGetLastWins) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SGetLastWins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGetLastWins) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHuiyinUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CHuiYinGames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CHuiYinGames) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SHuiYinGames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinGames) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHuiyinUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CHuiYinRoomList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CHuiYinRoomList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	if m.Ltype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Ltype))
	}
	return i, nil
}

func (m *SHuiYinRoomList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinRoomList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHuiyinUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CHuiYinProfit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CHuiYinProfit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SHuiYinProfit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHuiYinProfit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Code))
	}
	if m.Seven != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Seven))
	}
	if m.Thirty != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Thirty))
	}
	if m.All != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.All))
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHuiyinUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeVarintHuiyinUser(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CHuiYinRecords) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	if m.Page != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Page))
	}
	if m.Gtype != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Rtype))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovHuiyinUser(uint64(l))
	}
	return n
}

func (m *SHuiYinRecords) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovHuiyinUser(uint64(l))
		}
	}
	if len(m.Userlist) > 0 {
		for _, e := range m.Userlist {
			l = e.Size()
			n += 1 + l + sovHuiyinUser(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Error))
	}
	return n
}

func (m *CPk10Record) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	if m.Page != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Page))
	}
	if m.Type != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Type))
	}
	return n
}

func (m *SPk10Record) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovHuiyinUser(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Error))
	}
	return n
}

func (m *CGetTrend) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	return n
}

func (m *SGetTrend) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovHuiyinUser(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Error))
	}
	return n
}

func (m *CGetOpenResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	return n
}

func (m *SGetOpenResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovHuiyinUser(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Error))
	}
	return n
}

func (m *CGetLastWins) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	return n
}

func (m *SGetLastWins) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovHuiyinUser(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Error))
	}
	return n
}

func (m *CHuiYinGames) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	return n
}

func (m *SHuiYinGames) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovHuiyinUser(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Error))
	}
	return n
}

func (m *CHuiYinRoomList) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	if m.Ltype != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Ltype))
	}
	return n
}

func (m *SHuiYinRoomList) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovHuiyinUser(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Error))
	}
	return n
}

func (m *CHuiYinProfit) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovHuiyinUser(uint64(l))
	}
	return n
}

func (m *SHuiYinProfit) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Code))
	}
	if m.Seven != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Seven))
	}
	if m.Thirty != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Thirty))
	}
	if m.All != 0 {
		n += 1 + sovHuiyinUser(uint64(m.All))
	}
	if m.Error != 0 {
		n += 1 + sovHuiyinUser(uint64(m.Error))
	}
	return n
}

func sovHuiyinUser(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHuiyinUser(x uint64) (n int) {
	return sovHuiyinUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CHuiYinRecords) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CHuiYinRecords{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinRecords) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinRecords{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "HuiYinRecords", "HuiYinRecords", 1) + `,`,
		`Userlist:` + strings.Replace(fmt.Sprintf("%v", this.Userlist), "HuiYinUserRecords", "HuiYinUserRecords", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CPk10Record) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPk10Record{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPk10Record) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPk10Record{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "Pk10Record", "Pk10Record", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CGetTrend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CGetTrend{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SGetTrend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SGetTrend{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "HuiYinTrend", "HuiYinTrend", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CGetOpenResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CGetOpenResult{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SGetOpenResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SGetOpenResult{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "RoomOpenResult", "RoomOpenResult", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CGetLastWins) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CGetLastWins{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SGetLastWins) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SGetLastWins{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "LastWins", "LastWins", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CHuiYinGames) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CHuiYinGames{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinGames) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinGames{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "HuiYinGame", "HuiYinGame", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CHuiYinRoomList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CHuiYinRoomList{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Ltype:` + fmt.Sprintf("%v", this.Ltype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinRoomList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinRoomList{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "HuiYinRoom", "HuiYinRoom", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CHuiYinProfit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CHuiYinProfit{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHuiYinProfit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHuiYinProfit{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seven:` + fmt.Sprintf("%v", this.Seven) + `,`,
		`Thirty:` + fmt.Sprintf("%v", this.Thirty) + `,`,
		`All:` + fmt.Sprintf("%v", this.All) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHuiyinUser(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CHuiYinRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CHuiYinRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CHuiYinRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &HuiYinRecords{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userlist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userlist = append(m.Userlist, &HuiYinUserRecords{})
			if err := m.Userlist[len(m.Userlist)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPk10Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPk10Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPk10Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPk10Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPk10Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPk10Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Pk10Record{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CGetTrend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CGetTrend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CGetTrend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGetTrend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGetTrend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGetTrend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &HuiYinTrend{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CGetOpenResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CGetOpenResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CGetOpenResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGetOpenResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGetOpenResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGetOpenResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RoomOpenResult{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CGetLastWins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CGetLastWins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CGetLastWins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGetLastWins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGetLastWins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGetLastWins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &LastWins{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CHuiYinGames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CHuiYinGames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CHuiYinGames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinGames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinGames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinGames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &HuiYinGame{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CHuiYinRoomList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CHuiYinRoomList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CHuiYinRoomList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltype", wireType)
			}
			m.Ltype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ltype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinRoomList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinRoomList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinRoomList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &HuiYinRoom{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CHuiYinProfit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CHuiYinProfit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CHuiYinProfit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHuiYinProfit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHuiYinProfit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHuiYinProfit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seven", wireType)
			}
			m.Seven = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seven |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thirty", wireType)
			}
			m.Thirty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Thirty |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			m.All = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.All |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuiyinUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuiyinUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHuiyinUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHuiyinUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHuiyinUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHuiyinUser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHuiyinUser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHuiyinUser(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHuiyinUser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHuiyinUser   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("huiyin_user.proto", fileDescriptorHuiyinUser) }

var fileDescriptorHuiyinUser = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x71, 0x5c, 0x91, 0x97, 0xc4, 0x69, 0x4f, 0x01, 0x45, 0x1d, 0x8e, 0x60, 0x7e,
	0x28, 0x03, 0x8a, 0x68, 0x19, 0xd9, 0x88, 0x50, 0x41, 0xaa, 0x44, 0x75, 0x06, 0x21, 0xa6, 0x28,
	0x69, 0x8e, 0xe4, 0x84, 0xe3, 0xb3, 0xce, 0x0e, 0x52, 0x24, 0x06, 0x26, 0x66, 0xfe, 0x05, 0x36,
	0xfe, 0x14, 0xc6, 0x8e, 0x8c, 0xc4, 0x2c, 0x8c, 0xfd, 0x13, 0xd0, 0xdd, 0x25, 0x35, 0x96, 0x9c,
	0xda, 0xdd, 0xee, 0xbd, 0xfb, 0x7e, 0xef, 0x7d, 0xde, 0xd3, 0xe9, 0xc1, 0xc1, 0x7c, 0xc9, 0x57,
	0x3c, 0x18, 0x2d, 0x23, 0x26, 0x07, 0xa1, 0x14, 0xb1, 0xc0, 0xd5, 0x70, 0x72, 0xd8, 0x9e, 0x8d,
	0x17, 0x6c, 0x74, 0x2e, 0xa6, 0xcc, 0x24, 0x0f, 0xf7, 0xc3, 0xe5, 0x64, 0x64, 0xb4, 0x26, 0xe3,
	0x7e, 0x06, 0x67, 0xf8, 0x72, 0xc9, 0xdf, 0xf3, 0x80, 0xb2, 0x73, 0x21, 0xa7, 0x11, 0xc6, 0x50,
	0x53, 0x8e, 0x2e, 0xea, 0xa1, 0x7e, 0x8b, 0xea, 0xb3, 0xca, 0x85, 0xe3, 0x19, 0xeb, 0x56, 0x4d,
	0x4e, 0x9d, 0x71, 0x07, 0xec, 0x59, 0xbc, 0x0a, 0x59, 0xd7, 0xd2, 0x49, 0x13, 0xa8, 0xac, 0xd4,
	0xd9, 0x9a, 0xc9, 0xea, 0x00, 0xdf, 0x81, 0x3d, 0x85, 0xc6, 0xa7, 0x5d, 0xbb, 0x87, 0xfa, 0x75,
	0xba, 0x89, 0xdc, 0xef, 0x08, 0x1c, 0xaf, 0xb8, 0xfc, 0x43, 0xa8, 0xf9, 0x3c, 0x8a, 0xbb, 0xd5,
	0x9e, 0xd5, 0x6f, 0x1c, 0x1f, 0x0c, 0xc2, 0xc9, 0x20, 0x63, 0xa2, 0xfa, 0x1a, 0x1f, 0xc1, 0x2d,
	0xf5, 0xae, 0x96, 0x5a, 0x5a, 0x7a, 0x3b, 0x95, 0xbe, 0x8d, 0x98, 0xdc, 0xca, 0xaf, 0x64, 0xf8,
	0x1e, 0xd8, 0x4c, 0x4a, 0x21, 0x35, 0xae, 0x73, 0xdc, 0x50, 0xfa, 0x17, 0x52, 0x0e, 0xc5, 0x94,
	0x51, 0x73, 0xe3, 0xbe, 0x82, 0xc6, 0xf0, 0xec, 0xe3, 0xd1, 0x13, 0x63, 0x2e, 0x3d, 0x1e, 0x0c,
	0xb5, 0xff, 0xa6, 0xa3, 0xcf, 0xee, 0x1c, 0x1a, 0x5e, 0xc1, 0x53, 0x6e, 0xa6, 0x55, 0x47, 0xf1,
	0xa4, 0x8e, 0x4d, 0x9f, 0x57, 0xd0, 0xd6, 0x4e, 0xe8, 0xbb, 0x50, 0x1f, 0x9e, 0xb0, 0xf8, 0x8d,
	0x64, 0x41, 0x6e, 0x1d, 0x77, 0x06, 0x75, 0xef, 0x3a, 0x01, 0xbe, 0x9f, 0x01, 0x69, 0xa7, 0x83,
	0xd4, 0x96, 0xf2, 0x24, 0x0f, 0xc0, 0x51, 0x24, 0xaf, 0x43, 0x16, 0x50, 0x16, 0x2d, 0xfd, 0x38,
	0x17, 0x47, 0x80, 0xe3, 0x15, 0xaa, 0xf0, 0xa3, 0x0c, 0x13, 0x56, 0xd5, 0xa8, 0x10, 0x8b, 0xd4,
	0x55, 0x1e, 0xcb, 0x85, 0xa6, 0xc2, 0x3a, 0x1d, 0x47, 0xf1, 0x3b, 0x1e, 0x44, 0x3b, 0x66, 0xd4,
	0xf4, 0x0a, 0x34, 0xb8, 0x97, 0x41, 0x6a, 0xaa, 0x4a, 0x5b, 0xfd, 0xcd, 0x60, 0xcc, 0x70, 0x4f,
	0xc6, 0x0b, 0x96, 0x0f, 0xc3, 0xa1, 0xe9, 0x15, 0x68, 0xf2, 0x3e, 0x4f, 0x6a, 0x29, 0x8f, 0xf3,
	0x0c, 0xda, 0xdb, 0x9d, 0x20, 0xc4, 0xe2, 0x54, 0xb9, 0xf2, 0xaa, 0x75, 0xc0, 0xf6, 0xf5, 0x17,
	0x37, 0xdf, 0xde, 0x04, 0xae, 0x0f, 0x6d, 0xaf, 0x84, 0x79, 0x27, 0xaa, 0x72, 0xdd, 0x04, 0xb5,
	0xb5, 0x41, 0x3d, 0x93, 0xe2, 0x03, 0xcf, 0xaf, 0x95, 0x6e, 0x9f, 0x6a, 0x66, 0xfb, 0x7c, 0x45,
	0xd0, 0xf2, 0x0a, 0xdd, 0x1d, 0xb0, 0x23, 0xf6, 0x89, 0x05, 0xda, 0x6c, 0x51, 0x13, 0xa8, 0x37,
	0xe3, 0x39, 0x97, 0xf1, 0x4a, 0xc3, 0x59, 0x74, 0x13, 0xe1, 0x7d, 0xb0, 0xc6, 0xbe, 0xaf, 0xd7,
	0x89, 0x45, 0xd5, 0x31, 0xed, 0xc2, 0xde, 0xd5, 0xc5, 0xf3, 0xc7, 0x17, 0x6b, 0x52, 0xf9, 0xb5,
	0x26, 0x95, 0xcb, 0x35, 0x41, 0x5f, 0x12, 0x82, 0x7e, 0x24, 0x04, 0xfd, 0x4c, 0x08, 0xba, 0x48,
	0x08, 0xfa, 0x9d, 0x10, 0xf4, 0x37, 0x21, 0x95, 0xcb, 0x84, 0xa0, 0x6f, 0x7f, 0x48, 0x65, 0xb2,
	0xa7, 0x37, 0xf7, 0xd3, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x32, 0xd2, 0xa6, 0xf5, 0x05,
	0x00, 0x00,
}
